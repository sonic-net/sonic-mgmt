# This job is for periodically auto recovery testbed

name:  AutoRecovery_$(Build.DefinitionName)_$(SourceBranchName)_$(Build.BuildId)_$(Date:yyyyMMdd)$(Rev:.r)

trigger: none
pr: none


parameters:
  - name: VERIFY_TYPE
    type: string
    default: case_verify
    values:
      - case_verify

  - name: TEST_BRIEF
    type: string
    default: "Test-Brief"
    displayName: "test brief"

  - name: SCRIPT_BRANCH
    type: string
    default: internal
    displayName: "branch name for running mgmt script"

  - name: IMAGE_BRANCH
    type: string
    default: internal
    displayName: "base branch name of target sonic image"
    values:
      - internal
      - internal-202012
      - internal-202205
      - internal-202305
      - master

  - name: IMAGE_FOLDER
    type: string
    default: null
    displayName: "private image folder (for formal image, leave empty)"

  - name: IMAGE_TAG
    type: string
    default: null
    displayName: "image tag (for latest image, leave empty)"

  - name: TESTBEDS_NAME
    type: string
    default: null
    displayName: "testbeds names for verify"

  - name: TESTBED_SPECIFIC
    type: string
    default: null
    displayName: Testbed specific

  # Test timeout
  - name: NIGHTLY_TEST_TIMEOUT
    type: number
    default: 1800

  # Lock testbed polling timeout
  - name: LOCK_POLLING_TIMEOUT
    type: number
    default: 300

  - name: SKIP_TEST_RESULTS_UPLOADING
    type: boolean
    default: True
    displayName: "Skip uploading test results to Kusto"

  - name: LIBRARY
    type: string
    default: null
    displayName: "get testbed names from Library"

  - name: AGENT_POOL
    type: string
    default: nightly
    values:
      - nightly
      - nightly2
      - nightly-svc
      - nightly-bjw


stages:
  - stage: Nightly_HAWK_Verify
    jobs:
      - job: verify
        pool: ${{ parameters.AGENT_POOL }}
        timeoutInMinutes: 3600
        variables:
          - group: KUSTO_SECRETS
          - group: sonicbld
          - group: NIGHTLY_HAWK
          - group: TBSHARE_SECRETS
          - group: SECRETS_JSON
          - name: skipComponentGovernanceDetection
            value: true

        steps:

          # - template: ../.azure-pipelines/nightly/templates/get_secrets.yml

          - task: Bash@3
            displayName: Run Nightly Hawk Verify Script
            inputs:
              targetType: 'inline'
              script: |
                set -x
                source /var/AzDevOps/env-python3/bin/activate

                cd test_analyzer
                pip3 install -r requirements.txt

                echo "VERIFY_TYPE '${{ parameters.VERIFY_TYPE }}'"
                echo "SCRIPT_BRANCH '${{ parameters.SCRIPT_BRANCH }}'"
                echo "IMAGE_FOLDER '${{ parameters.IMAGE_FOLDER }}'"
                echo "TESTBEDS_NAME '${{ parameters.TESTBEDS_NAME }}'"
                echo "TESTBED_SPECIFIC '${{ parameters.TESTBED_SPECIFIC }}'"
                echo "NIGHTLY_TEST_TIMEOUT '${{ parameters.NIGHTLY_TEST_TIMEOUT }}'"
                echo "LOCK_POLLING_TIMEOUT '${{ parameters.LOCK_POLLING_TIMEOUT }}'"
                echo "SKIP_TEST_RESULTS_UPLOADING '${{ parameters.SKIP_TEST_RESULTS_UPLOADING }}'"

                python3 nightly_hawk_branch_verify.py \
                            --verbose='DEBUG' \
                            --testbrief='${{ parameters.TEST_BRIEF }}' \
                            --imagebranch='${{ parameters.IMAGE_BRANCH }}' \
                            --verifytype='${{ parameters.VERIFY_TYPE }}' \
                            --scriptbranch='${{ parameters.SCRIPT_BRANCH }}' \
                            --imagefolder='${{ parameters.IMAGE_FOLDER }}' \
                            --imagetag='${{ parameters.IMAGE_TAG }}' \
                            --testbedNames='${{ parameters.TESTBEDS_NAME }}' \
                            --parameterspecific='${{ parameters.TESTBED_SPECIFIC }}' \
                            --lockpollingtimeout='${{ parameters.LOCK_POLLING_TIMEOUT }}' \
                            --pipelinetimeout='${{ parameters.NIGHTLY_TEST_TIMEOUT }}' \
                            --resultignore='${{ parameters.SKIP_TEST_RESULTS_UPLOADING }}'

            env:
              TBSHARE_AAD_CLIENT_ID: $(TBSHARE_AAD_CLIENT_ID)
              TBSHARE_AAD_CLIENT_SECRET: $(TBSHARE_AAD_CLIENT_SECRET)
              TEST_REPORT_INGEST_KUSTO_CLUSTER_BACKUP: $(TEST_REPORT_INGEST_KUSTO_CLUSTER_BACKUP)
              TEST_REPORT_AAD_TENANT_ID_BACKUP: $(TEST_REPORT_AAD_TENANT_ID_BACKUP)
              TEST_REPORT_AAD_CLIENT_ID_BACKUP: $(TEST_REPORT_AAD_CLIENT_ID_BACKUP)
              TEST_REPORT_AAD_CLIENT_KEY_BACKUP: $(TEST_REPORT_AAD_CLIENT_KEY_BACKUP)
              AZURE_DEVOPS_MSAZURE_TOKEN: $(MSAZURE-TOKEN)
              AZURE_DEVOPS_MSSONIC_TOKEN: $(MSSONIC-TOKEN)
              TESTBED_SPECIFIC: ${{ parameters.TESTBED_SPECIFIC }}
              SKIP_TEST_RESULTS_UPLOADING: ${{ parameters.SKIP_TEST_RESULTS_UPLOADING }}
              AGENT_POOL: ${{ parameters.AGENT_POOL }}

