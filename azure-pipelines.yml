# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pr:
- master
trigger: none

name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

stages:
- stage: Test

  variables:
  - group: Testbed-Tools
  - name: inventory
    value: veos_vtb
  - name: testbed_file
    value: vtestbed.yaml
  - group: GIT_SECRETS
  - name: TEST_VALUE
    value: vvv

  jobs:
  - job: t0_part1
    pool: sonictest
    displayName: "kvmtest-t0-part1"
    timeoutInMinutes: 540

    steps:
    - script: |
        TEST_PLAN_ID=$(python ./.azure-pipelines/create_test_plan.py -a create_test_plan)
        echo "Created test plan $TEST_PLAN_ID, runtime detailed progress in https://www.testbed-tools.org/scheduler/testplan/$TEST_PLAN_ID"
        echo "##vso[task.setvariable variable=TEST_PLAN_ID]$TEST_PLAN_ID"
      env:
        TENANT_ID: $(TESTBED_TOOLS_MSAL_TENANT_ID)
        CLIENT_ID: $(TESTBED_TOOLS_MSAL_CLIENT_ID)
        CLIENT_SECRET: $(TESTBED_TOOLS_MSAL_CLIENT_SECRET)
        TESTBED_TOOLS_URL: $(TESTBED_TOOLS_URL)
        TEST_TYPE: t0
      displayName: Create test plan

    - script: |
        echo "Polling Test plan, runtime detailed progress in https://www.testbed-tools.org/scheduler/testplan/$TEST_PLAN_ID"
        python ./.azure-pipelines/create_test_plan.py -a poll_test_plan -t $TEST_PLAN_ID
      env:
        TESTBED_TOOLS_URL: $(TESTBED_TOOLS_URL)
        TEST_PLAN_ID: $(TEST_PLAN_ID)
      displayName: Poll test plan

    - script: |
        echo "Try to cancel test plan $TEST_PLAN_ID, finished testplan will not be cancelled"
        python ./.azure-pipelines/create_test_plan.py -a cancel_test_plan -t $TEST_PLAN_ID
      condition: always()
      env:
        TENANT_ID: $(TESTBED_TOOLS_MSAL_TENANT_ID)
        CLIENT_ID: $(TESTBED_TOOLS_MSAL_CLIENT_ID)
        CLIENT_SECRET: $(TESTBED_TOOLS_MSAL_CLIENT_SECRET)
        TESTBED_TOOLS_URL: $(TESTBED_TOOLS_URL)
        TEST_PLAN_ID: $(TEST_PLAN_ID)
      displayName: Cancel executing test plan

#    - template: .azure-pipelines/run-test-scheduler-template.yml
#      parameters:
#        dut: vlab-01
#        tbname: vms-kvm-t0
#        ptf_name: ptf_vms6-1
#        tbtype: t0
#        vmtype: ceos
#        section: part-1

#
#  - job: t0_part2
#    pool: sonictest
#    displayName: "kvmtest-t0-part2"
#    timeoutInMinutes: 360
#
#    steps:
#    - template: .azure-pipelines/run-test-scheduler-template.yml
#      parameters:
#        dut: vlab-01
#        tbname: vms-kvm-t0
#        ptf_name: ptf_vms6-1
#        tbtype: t0
#        vmtype: ceos
#        section: part-2
#
#  - job:
#    pool:
#      vmImage: 'ubuntu-20.04'
#    displayName: "kvmtest-t0"
#    dependsOn:
#    - t0_part1
#    - t0_part2
#    condition: always()
#    variables:
#      resultOfPart1: $[ dependencies.t0_part1.result ]
#      resultOfPart2: $[ dependencies.t0_part2.result ]
#
#    steps:
#    - script: |
#        if [ $(resultOfPart1) == "Succeeded" ] && [ $(resultOfPart2) == "Succeeded" ]; then
#          echo "Both job kvmtest-t0-part1 and kvmtest-t0-part2 are passed."
#          exit 0
#        else
#          echo "Either job kvmtest-t0-part1 or job kvmtest-t0-part2 failed! Please check the detailed information."
#          exit 1
#        fi
#
#  - job:
#    pool: sonictest-t1-lag
#    displayName: "kvmtest-t1-lag"
#    timeoutInMinutes: 360
#
#    steps:
#    - template: .azure-pipelines/run-test-scheduler-template.yml
#      parameters:
#        dut: vlab-03
#        tbname: vms-kvm-t1-lag
#        ptf_name: ptf_vms6-2
#        tbtype: t1-lag
#        vmtype: ceos
#
#  - job:
#    pool: sonictest-sonic-t0
#    displayName: "kvmtest-t0-sonic"
#    timeoutInMinutes: 360
#
#    steps:
#    - template: .azure-pipelines/run-test-scheduler-template.yml
#      parameters:
#        dut: vlab-02
#        tbname: vms-kvm-t0-64-32
#        ptf_name: ptf_vms6-1
#        tbtype: t0-sonic
#        vmtype: vsonic
#
#  - job:
#    pool: sonictest-dualtor
#    displayName: "kvmtest-dualtor"
#    timeoutInMinutes: 360
#
#    steps:
#      - template: .azure-pipelines/run-test-scheduler-template.yml
#        parameters:
#          dut: all
#          tbname: vms-kvm-dual-t0
#          ptf_name: ptf-04
#          tbtype: dualtor
#          vmtype: ceos
