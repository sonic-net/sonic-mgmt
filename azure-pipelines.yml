# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# For every job:
# continueOnError: false means it's a required test job and will block merge if it fails
# continueOnError: true means it's an optional test job and will not block merge even though it fails(unless a required test job depends on its result)

pr:
- master
trigger: none

name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

stages:
- stage: Test

  variables:
  - group: Testbed-Tools
  - name: inventory
    value: veos_vtb
  - name: testbed_file
    value: vtestbed.yaml
  - group: GIT_SECRETS

  jobs:
  - job: pre_commit
    displayName: "pre-commit-check"
    timeoutInMinutes: 10
    continueOnError: true
    steps:
    - template: .azure-pipelines/pre-commit-check.yml

  - job: t0_part1
    pool: sonictest
    displayName: "kvmtest-t0-part1"
    timeoutInMinutes: 400
    condition: and(succeeded(), eq(variables.RUN_CLASSICAL_TEST, 'YES'))
    continueOnError: false
    steps:
    - template: .azure-pipelines/run-test-template.yml
      parameters:
        dut: vlab-01
        tbname: vms-kvm-t0
        ptf_name: ptf_vms6-1
        tbtype: t0
        vmtype: ceos
        section: part-1

  - job: t0_part2
    pool: sonictest
    displayName: "kvmtest-t0-part2"
    timeoutInMinutes: 400
    condition: and(succeeded(), eq(variables.RUN_CLASSICAL_TEST, 'YES'))
    continueOnError: false
    steps:
    - template: .azure-pipelines/run-test-template.yml
      parameters:
        dut: vlab-01
        tbname: vms-kvm-t0
        ptf_name: ptf_vms6-1
        tbtype: t0
        vmtype: ceos
        section: part-2

  - job: t0_testbedv2
    displayName: "kvmtest-t0 by TestbedV2"
    timeoutInMinutes: 240
    condition: and(succeeded(), eq(variables.RUN_TESTBEDV2_TEST, 'YES'))
    continueOnError: false
    steps:
    - template: .azure-pipelines/run-test-scheduler-template.yml
      parameters:
        TOPOLOGY: t0
        MIN_WORKER: $(T0_INSTANCE_NUM)
        MAX_WORKER: $(T0_INSTANCE_NUM)

  - job: t0_2vlans_testbedv2
    displayName: "kvmtest-t0-2vlans by TestbedV2"
    timeoutInMinutes: 240
    condition: and(succeeded(), eq(variables.RUN_TESTBEDV2_TEST, 'YES'))
    continueOnError: false
    steps:
    - template: .azure-pipelines/run-test-scheduler-template.yml
      parameters:
        TOPOLOGY: t0
        TEST_SET: t0-2vlans
        MIN_WORKER: $(T0_2VLANS_INSTANCE_NUM)
        MAX_WORKER: $(T0_2VLANS_INSTANCE_NUM)
        DEPLOY_MG_EXTRA_PARAMS: "-e vlan_config=two_vlan_a"

  - job:
    pool:
      vmImage: 'ubuntu-20.04'
    displayName: "kvmtest-t0"
    dependsOn:
    - t0_part1
    - t0_part2
    - t0_testbedv2
    - t0_2vlans_testbedv2
    condition: always()
    continueOnError: false
    variables:
      resultOfPart1: $[ dependencies.t0_part1.result ]
      resultOfPart2: $[ dependencies.t0_part2.result ]
      resultOfT0TestbedV2: $[ dependencies.t0_testbedv2.result ]
      resultOfT02VlansTestbedV2: $[ dependencies.t0_2vlans_testbedv2.result ]

    steps:
    - script: |
        if [ $(resultOfT0TestbedV2) == "Succeeded" ] && [ $(resultOfT02VlansTestbedV2) == "Succeeded" ]; then
          echo "TestbedV2 t0 passed."
          exit 0
        fi

        if [ $(resultOfPart1) == "Succeeded" ] && [ $(resultOfPart2) == "Succeeded" ]; then
          echo "Classic t0 jobs(both part1 and part2) passed."
          exit 0
        fi

        echo "Both classic and TestbedV2 t0 jobs failed! Please check the detailed information. (Any of them passed, t0 will be considered as passed)"
        exit 1

