# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# For every job:
# continueOnError: false means it's a required test job and will block merge if it fails
# continueOnError: true means it's an optional test job and will not block merge even though it fails(unless a required test job depends on its result)

# For PR test job:
# If the current branch is not master, please reference the remote template by appending @sonic-mgmt.
# For example, "- template: .azure-pipelines/run-test-elastictest-template.yml@sonic-mgmt"

pr:
  branches:
    include:
      - master
      - 202???
  paths:
    exclude:
      - .github
      - docs
      - LICENSE
      - README.md
      - SECURITY.md
      - sdn_tests/**
      - '**/*.md'
trigger: none

name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

resources:
  repositories:
    - repository: sonic-mgmt
      type: github
      name: sonic-net/sonic-mgmt
      ref: master
      endpoint: sonic-net

parameters:
  - name: TIMEOUT_IN_MINUTES_PR_TEST
    type: number
    default: 480
  - name: TIMEOUT_IN_MINUTES_TEST_JOB
    type: number
    default: 480

stages:
  - template: /.azure-pipelines/common2/stages/analyze-code.yml
  - stage: Pre_test
    condition: succeededOrFailed()
    jobs:
      - job: static_analysis
        displayName: "Static Analysis"
        timeoutInMinutes: 10
        continueOnError: false
        pool: sonic-ubuntu-1c
        steps:
          - template: .azure-pipelines/pre-commit-check.yml

  #  - job: validate_test_cases
  #    displayName: "Validate Test Cases"
  #    timeoutInMinutes: 30
  #    continueOnError: false
  #    pool: sonic-ubuntu-1c
  #    steps:
  #    - template: .azure-pipelines/pytest-collect-only.yml
  #      parameters:
  #        MGMT_BRANCH: ""
  #
  #  - job: dependency_check
  #    displayName: "Dependency Check"
  #    timeoutInMinutes: 10
  #    pool: sonic-ubuntu-1c
  #    steps:
  #      - template: .azure-pipelines/dependency-check.yml
  #
  #  - job: markers_check
  #    displayName: "Markers Check"
  #    timeoutInMinutes: 10
  #    pool: sonic-ubuntu-1c
  #    steps:
  #      - template: .azure-pipelines/markers-check.yml


  - stage: Test
    dependsOn: Pre_test
    condition: and(succeeded(), in(dependencies.Pre_test.result, 'Succeeded'))
    variables:
      - group: SONiC-Elastictest
      - name: inventory
        value: veos_vtb
      - name: testbed_file
        value: vtestbed.yaml
      - name: BUILD_BRANCH
        ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
          value: $(System.PullRequest.TargetBranch)
        ${{ else }}:
          value: $(Build.SourceBranchName)

    jobs:
      - job: get_impacted_area
        displayName: "Get impacted area"
        timeoutInMinutes: 10
        continueOnError: false
        pool: sonic-ubuntu-1c
        steps:
          - template: .azure-pipelines/impacted_area_testing/get-impacted-area.yml
            parameters:
              BUILD_BRANCH: $(BUILD_BRANCH)

      - job: impacted_area_t1_lag_vpp_elastictest
        displayName: "impacted-area-kvmtest-t1-lag-vpp by Elastictest"
        dependsOn:
          - get_impacted_area
        condition: contains(dependencies.get_impacted_area.outputs['SetVariableTask.PR_CHECKERS'], 't1_checker')
        variables:
          TEST_SCRIPTS: $[ dependencies.get_impacted_area.outputs['SetVariableTask.TEST_SCRIPTS'] ]
        timeoutInMinutes: ${{ parameters.TIMEOUT_IN_MINUTES_TEST_JOB }}
        continueOnError: false
        pool: sonic-ubuntu-1c
        steps:
          - template: .azure-pipelines/impacted_area_testing/calculate-instance-numbers.yml
            parameters:
              TOPOLOGY: t1
              BUILD_BRANCH: $(BUILD_BRANCH)

          - template: .azure-pipelines/run-test-elastictest-template.yml@sonic-mgmt
            parameters:
              TOPOLOGY: t1-lag-vpp
              SCRIPTS: $(SCRIPTS)
              MIN_WORKER: $(T1_LAG_VPP_INSTANCE_NUM)
              MAX_WORKER: $(T1_LAG_VPP_INSTANCE_NUM)
              KVM_IMAGE_BRANCH: $(BUILD_BRANCH)
              MGMT_BRANCH: $(BUILD_BRANCH)
              ASIC_TYPE: "vpp"
              KVM_IMAGE_BUILD_PIPELINE_ID: "2818"
              COMMON_EXTRA_PARAMS: "--disable_sai_validation "
              STOP_ON_FAILURE: "False"
