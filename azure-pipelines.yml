# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# For every job:
# continueOnError: false means it's a required test job and will block merge if it fails
# continueOnError: true means it's an optional test job and will not block merge even though it fails(unless a required test job depends on its result)

pr:
   branches:
     include:
       - master
   paths:
     exclude:
       - .github
       - docs
       - LICENSE
       - README.md
       - SECURITY.md
trigger: none

name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

stages:
- stage: Pre_test
  jobs:
  - job: static_analysis
    displayName: "Static Analysis"
    timeoutInMinutes: 10
    continueOnError: false
    pool: sonic-ubuntu-1c
    steps:
    - template: .azure-pipelines/pre-commit-check.yml

  - job: validate_test_cases
    displayName: "Validate Test Cases"
    timeoutInMinutes: 30
    continueOnError: false
    pool: sonic-ubuntu-1c
    steps:
    - template: .azure-pipelines/pytest-collect-only.yml
      parameters:
        MGMT_BRANCH: ""

  - job: dependency_check
    displayName: "Dependency Check"
    timeoutInMinutes: 10
    pool: sonic-ubuntu-1c
    steps:
      - template: .azure-pipelines/dependency-check.yml

  - job: markers_check
    displayName: "Markers Check"
    timeoutInMinutes: 10
    pool: sonic-ubuntu-1c
    steps:
      - template: .azure-pipelines/markers-check.yml


- stage: Test
  dependsOn: Pre_test
  condition: and(succeeded(), in(dependencies.Pre_test.result, 'Succeeded'))
  variables:
  - group: SONiC-Elastictest
  - name: inventory
    value: veos_vtb
  - name: testbed_file
    value: vtestbed.yaml
  - name: BUILD_BRANCH
    ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
      value: $(System.PullRequest.TargetBranch)
    ${{ else }}:
      value: $(Build.SourceBranchName)

  jobs:
# Below are Impacted Area Based PR checkers
  - job: get_impacted_area
    displayName: "Get impacted area"
    timeoutInMinutes: 240
    continueOnError: false
    pool: sonic-ubuntu-1c
    steps:
      - template: .azure-pipelines/impacted_area_testing/get-impacted-area.yml

  - job: choose_between_mixed_and_py3_ptf_image
    displayName: "Choose between latest (mixed type) and py3 ptf image"
    timeoutInMinutes: 10
    continueOnError: false
    pool: sonic-ubuntu-1c
    steps:
      - script: |
          python - <<EOF
          import random
          tag = 'latest'
          if random.random() < 0.3:
            tag = 'py3only'
          print(f"##vso[task.setvariable variable=tag_value;isOutput=true]{tag}")
          EOF
        name: ptf_image_tag
        displayName: "Selecting PTF_IMAGE_TAG"
      - script: |
            echo "Chosen PTF_IMAGE_TAG: $(ptf_image_tag.tag_value)"
        displayName: "PTF_IMAGE_TAG value"

  - job: impacted_area_t0_elastictest
    displayName: "dx010.t0.202012.NightlyTest_by_Elastictest"
    dependsOn:
    - get_impacted_area
    - choose_between_mixed_and_py3_ptf_image
    condition: contains(dependencies.get_impacted_area.outputs['SetVariableTask.PR_CHECKERS'], 't0_checker')
    variables:
      TEST_SCRIPTS: $[ dependencies.get_impacted_area.outputs['SetVariableTask.TEST_SCRIPTS'] ]
      set_ptf_image_tag: $[ dependencies.choose_between_mixed_and_py3_ptf_image.outputs['ptf_image_tag.tag_value'] ]
    timeoutInMinutes: 240
    continueOnError: false
    pool: sonic-ubuntu-1c
    steps:
      - template: .azure-pipelines/impacted_area_testing/calculate-instance-numbers.yml
        parameters:
          TOPOLOGY: t0
          BUILD_BRANCH: $(BUILD_BRANCH)

      - template: .azure-pipelines/run-test-elastictest-template.yml
        parameters:
          TOPOLOGY: t0
          PTF_IMAGE_TAG: $(set_ptf_image_tag)
          SCRIPTS: $(SCRIPTS)
          MIN_WORKER: $(INSTANCE_NUMBER)
          MAX_WORKER: $(INSTANCE_NUMBER)
          KVM_IMAGE_BRANCH: $(BUILD_BRANCH)
          MGMT_BRANCH: $(BUILD_BRANCH)
          BUILD_REASON: "Schedule"
