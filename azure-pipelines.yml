# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pr:
- master
trigger: none

name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

stages:
- stage: Test

  variables:
  - group: Testbed-Tools
  - name: inventory
    value: veos_vtb
  - name: testbed_file
    value: vtestbed.yaml
  - group: GIT_SECRETS

  jobs:
  - job: t0_part1
    pool: sonictest
    displayName: "kvmtest-t0-part1"
    timeoutInMinutes: 400
    steps:
    - script: |
        exit 1

  - job: t0_part2
    pool: sonictest
    displayName: "kvmtest-t0-part2"
    timeoutInMinutes: 400
    steps:
    - script: |
        exit 1

  - job: t0_testbedv2
    displayName: "kvmtest-t0 by TestbedV2"
    timeoutInMinutes: 540
    steps:
    - script: |
        exit 0

  - job: t0_2vlans_testbedv2
    displayName: "kvmtest-t0-2vlans by TestbedV2"
    timeoutInMinutes: 540
    steps:
    - script: |
        exit 0

  - job:
    pool:
      vmImage: 'ubuntu-20.04'
    displayName: "kvmtest-t0"
    dependsOn:
    - t0_part1
    - t0_part2
    - t0_testbedv2
    - t0_2vlans_testbedv2
    condition: always()
    variables:
      resultOfPart1: $[ dependencies.t0_part1.result ]
      resultOfPart2: $[ dependencies.t0_part2.result ]
      resultOfT0TestbedV2: $[ dependencies.t0_testbedv2.result ]
      resultOfT02VlansTestbedV2: $[ dependencies.t0_2vlans_testbedv2.result ]

    steps:
    - script: |
        set -x
        if [ $(resultOfT0TestbedV2) == "Succeeded" ] && [ $(resultOfT02VlansTestbedV2) == "Succeeded" ]; then
          echo "TestbedV2 t0 passed."
          exit 0
        fi

        if [ $(resultOfPart1) == "Succeeded" ] && [ $(resultOfPart2) == "Succeeded" ]; then
          echo "Classic t0 jobs(both part1 and part2) passed."
          exit 0
        fi

        echo "Both classic and TestbedV2 t0 jobs failed! Please check the detailed information. (Any of them passed, t0 will be considered as passed)"
        exit 1


  - job: t1_lag_classic
    displayName: "kvmtest-t1-lag classic"
    timeoutInMinutes: 400
    steps:
    - script: |
        exit 1

  - job: t1_lag_testbedv2
    displayName: "kvmtest-t1-lag by TestbedV2"
    timeoutInMinutes: 540
    steps:
    - script: |
        exit 0

  - job:
    displayName: "kvmtest-t1-lag"
    dependsOn:
    - t1_lag_classic
    - t1_lag_testbedv2
    condition: always()
    variables:
      resultOfClassic: $[ dependencies.t1_lag_classic.result ]
      resultOfTestbedV2: $[ dependencies.t1_lag_testbedv2.result ]

    steps:
    - script: |
        set -x
        if [ $(resultOfClassic) == "Succeeded" ] || [ $(resultOfTestbedV2) == "Succeeded" ]; then
          echo "One or both of t1_lag_classic and t1_lag_testbedv2 passed."
          exit 0
        else
          echo "Both t1_lag_classic and t1_lag_testbedv2 failed! Please check the detailed information."
          exit 1
        fi

  - job:
    pool: sonictest-dualtor
    displayName: "kvmtest-dualtor"
    timeoutInMinutes: 400
    steps:
    - script: |
        exit 0