from urllib import request, error
import json
from sonic_py_common import logger

DUTS_MAP = {
    "{{ dual_tor_facts['positions']['upper'] }}": 0,
    "{{ dual_tor_facts['positions']['lower'] }}": 1
}

VM_SET = "{{ testbed_facts['group-name'] }}"

DUT_NAME = "{{ dut_name }}"

BASE_URL = "http://{{ mux_simulator_server }}:{{ mux_simulator_port }}/"

SYSLOG_IDENTIFIER = "y_cable_sim"
helper_logger = logger.Logger(SYSLOG_IDENTIFIER)

TOR_A = "tor_a"
TOR_B = "tor_b"

def _url(physical_port):
    """
    Helper function to build an url for given physical_port

    Args:
        physical_port: physical port on switch, an integer starting from 1
    Returns:
        str: The url for post/get.
    """
    return BASE_URL + "/mux/{}/{}".format(VM_SET, physical_port - 1)

def _post(physical_port, data):
    """
    Helper function for posting data to y_cable server.

    Args:
        physical_port: physical port on switch, an integer starting from 1
        data: data to post
    Returns:
        True if succeed. False otherwise
    """
    data = json.dumps(data).encode(encoding='utf-8')
    header = {'Accept': 'application/json', 'Content-Type': 'application/json'}
    req = request.Request(url=_url(physical_port), data=data, headers=header)
    try:
        _ = request.urlopen(req)
    except error.HTTPError as e:
        try:
            err_msg = json.loads(e.read().decode())['err_msg']
            helper_logger.log_warning("post request returns err. status_code = {} err_msg = {}".format(e.code, err_msg))
        except Exception:
            helper_logger.log_warning("post request returns err. status_code = {}".format(e.code))
        return False
    except error.URLError as e:
        helper_logger.log_warning("post request returns err. err_msg = {}".format(str(e)))
        return False
    return True

def _get(physical_port):
    """
    Helper function for polling status from y_cable server.

    Args:
        physical_port: physical port on switch, an integer starting from 1
    Returns:
        dict: A dict decoded from server's response.
        None: Returns None is error is detected.
    """
    req = request.Request(url=_url(physical_port))
    try:
        res = request.urlopen(req)
        data = res.read()
        return json.loads(data)
    except error.HTTPError as e:
        err_msg = json.loads(e.read().decode())['err_msg']
        helper_logger.log_warning("get request returns err. status_code = {} err_msg = {}".format(e.code, err_msg))
    except error.URLError as e:
        helper_logger.log_warning("get request returns err. err_msg = {}".format(str(e)))
    except json.decoder.JSONDecodeError as e:
        helper_logger.log_warning("failed to parse response as json. err_msg = {}".format(str(e)))
    except Exception as e:
        helper_logger.log_warning("get request returns err. err_msg = {}".format(str(e)))
    return None

def _toggle_to(physical_port, target):
    """
    Helper function for toggling to certain TOR.

    Args:
        physical_port: physical port on switch, an integer starting from 1
        target: TOR_A / TOR_B
    Returns:
        True if succeed. False otherwise
    """
    data = {"active_side": target}
    helper_logger.log_info("physical_port {} toggle to {}".format(physical_port, target))
    return _post(physical_port, data)

def _get_side(physical_port):
    """
    Retrieve the current active tor from y_cable simulator server.
    Args:
        physical_port: physical port on switch, an integer starting from 1
    Returns:
        1 if TOR_A is active
        2 if TOR_B is active
        -1 for exception or inconstient status
    """
    res = _get(physical_port)
    if not res:
        return -1
    active_side = res["active_side"]
    if active_side == TOR_A:
        return 1
    elif active_side == TOR_B:
        return 2
    else:
        return -1

def toggle_mux_to_torA(physical_port):
    return _toggle_to(physical_port, TOR_A)

def toggle_mux_to_torB(physical_port):
    return _toggle_to(physical_port, TOR_B)

def check_read_side(physical_port):
    return DUTS_MAP[DUT_NAME] + 1

def check_mux_direction(physical_port):
    return _get_side(physical_port)

def check_active_linked_tor_side(physical_port):
    return _get_side(physical_port)

def check_if_link_is_active_for_NIC(physical_port):
    """
    Checks if NIC side of the Y cable's link is active.
    Always return True for now because all links in simulator are active.
    """
    return True

def check_if_link_is_active_for_torA(physical_port):
    """
    Checks if TOR_A side of the Y cable's link is active.
    Always return True for now because all links in simulator are active.
    """
    return True

def check_if_link_is_active_for_torB(physical_port):
    """
    Checks if TOR_B side of the Y cable's link is active.
    Always return True for now because all links in simulator are active.
    """
    return True

