# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import nic_simulator_grpc_service_pb2 as nic__simulator__grpc__service__pb2


class DualToRActiveStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.QueryAdminForwardingPortState = channel.unary_unary(
            '/DualToRActive/QueryAdminForwardingPortState',
            request_serializer=nic__simulator__grpc__service__pb2.AdminRequest.SerializeToString,
            response_deserializer=nic__simulator__grpc__service__pb2.AdminReply.FromString,
        )
        self.SetAdminForwardingPortState = channel.unary_unary(
            '/DualToRActive/SetAdminForwardingPortState',
            request_serializer=nic__simulator__grpc__service__pb2.AdminRequest.SerializeToString,
            response_deserializer=nic__simulator__grpc__service__pb2.AdminReply.FromString,
        )
        self.QueryOperationPortState = channel.unary_unary(
            '/DualToRActive/QueryOperationPortState',
            request_serializer=nic__simulator__grpc__service__pb2.OperationRequest.SerializeToString,
            response_deserializer=nic__simulator__grpc__service__pb2.OperationReply.FromString,
        )
        self.QueryLinkState = channel.unary_unary(
            '/DualToRActive/QueryLinkState',
            request_serializer=nic__simulator__grpc__service__pb2.LinkStateRequest.SerializeToString,
            response_deserializer=nic__simulator__grpc__service__pb2.LinkStateReply.FromString,
        )
        self.QueryServerVersion = channel.unary_unary(
            '/DualToRActive/QueryServerVersion',
            request_serializer=nic__simulator__grpc__service__pb2.ServerVersionRequest.SerializeToString,
            response_deserializer=nic__simulator__grpc__service__pb2.ServerVersionReply.FromString,
        )
        self.SetDrop = channel.unary_unary(
            '/DualToRActive/SetDrop',
            request_serializer=nic__simulator__grpc__service__pb2.DropRequest.SerializeToString,
            response_deserializer=nic__simulator__grpc__service__pb2.DropReply.FromString,
        )


class DualToRActiveServicer(object):
    """Missing associated documentation comment in .proto file."""

    def QueryAdminForwardingPortState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAdminForwardingPortState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryOperationPortState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryLinkState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryServerVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDrop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DualToRActiveServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'QueryAdminForwardingPortState': grpc.unary_unary_rpc_method_handler(
            servicer.QueryAdminForwardingPortState,
            request_deserializer=nic__simulator__grpc__service__pb2.AdminRequest.FromString,
            response_serializer=nic__simulator__grpc__service__pb2.AdminReply.SerializeToString,
        ),
        'SetAdminForwardingPortState': grpc.unary_unary_rpc_method_handler(
            servicer.SetAdminForwardingPortState,
            request_deserializer=nic__simulator__grpc__service__pb2.AdminRequest.FromString,
            response_serializer=nic__simulator__grpc__service__pb2.AdminReply.SerializeToString,
        ),
        'QueryOperationPortState': grpc.unary_unary_rpc_method_handler(
            servicer.QueryOperationPortState,
            request_deserializer=nic__simulator__grpc__service__pb2.OperationRequest.FromString,
            response_serializer=nic__simulator__grpc__service__pb2.OperationReply.SerializeToString,
        ),
        'QueryLinkState': grpc.unary_unary_rpc_method_handler(
            servicer.QueryLinkState,
            request_deserializer=nic__simulator__grpc__service__pb2.LinkStateRequest.FromString,
            response_serializer=nic__simulator__grpc__service__pb2.LinkStateReply.SerializeToString,
        ),
        'QueryServerVersion': grpc.unary_unary_rpc_method_handler(
            servicer.QueryServerVersion,
            request_deserializer=nic__simulator__grpc__service__pb2.ServerVersionRequest.FromString,
            response_serializer=nic__simulator__grpc__service__pb2.ServerVersionReply.SerializeToString,
        ),
        'SetDrop': grpc.unary_unary_rpc_method_handler(
            servicer.SetDrop,
            request_deserializer=nic__simulator__grpc__service__pb2.DropRequest.FromString,
            response_serializer=nic__simulator__grpc__service__pb2.DropReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'DualToRActive', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class DualToRActive(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def QueryAdminForwardingPortState(request,
                                      target,
                                      options=(),
                                      channel_credentials=None,
                                      call_credentials=None,
                                      insecure=False,
                                      compression=None,
                                      wait_for_ready=None,
                                      timeout=None,
                                      metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DualToRActive/QueryAdminForwardingPortState',
                                             nic__simulator__grpc__service__pb2.AdminRequest.SerializeToString,
                                             nic__simulator__grpc__service__pb2.AdminReply.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def SetAdminForwardingPortState(request,
                                    target,
                                    options=(),
                                    channel_credentials=None,
                                    call_credentials=None,
                                    insecure=False,
                                    compression=None,
                                    wait_for_ready=None,
                                    timeout=None,
                                    metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DualToRActive/SetAdminForwardingPortState',
                                             nic__simulator__grpc__service__pb2.AdminRequest.SerializeToString,
                                             nic__simulator__grpc__service__pb2.AdminReply.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryOperationPortState(request,
                                target,
                                options=(),
                                channel_credentials=None,
                                call_credentials=None,
                                insecure=False,
                                compression=None,
                                wait_for_ready=None,
                                timeout=None,
                                metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DualToRActive/QueryOperationPortState',
                                             nic__simulator__grpc__service__pb2.OperationRequest.SerializeToString,
                                             nic__simulator__grpc__service__pb2.OperationReply.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryLinkState(request,
                       target,
                       options=(),
                       channel_credentials=None,
                       call_credentials=None,
                       insecure=False,
                       compression=None,
                       wait_for_ready=None,
                       timeout=None,
                       metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DualToRActive/QueryLinkState',
                                             nic__simulator__grpc__service__pb2.LinkStateRequest.SerializeToString,
                                             nic__simulator__grpc__service__pb2.LinkStateReply.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryServerVersion(request,
                           target,
                           options=(),
                           channel_credentials=None,
                           call_credentials=None,
                           insecure=False,
                           compression=None,
                           wait_for_ready=None,
                           timeout=None,
                           metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DualToRActive/QueryServerVersion',
                                             nic__simulator__grpc__service__pb2.ServerVersionRequest.SerializeToString,
                                             nic__simulator__grpc__service__pb2.ServerVersionReply.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)

    @staticmethod
    def SetDrop(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DualToRActive/SetDrop',
                                             nic__simulator__grpc__service__pb2.DropRequest.SerializeToString,
                                             nic__simulator__grpc__service__pb2.DropReply.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression,
                                             wait_for_ready, timeout, metadata)
