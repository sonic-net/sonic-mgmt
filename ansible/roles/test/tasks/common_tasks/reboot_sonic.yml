- name: set possible reboot types
  set_fact:
    reboot_types: ["reboot", "fast-reboot", "warm-reboot" ]

- name: set default value for reboot type
  set_fact:
    reboot_type: "reboot"
  when: reboot_type is not defined

- name: set default value for sonic ready timeout
  set_fact:
    ready_timeout: 180
  when: ready_timeout is not defined

- fail:
    msg: "Reboot type {{ reboot_type }} is invalid. Must be one of {{ reboot_types }}"
  when: reboot_type not in reboot_types

- name: "rebooting {{ inventory_hostname }} : {{ ansible_host }} with {{ reboot_type }}..."
  command: "{{ reboot_type }}"
  async: 300
  poll: 0
  become: yes
  register: reboot_task
  ignore_errors: true

- block:
  - name: "Wait for switch to shutdown"
    become: false
    local_action: wait_for
    args:
      host: "{{ ansible_host }}"
      port: 22
      state: absent
      search_regex: "OpenSSH_[\\w\\.]+ Debian"
      delay: 10
      timeout: 180
    changed_when: false

  rescue:

  - name: 'Poll reboot task status'
    become: yes
    async_status:
      jid: "{{ reboot_task.ansible_job_id }}"
    register: reboot_result
    ignore_errors: true

  - name: 'Fail if {{ reboot_type }} failed'
    fail:
       msg: "{{ reboot_result.stderr }}"

- name: Wait for switch to come back
  become: false
  local_action: wait_for
  args:
    host: "{{ ansible_host }}"
    port: 22
    state: started
    search_regex: "OpenSSH_[\\w\\.]+ Debian"
    delay: 10
    timeout: 180
  changed_when: false

- name: wait for {{ ready_timeout }} seconds for prcesses and interfaces to be stable
  pause: seconds={{ ready_timeout }}

- name: Wait for warmboot-finalizer service to finish
  become: true
  ignore_errors: true
  shell: systemctl is-active warmboot-finalizer.service
  register: status
  until: status.stdout.find('inactive') != -1
  delay: 10
  retries: 30
  when: reboot_type == 'warm-reboot'
