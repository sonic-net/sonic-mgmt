# Pull CPU and memory, send a script to create syslogs to the DUT, wait 5 seconds, and make sure device is still within norms

- name: set default value for number of syslog messages
  set_fact:
      qty_flood_messages: 10000
  when: qty_flood_messages is not defined

- name: pull CPU utilization via shell
  # Explanation: Run top command with 2 iterations, 5sec delay. Discard the first iteration, then grep the CPU line from the second,
  # subtract 100% - idle, and round down to integer.
  shell: top -bn2 -d5 | awk '/^top -/ { p=!p } { if (!p) print }' | awk '/Cpu/ { cpu = 100 - $8 };END   { print cpu }' | awk '{printf "%.0f",$1}'
  register: shell_cpu_usage_before
  become: yes

- name: get used memory info
  shell: "show system-memory | grep Mem: | while read name total used everything_else; do echo $used; done"
  register: used_memory_before

- name: pre test memory values
  debug:
    var: used_memory_before.stdout

- name: pre test cpu values
  debug:
    var: shell_cpu_usage_before.stdout

- name: Send a script to the remote device
  script: roles/test/tasks/log_flood/log_flood.sh {{ qty_flood_messages }}

- name: wait 10 seconds for the cpu to calm down
  pause:
    seconds: 10

- name: pull CPU utilization via shell
  # Explanation: Run top command with 2 iterations, 5sec delay. Discard the first iteration, then grep the CPU line from the second,
  # subtract 100% - idle, and round down to integer.
  shell: top -bn2 -d5 | awk '/^top -/ { p=!p } { if (!p) print }' | awk '/Cpu/ { cpu = 100 - $8 };END   { print cpu }' | awk '{printf "%.0f",$1}'
  register: shell_cpu_usage_after
  become: yes

- name: get used memory info before
  shell: "show system-memory | grep Mem: | while read name total used everything_else; do echo $used; done"
  register: used_memory_after

- name: post test memory values
  debug:
    var: used_memory_after.stdout

- name: post test cpu values
  debug:
    var: shell_cpu_usage_after.stdout

# Arbitrarially picked that if the CPU is 10% 5 seconds after the log flood is done, should fail
- name: verify cpu usage is not significantly higher than it was before it started
  assert:
    that: ({{shell_cpu_usage_after.stdout}} - {{shell_cpu_usage_before.stdout}}) < 10

# Make sure the memory usage doesn't go up too much
- name: verify memory usage is not significantly higher than it was before it started
  assert:
    that: ({{used_memory_after.stdout}} - {{used_memory_before.stdout}}) < 10

