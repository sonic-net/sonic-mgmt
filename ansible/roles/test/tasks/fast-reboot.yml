# example:
# ansible-playbook sonic-test.yml -i str --limit device_1 --become --vault-password-file ~/password  --tags fast_reboot -e "ptf_host=10.0.0.21" -e "vm_hosts=['10.0.0.200','10.0.0.201','10.0.0.202','10.0.0.203']"

- block:
    - name: figure out fast reboot vm hosts
      testbed_vm_info: base_vm={{ vm }} topo={{ testbed_type }}
      connection: local

    - set_fact:
        vm_hosts: "{{ neighbor_eosvm_mgmt.values() }}"
  when: testbed_type is defined and vm is defined

- block:
    - fail: msg="Please set ptf_host variable"
      when: ptf_host is not defined

    - fail: msg="Please set vm_hosts variable with a list of VMs"
      when: vm_hosts is not defined

    - name: Remove existing ip from ptf host
      script: roles/test/files/helpers/remove_ip.sh
      delegate_to: "{{ ptf_host }}"

    - name: Make all mac addresses in ptf unique - should be done in vm_set
      script: roles/test/files/helpers/change_mac.sh
      delegate_to: "{{ ptf_host }}"

    - name: Copy tests to the PTF container
      copy: src=roles/test/files/ptftests dest=/root
      delegate_to: "{{ ptf_host }}"

    - name: Copy arp responder to the PTF container
      copy: src=roles/test/files/helpers/arp_responder.py dest=/opt
      delegate_to: "{{ ptf_host }}"

    - name: Copy arp responder supervisor configuration to the PTF container
      template: src=arp_responder.conf.j2 dest=/etc/supervisor/conf.d/arp_responder.conf
      vars:
        - arp_responder_args: '-e'
      delegate_to: "{{ ptf_host }}"

    - name: Reread supervisor configuration
      shell: supervisorctl reread
      delegate_to: "{{ ptf_host }}"

    - name: Update supervisor configuration
      shell: supervisorctl update
      delegate_to: "{{ ptf_host }}"

    - name: Remove old keys
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /root/.ssh/id_rsa
        - /root/.ssh/id_rsa.pub
      delegate_to: "{{ ptf_host }}"

    - name: Check that file /root/.ssh/known_hosts exists
      stat: path=/etc/shorewall/rules
      delegate_to: "{{ ptf_host }}"
      register: known_hosts

    - name: Remove old entry about DUT
      shell: ssh-keygen -f /root/.ssh/known_hosts -R {{ ansible_host }}
      delegate_to: "{{ ptf_host }}"
      when: known_hosts.stat.exists

    - name: Generate public key for ptf host
      shell: ssh-keygen -b 2048 -t rsa -f /root/.ssh/id_rsa -q -N ""
      args:
        creates: /root/.ssh/id_rsa
      delegate_to: "{{ ptf_host }}"

    - name: read authorized key from ptf host
      fetch:
        src: '/root/.ssh/id_rsa.pub'
        dest: /tmp/
        flat: yes
      delegate_to: "{{ ptf_host }}"

    - name: set authorized key took from file
      authorized_key:
        user: "{{ ansible_ssh_user }}"
        state: present
        key: "{{ lookup('file', '/tmp/id_rsa.pub') }}"

    - name: Copy portchannels to ptf host
      copy:
        content: "{{ minigraph_portchannels | to_nice_json }}"
        dest: /tmp/portchannel_interfaces.json
      delegate_to: "{{ ptf_host }}"

    - name: Copy vlan_interfaces to ptf host
      copy:
        content: "{{ minigraph_vlans | to_nice_json }}"
        dest: /tmp/vlan_interfaces.json
      delegate_to: "{{ ptf_host }}"

    - name: Copy minigraph_ports to ptf host
      copy:
        content: "{{ minigraph_port_indices | to_nice_json }}"
        dest: /tmp/ports.json
      delegate_to: "{{ ptf_host }}"

    - include: ptf_runner.yml
      vars:
        ptf_test_name: Fast-reboot test
        ptf_test_dir: ptftests
        ptf_test_path: fast-reboot.FastReloadTest
        ptf_platform: remote
        ptf_platform_dir: ptftests
        ptf_qlen: 1000
        ptf_test_params:
        - verbose=False
        - dut_username=\"{{ ansible_ssh_user }}\"
        - dut_hostname=\"{{ ansible_host }}\"
        - fast_reboot_limit=30
        - portchannel_ports_file=\"/tmp/portchannel_interfaces.json\"
        - vlan_ports_file=\"/tmp/vlan_interfaces.json\"
        - ports_file=\"/tmp/ports.json\"
        - dut_mac='{{ ansible_Ethernet0['macaddress'] }}'
        - default_ip_range='192.168.0.0/16'
        - vlan_ip_range=\"{{ minigraph_vlan_interfaces[0]['subnet'] }}\"
        - lo_v6_prefix=\"{{ minigraph_lo_interfaces | map(attribute='addr') | ipv6 | first | ipsubnet(64) }}\"
        - arista_vms=\"['{{ vm_hosts | list | join("','") }}']\"

  always:
    - name: Copy test results from ptf to the local box /tmp/fast-reboot.log
      fetch: src='/tmp/fast-reboot.log' dest='/tmp/' flat=true fail_on_missing=false
      delegate_to: "{{ ptf_host }}"

    - name: Remove existing ip from ptf host
      script: roles/test/files/helpers/remove_ip.sh
      delegate_to: "{{ ptf_host }}"

    - name: Extract all syslog entries since the last reboot
      extract_log:
        directory: '/var/log'
        file_prefix: 'syslog'
        start_string: 'Initializing cgroup subsys cpuset'
        target_filename: '/tmp/syslog'
      become: yes

    - name: Copy the exctracted syslog entries to the local machine
      fetch:
        src: '/tmp/syslog'
        dest: '/tmp/'
        flat: yes

    - name: Extract all sairedis.rec entries since the last reboot
      extract_log:
        directory: '/var/log/swss'
        file_prefix: 'sairedis.rec'
        start_string: 'recording on:'
        target_filename: '/tmp/sairedis.rec'

    - name: Copy the exctracted sairedis.rec entries to the local machine
      fetch:
        src: '/tmp/sairedis.rec'
        dest: '/tmp/'
        flat: yes

    - name: Extract all swss.rec entries since the last reboot
      extract_log:
        directory: '/var/log/swss'
        file_prefix: 'swss.rec'
        start_string: 'recording started'
        target_filename: '/tmp/swss.rec'

    - name: Copy the exctracted swss.rec entries to the local machine
      fetch:
        src: '/tmp/swss.rec'
        dest: '/tmp/'
        flat: yes
