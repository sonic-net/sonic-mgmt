- block:
  - setup:

  - name: Get orchagent process information, make sure Orchagent is running before test 
    shell: pgrep orchagent
    register: pgrep_out

  - debug: var=pgrep_out.stdout_lines
  
  - name: Verify that orchagent process is running
    assert: { that: "{{ pgrep_out.stdout_lines | length }} > 0"}

  - name: Gathering minigraph facts about the device
    minigraph_facts: host={{ inventory_hostname }}
    connection: local
    become: no
    tags: always

  - set_fact:
      testname: "mgtest"
      out_dir: "/tmp"
      run_dir: "/tmp"
      v4_mac1: "08:bc:27:af:cc:45"
      v4_mac2: "08:bc:27:af:cc:47"
      v6_mac1: "08:bc:27:af:cc:65"
      v6_mac2: "08:bc:27:af:cc:67"

  - name: init loganalyzer for later syslog analysis
    include: roles/test/files/tools/loganalyzer/loganalyzer_init.yml

  - name: gather DUT arp table
    switch_arptable: 

  # - debug: var=arptable

  - fail: msg="cannot find a IPv4 and IPv6 neighbor to change mac address"
    when: ( arptable.v4 | length == 0 ) or ( arptable.v6 | length == 0 )

  - name: pick IPv4 neighbor to test change mac behavior      
    set_fact:
      v4_nei: "{{ item.key }}"
      v4_intf: "{{ item.value['interface'] }}"
    with_dict: "{{ arptable.v4 }}"
    when: ('Ethernet' in item.value['interface']) or ('PortChannel' in item.value['interface'])

  - name: pick IPv6 neighbor to test change mac address"
    set_fact:
      v6_nei: "{{ item.key }}"
      v6_intf: "{{ item.value['interface'] }}"
    with_dict: "{{ arptable.v6 }}"
    when: 
       - "'fe80::' not in  item.key | lower" 
       - ('Ethernet' in item.value['interface']) or ('PortChannel' in item.value['interface'])

  - fail: msg="device is not configured with ipv4 or ipv6"??
    when: (v6_nei is not defined) or (v4_nei is not defined)

  - name: change v4 neighbor mac address 1st time
    command: "ip neigh change {{ v4_nei }} lladdr {{ v4_mac1 }} dev {{ v4_intf }}"
    become: yes

  - name: change v4 neighbor mac address 2nd time
    command: "ip neigh change {{ v4_nei }} lladdr {{ v4_mac2 }} dev {{ v4_intf }}"
    become: yes

  - name: pause a second and check
    pause: seconds=2 

  - name: gather orchagent pid, make sure orchagent is still running after v4 neighbor change mac
    command: "pgrep orchagent"
    register: orchid

  - assert: { that: orchid.stdout != '' }

  - name: check kernel arp table again 
    switch_arptable:

  - name: make sure neighbor mac address was changed on SONiC
    assert: { that: "arptable.v4[v4_nei]['macaddress'] | lower ==  v4_mac2" }

  - name: Get the SONiC DB key holding neighbour MAC for {{ v4_nei }}
    become: true
    shell: docker exec database redis-cli -n 1 KEYS ASIC_STATE:SAI_OBJECT_TYPE_NEIGHBOR_ENTRY* | grep {{ v4_nei }}
    register: neighbour_key
    failed_when: neighbour_key.rc != 0

  - name: Check if mac changed in DUT ASIC. Should be {{ v4_mac2 }}
    become: true
    shell: docker exec database redis-cli -n 1 HGETALL '{{ neighbour_key.stdout }}' | grep "_ATTR_DST_MAC_ADDRESS" -A 1 | tail -1
    register: neighbour_mac
        
  - assert: { that: "neighbour_mac.stdout | lower == v4_mac2" }

  - name: change v6 neighbor mac address 1st time
    command: "ip -6 neigh change {{ v6_nei }} lladdr {{ v6_mac1 }} dev {{ v6_intf }}"
    become: yes

  - name: change v6 neighbor mac address 2nd time
    command: "ip -6 neigh change {{ v6_nei }} lladdr {{ v6_mac2 }} dev {{ v6_intf }}"
    become: yes

  - name: pause and check orchagent
    pause: seconds=2 

  - name: gather orchagent pid, make sure orchagent is still running after v6 neighbor change 
    command: "pgrep orchagent"
    register: orchid

  - assert: { that: "orchid.stdout != ''" }
    
  - name: check kernel arp table again 
    switch_arptable:

  - name: make sure neighbor mac address was changed on SONiC
    assert: { that: "arptable.v6[v6_nei]['macaddress'] | lower == v6_mac2" }

  - name: Get the SONiC DB key holding neighbour MAC for {{ v6_nei }}
    become: true
    shell: docker exec database redis-cli -n 1 KEYS ASIC_STATE:SAI_OBJECT_TYPE_NEIGHBOR_ENTRY* | grep {{ v6_nei }}
    register: neighbour_key
    failed_when: neighbour_key.rc != 0

  - name: Check if mac changed in DUT ASIC. Should be {{ v6_mac2 }}
    become: true
    shell: docker exec database redis-cli -n 1 HGETALL '{{ neighbour_key.stdout }}' | grep "_ATTR_DST_MAC_ADDRESS" -A 1 | tail -1
    register: neighbour_mac
        
  - assert: { that: "neighbour_mac.stdout | lower == v6_mac2" }

  - name: analyze the syslog to make sure no syncd errors         
    include: roles/test/files/tools/loganalyzer/loganalyzer_analyze.yml 

  - name: close out the loganalyzer      
    include: roles/test/files/tools/loganalyzer/loganalyzer_end.yml

  always:

  - name: removed just added v6 neighbor mac address 1st time
    command: "ip -6 neigh delete {{ v6_nei }} lladdr {{ v6_mac1 }} dev {{ v6_intf }}"
    become: yes
    ignore_errors: true

  - name: remove just added v6 neighbor mac address 2nd time
    command: "ip -6 neigh delete {{ v6_nei }} lladdr {{ v6_mac2 }} dev {{ v6_intf }}"
    become: yes
    ignore_errors: true

  - name: remove just added v4 neighbor mac address 1st time
    command: "ip neigh delete {{ v4_nei }} lladdr {{ v4_mac1 }} dev {{ v4_intf }}"
    become: yes
    ignore_errors: true

  - name: remove v4 neighbor mac address 2nd time
    command: "ip neigh delete {{ v4_nei }} lladdr {{ v4_mac2 }} dev {{ v4_intf }}"
    become: yes
    ignore_errors: true
