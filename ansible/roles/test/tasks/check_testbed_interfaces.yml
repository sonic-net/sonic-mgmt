- block:
  - name: Gathering lab graph facts about the device
    conn_graph_facts: host={{ inventory_hostname }}
    connection: local

  - name: Fanout hostname
    set_fact: fanout_switch={{ device_conn['Ethernet0']['peerdevice'] }}

  - name: Check Fanout interfaces
    local_action: shell ansible-playbook -i lab fanout.yml -l {{ fanout_switch }} --tags check_interfaces_status
    ignore_errors: yes

  when: 
    - check_fanout is defined

- block:
  - name: Get Portchannel status 
    shell: show interfaces portchannel
    register: portchannel_status
    ignore_errors: yes

  - name: Get teamd dump
    shell: teamdctl '{{ item }}' state dump
    with_items: "{{ minigraph_portchannels }}"
    ignore_errors: yes
    when:
      - minigraph_portchannels is defined

  - name: Define testbed_name when not obtained
    set_fact:
      testbed_name: "{{ inventory_hostname + '-' + topo }}"
    when: testbed_name is not defined

  - name: Gathering testbed information
    test_facts: testbed_name="{{ testbed_name }}"
    connection: local
    ignore_errors: yes

  - name: Gather vm list from Testbed server
    local_action: shell ansible-playbook testbed_vm_status.yml -i veos -l "{{ testbed_facts['server'] }}"
    ignore_errors: yes

  - set_fact:
      vms: "{{ minigraph_devices }}"
      peer_hwsku: 'Arista-VM'

  - name: Gather Port-Channel status from VMs
    action: apswitch template=roles/vm_set/templates/show_int_portchannel_status.j2
    args:
      host: "{{ vms[item]['mgmt_addr'] }}"
      login: "{{ switch_login[hwsku_map[peer_hwsku]] }}"
    connection: switch
    ignore_errors: yes
    when: vms["{{ item }}"]['hwsku'] == 'Arista-VM'
    with_items: vms

  when: check_vms is defined
