######################################################################
## This playbook tests that we are able to clear ARP entries using the
## sonic-clear utility.
######################################################################

- name: Define some common test values
  set_fact:
    dut_ip: "10.10.1.2"
    dut_prefixlen: "28"
    arp_test_data:
      - fake_mac: "00:06:07:08:09:00"
        fake_ip: "10.10.1.3"
      - fake_mac: "00:06:07:08:09:01"
        fake_ip: "10.10.1.4"
      - fake_mac: "00:06:07:08:09:02"
        fake_ip: "10.10.1.5"

- block:
    - name: gather interface information if not available
      interface_facts:
      when: ansible_interface_facts is not defined

    - name: Store the indices for the ports that operationally 'up'
      set_fact: candidate_ifaces="{{ candidate_ifaces|default([]) + [item.device] }}"
      with_items: ansible_interface_facts.values()
      when: item.active and (item.device | search('Ethernet'))

    - name: Choose the first candidate interface for testing
      set_fact:
        test_interface: "{{ candidate_ifaces[0] }}"
        test_interface_index: "{{ minigraph_port_indices[candidate_ifaces[0]] }}"

    - name: find if interface1 in portchannel
      set_fact:
        po1: "{{ item.key }}"
      when: test_interface in item.value['members']
      with_dict: minigraph_portchannels

    - name: move interface {{ test_interface }} out of {{ po1 }}
      shell: teamdctl {{ po1 }} port remove {{ test_interface }}
      become: yes
      when: po1 is defined

    - name: bring {{ test_interface }} up
      shell: config interface startup {{ test_interface }}
      become: yes
      when: po1 is defined

    - name: change SONiC DUT interface IP to test IP address
      command: config interface ip add {{ test_interface }} {{ dut_ip }}/{{ dut_prefixlen}}
      become: yes

    - name: wait for interfaces to be up after removed from portchannel
      pause: seconds=40
      when: (po1 is defined) or (po2 is defined)

    - name: copy test files over
      copy: src=roles/test/files/ptftests dest=/root
      delegate_to: "{{ ptf_host }}"

    - name: Start PTF runner and send unicast arp packets using arp_test_data
      include: ptf_runner.yml
      vars:
        ptf_test_name: ARP test
        ptf_test_dir: ptftests
        ptf_test_path: arp_clear.VerifyUnicastARPReply
        ptf_platform: remote
        ptf_platform_dir: ptftests
        ptf_test_params:
          - acs_mac='{{ ansible_interface_facts[test_interface]['macaddress'] }}'
          - port='{{ test_interface_index }}'
          - fake_mac='{{ item.fake_mac }}'
          - fake_ip='{{ item.fake_ip }}'
          - dut_ip='{{ dut_ip }}'
        ptf_extra_options: "--relax --debug info --log-file /tmp/arp_clear.VerifyUnicastARPReply.{{lookup('pipe','date +%Y-%m-%d-%H:%M:%S')}}.log "
      with_list: arp_test_data

    - name: Get DUT arp table
      switch_arptable:

    - name: Check SONiC ARP table and confirm that expected entries are present
      assert:
        that:
          - "{{ item.fake_ip in arptable['v4'].keys() }}"
          - "{{ arptable['v4'][item.fake_ip]['macaddress'] == item.fake_mac }}"
          - "{{ arptable['v4'][item.fake_ip]['interface'] == test_interface }}"
      with_list: arp_test_data

    - name: Clear the first test ARP entry
      shell: sonic-clear arp {{ arp_test_data[0].fake_ip }}

    - name: Get the latest ARP table entries
      switch_arptable:

    - name: Check SONiC ARP table and confirm that the entry was removed
      assert:
        that:
          - "{{ arptable['v4'][arp_test_data[0].fake_ip]['macaddress'] == 'None' }}"

    - name: Confirm that the rest of the test ARP entries are still present
      assert:
        that:
          - "{{ item.fake_ip in arptable['v4'].keys() }}"
          - "{{ arptable['v4'][item.fake_ip]['macaddress'] == item.fake_mac }}"
          - "{{ arptable['v4'][item.fake_ip]['interface'] == test_interface }}"
      with_list: arp_test_data[1:]

    - name: Clear the all ARP entries
      shell: sonic-clear arp

    - name: Get the latest ARP table entries
      switch_arptable:

    - name: Confirm that all of the test ARP entries are gone
      assert:
        that:
          - "{{ arptable['v4'][arp_test_data[0].fake_ip]['macaddress'] == 'None' }}"
      with_list: arp_test_data[1:]

  always:
    # Recover DUT interface IP Address before entering this test case
    - name: restore dut original state
      include: "roles/test/tasks/common_tasks/reload_config.yml"
      vars:
        config_source: "config_db"

    - name: check port status
      interface_facts: up_ports={{ minigraph_ports }}

    - name: wait again if still not up
      pause: seconds=30
      when: ansible_interface_link_down_ports | length != 0

    - name: second chance to check
      interface_facts: up_ports={{ minigraph_ports }}
      when: ansible_interface_link_down_ports | length != 0

    - name: last wait if still not up
      pause: seconds=30
      when: ansible_interface_link_down_ports | length != 0
