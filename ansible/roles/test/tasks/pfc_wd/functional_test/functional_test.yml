# To support fanout platform other than arista
# 1. Change the pfc_gen_file copy dest to platform-specific location.
# 2. Create pfc_storm_[sku].j2 and pfc_storm_stop_[sku].j2 to start and stop pfc generator

- conn_graph_facts: host={{ peer_device }}
  connection: local
  become: no

- name: Prepare variables required for PFC test
  set_fact:
    pfc_queue_index: 4
    pfc_frames_number: 100000
    pfc_wd_test_pkt_count: 10000
    pfc_fanout_interface: "{{neighbors[pfc_wd_test_port]['peerport']}}"
    peer_hwsku: "{{device_info['HwSku']}}"
    peer_mgmt: "{{device_info['mgmtip']}}"
    testname: functional_test
    config_files:
      - pfc_wd_drp_action.json
      - pfc_wd_fwd_action.json
      - pfc_wd_timer.json
      - pfc_wd_del_action.json

- set_fact: pfc_wd_test_neighbor_addr="{{((minigraph_bgp|selectattr('peer_addr', 'equalto', pfc_wd_test_port_addr))|list)[0]['addr']}}"
- set_fact: pfc_wd_rx_neighbor_addr="{{((minigraph_bgp|selectattr('peer_addr', 'equalto', pfc_wd_rx_port_addr))|list)[0]['addr']}}"

- set_fact:
      peer_login: "{{switch_login[hwsku_map[peer_hwsku]]}}"

- set_fact:
      pfc_wd_storm_template: pfc_storm_mlnx.j2
  when: peer_hwsku == "MLNX-OS"

- set_fact:
      pfc_wd_storm_template: pfc_storm_arista.j2
      pfc_wd_storm_stop_template: pfc_storm_stop_arista.j2
  when: peer_hwsku | search("Arista") or peer_hwsku | search("arista")

- name: Set timers
  set_fact:
      pfc_wd_detect_time: 200
      pfc_wd_restore_time: 200
      pfc_wd_restore_time_large: 30000
      pfc_wd_poll_time: 100

- set_fact:
      pfc_gen_file: pfc_gen.py

- name: Create pfc generater file in case it doesn't exist.
  file: path=/mnt/flash/{{pfc_gen_file}} state=touch
  delegate_to: "{{ peer_mgmt}}"
  become: true
  when: peer_hwsku | search("Arista") or peer_hwsku | search("arista")

- name: Deploy PFC generator to the fanout switch
  copy: src=roles/test/files/helpers/{{pfc_gen_file}} dest=/mnt/flash
  delegate_to: "{{peer_mgmt}}"
  become: true
  when: peer_hwsku | search("Arista") or peer_hwsku | search("arista")

- name: copy the test to ptf container
  copy: src=roles/test/files/ptftests dest=/root
  delegate_to: "{{ ptf_host }}"

- name: Get queue OID
  shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS_QUEUE_NAME_MAP {{ pfc_wd_test_port }}:{{ pfc_queue_index }}"
  register: queue_oid

# Verify proper function of drop action
- block:
    - name: Apply drop config to {{ pfc_wd_test_port }}.
      vars:
        command_to_run: "pfcwd start --action drop --restoration-time {{ pfc_wd_restore_time_large }} {{ pfc_wd_test_port }} {{ pfc_wd_detect_time }}"
        errors_expected: false
      include: roles/test/tasks/run_command_with_log_analyzer.yml

    - name: Get PFC_WD_QUEUE_STATS_TX_DROPPED_PACKETS before test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_TX_DROPPED_PACKETS"
      register: pfc_wd_tx_drop_before

    - name: Get PFC_WD_QUEUE_STATS_RX_DROPPED_PACKETS before test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_RX_DROPPED_PACKETS"
      register: pfc_wd_rx_drop_before

    - set_fact:
        test_expect_file: "expect_pfc_wd_detect"

    - set_fact:
        pfc_frames_number: 100000000
      when: peer_hwsku | search("Arista") or peer_hwsku | search("arista")

    - name: Initialize loganalyzer
      include: roles/test/files/tools/loganalyzer/loganalyzer_init.yml

    - name: Generate PFC storm on fanout switch
      action: apswitch template="{{pfc_wd_storm_template}}"
      args:
        host: "{{peer_mgmt}}"
        login: "{{peer_login}}"
      connection: switch

    - name: Check if logs contain message that PFC WD detected deadlock
      include: roles/test/files/tools/loganalyzer/loganalyzer_analyze.yml

    - name: Check if logs contain message that PFC WD detected deadlock
      include: roles/test/files/tools/loganalyzer/loganalyzer_end.yml

    - name: "Send 10K packets via {{pfc_wd_test_port}}"
      include: roles/test/tasks/ptf_runner.yml
      vars:
        ptf_test_name: PFC WD test
        ptf_test_dir: ptftests
        ptf_test_path: pfc_wd.PfcWdTest
        ptf_platform: remote
        ptf_test_params:
          - testbed_type='{{testbed_type}}'
          - router_mac='{{ansible_Ethernet0['macaddress']}}'
          - queue_index='{{pfc_queue_index}}'
          - pkt_count='{{pfc_wd_test_pkt_count}}'
          - port_src='{{pfc_wd_rx_port_id}}'
          - ip_src='{{pfc_wd_rx_neighbor_addr}}'
          - ip_dst='{{pfc_wd_test_neighbor_addr}}'
          - wd_action='drop'
        ptf_extra_options: "--relax --debug info --log-file /tmp/pfc_wd.PfcWdTest.{{lookup('pipe','date +%Y-%m-%d-%H:%M:%S')}}.log "

    - name: "Send 10K packets to {{pfc_wd_test_port}}"
      include: roles/test/tasks/ptf_runner.yml
      vars:
        ptf_test_name: PFC WD test
        ptf_test_dir: ptftests
        ptf_test_path: pfc_wd.PfcWdTest
        ptf_platform: remote
        ptf_test_params:
          - testbed_type='{{testbed_type}}'
          - router_mac='{{ansible_Ethernet0['macaddress']}}'
          - queue_index='{{pfc_queue_index}}'
          - pkt_count='{{pfc_wd_test_pkt_count}}'
          - port_src='{{pfc_wd_test_port_id}}'
          - ip_src='{{pfc_wd_test_neighbor_addr}}'
          - ip_dst='{{pfc_wd_rx_neighbor_addr}}'
          - wd_action='drop'
        ptf_extra_options: "--relax --debug info --log-file /tmp/pfc_wd.PfcWdTest.{{lookup('pipe','date +%Y-%m-%d-%H:%M:%S')}}.log "

    - name: "Send 10K packets via {{pfc_wd_test_port}} to verify that other queue is not affected"
      include: roles/test/tasks/ptf_runner.yml
      vars:
        ptf_test_name: PFC WD test
        ptf_test_dir: ptftests
        ptf_test_path: pfc_wd.PfcWdTest
        ptf_platform: remote
        ptf_test_params:
          - testbed_type='{{testbed_type}}'
          - router_mac='{{ansible_Ethernet0['macaddress']}}'
          - queue_index='{{pfc_queue_index - 1}}'
          - pkt_count='{{pfc_wd_test_pkt_count}}'
          - port_src='{{pfc_wd_rx_port_id}}'
          - ip_src='{{pfc_wd_rx_neighbor_addr}}'
          - ip_dst='{{pfc_wd_test_neighbor_addr}}'
          - wd_action='forward'
        ptf_extra_options: "--relax --debug info --log-file /tmp/pfc_wd.PfcWdTest.{{lookup('pipe','date +%Y-%m-%d-%H:%M:%S')}}.log "

    - name: "Send 10K packets to {{pfc_wd_test_port}} to verify that other pg is not affected"
      include: roles/test/tasks/ptf_runner.yml
      vars:
        ptf_test_name: PFC WD test
        ptf_test_dir: ptftests
        ptf_test_path: pfc_wd.PfcWdTest
        ptf_platform: remote
        ptf_test_params:
          - testbed_type='{{testbed_type}}'
          - router_mac='{{ansible_Ethernet0['macaddress']}}'
          - queue_index='{{pfc_queue_index - 1}}'
          - pkt_count='{{pfc_wd_test_pkt_count}}'
          - port_src='{{pfc_wd_test_port_id}}'
          - ip_src='{{pfc_wd_test_neighbor_addr}}'
          - ip_dst='{{pfc_wd_rx_neighbor_addr}}'
          - wd_action='forward'
        ptf_extra_options: "--relax --debug info --log-file /tmp/pfc_wd.PfcWdTest.{{lookup('pipe','date +%Y-%m-%d-%H:%M:%S')}}.log "

    - set_fact:
        test_expect_file: "expect_pfc_wd_restore"

    - name: Initialize loganalyzer
      include: roles/test/files/tools/loganalyzer/loganalyzer_init.yml

    - name: Stop PFC storm on fanout switch
      action: apswitch template="{{pfc_wd_storm_stop_template}}"
      args:
        host: "{{peer_mgmt}}"
        login: "{{peer_login}}"
      connection: switch
      when: peer_hwsku | search("Arista") or peer_hwsku | search("arista")

    - name: Wait for queue to recover from PFC storm
      pause:
        seconds: "{{(pfc_wd_restore_time_large / 1000 * 2) | int}}"

    - name: Check if logs contain message that PFC WD restored from deadlock
      include: roles/test/files/tools/loganalyzer/loganalyzer_analyze.yml

    - name: Check if logs contain message that PFC WD restored from deadlock
      include: roles/test/files/tools/loganalyzer/loganalyzer_end.yml

    - name: Get PFC_WD_QUEUE_STATS_TX_DROPPED_PACKETS after test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_TX_DROPPED_PACKETS"
      register: pfc_wd_tx_drop_after

    - name: Verify tx drop counter
      fail:
        msg: "Number of tx dropped packets is not equal to {{ pfc_wd_test_pkt_count }}"
      when: "{{ pfc_wd_tx_drop_after.stdout | int - pfc_wd_tx_drop_before.stdout | int != pfc_wd_test_pkt_count }}"

    - name: Get PFC_WD_QUEUE_STATS_TX_DROPPED_PACKETS_LAST after test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_TX_DROPPED_PACKETS_LAST"
      register: pfc_wd_tx_drop_last

    - name: Verify last tx drop counter
      fail:
        msg: "Number of last tx dropped packets is not equal to {{ pfc_wd_test_pkt_count }}"
      when: "{{ pfc_wd_tx_drop_last.stdout | int != pfc_wd_test_pkt_count }}"

    - name: Get PFC_WD_QUEUE_STATS_RX_DROPPED_PACKETS after test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_RX_DROPPED_PACKETS"
      register: pfc_wd_rx_drop_after

    - name: Verify rx drop counter
      fail:
        msg: "Number of rx dropped packets is not equal to {{ pfc_wd_test_pkt_count }}"
      when: "{{ pfc_wd_rx_drop_after.stdout | int - pfc_wd_rx_drop_before.stdout | int != pfc_wd_test_pkt_count }}"

    - name: Get PFC_WD_QUEUE_STATS_RX_DROPPED_PACKETS_LAST after test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_RX_DROPPED_PACKETS_LAST"
      register: pfc_wd_rx_drop_last

    - name: Verify last rx drop counter
      fail:
        msg: "Number of last rx dropped packets is not equal to {{ pfc_wd_test_pkt_count }}"
      when: "{{ pfc_wd_rx_drop_last.stdout | int != pfc_wd_test_pkt_count }}"

  always:
    - name: Clean up config
      vars:
        command_to_run: "pfcwd stop"
        errors_expected: false
      include: roles/test/tasks/run_command_with_log_analyzer.yml

# Verify proper function of forward action
- block:
    - name: Apply forward config to {{ pfc_wd_test_port }}.
      vars:
        command_to_run: "pfcwd start --action forward --restoration-time {{ pfc_wd_restore_time_large }} {{ pfc_wd_test_port }} {{ pfc_wd_detect_time }}"
        errors_expected: false
      include: roles/test/tasks/run_command_with_log_analyzer.yml

    - name: Get PFC_WD_QUEUE_STATS_TX_PACKETS before test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_TX_PACKETS"
      register: pfc_wd_tx_before

    - name: Get PFC_WD_QUEUE_STATS_RX_PACKETS before test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_RX_PACKETS"
      register: pfc_wd_rx_before

    - set_fact:
        test_expect_file: "expect_pfc_wd_detect"

    - set_fact:
        pfc_frames_number: 100000000
      when: peer_hwsku | search("Arista") or peer_hwsku | search("arista")


    - name: Initialize loganalyzer
      include: roles/test/files/tools/loganalyzer/loganalyzer_init.yml

    - name: Generate PFC storm on fanout switch
      action: apswitch template="{{pfc_wd_storm_template}}"
      args:
        host: "{{peer_mgmt}}"
        login: "{{peer_login}}"
      connection: switch

    - name: Let PFC storm happen for a while
      pause:
        seconds: 1

    - name: Check if logs contain message that PFC WD detected deadlock
      include: roles/test/files/tools/loganalyzer/loganalyzer_analyze.yml

    - name: Check if logs contain message that PFC WD detected deadlock
      include: roles/test/files/tools/loganalyzer/loganalyzer_end.yml

    - name: "Send 10K packets via {{pfc_wd_test_port}}"
      include: roles/test/tasks/ptf_runner.yml
      vars:
        ptf_test_name: PFC WD test
        ptf_test_dir: ptftests
        ptf_test_path: pfc_wd.PfcWdTest
        ptf_platform: remote
        ptf_test_params:
          - testbed_type='{{testbed_type}}'
          - router_mac='{{ansible_Ethernet0['macaddress']}}'
          - queue_index='{{pfc_queue_index}}'
          - pkt_count='10000'
          - port_src='{{pfc_wd_rx_port_id}}'
          - ip_src='{{pfc_wd_rx_neighbor_addr}}'
          - ip_dst='{{pfc_wd_test_neighbor_addr}}'
          - wd_action='forward'
        ptf_extra_options: "--relax --debug info --log-file /tmp/pfc_wd.PfcWdTest.{{lookup('pipe','date +%Y-%m-%d-%H:%M:%S')}}.log "

    - name: "Send 10K packets to {{pfc_wd_test_port}}"
      include: roles/test/tasks/ptf_runner.yml
      vars:
        ptf_test_name: PFC WD test
        ptf_test_dir: ptftests
        ptf_test_path: pfc_wd.PfcWdTest
        ptf_platform: remote
        ptf_test_params:
          - testbed_type='{{testbed_type}}'
          - router_mac='{{ansible_Ethernet0['macaddress']}}'
          - queue_index='{{pfc_queue_index}}'
          - pkt_count='10000'
          - port_src='{{pfc_wd_test_port_id}}'
          - ip_src='{{pfc_wd_test_neighbor_addr}}'
          - ip_dst='{{pfc_wd_rx_neighbor_addr}}'
          - wd_action='forward'
        ptf_extra_options: "--relax --debug info --log-file /tmp/pfc_wd.PfcWdTest.{{lookup('pipe','date +%Y-%m-%d-%H:%M:%S')}}.log "

    - set_fact:
        test_expect_file: "expect_pfc_wd_restore"

    - name: Initialize loganalyzer
      include: roles/test/files/tools/loganalyzer/loganalyzer_init.yml

    - name: Stop PFC storm on fanout switch
      action: apswitch template="{{pfc_wd_storm_stop_template}}"
      args:
        host: "{{peer_mgmt}}"
        login: "{{peer_login}}"
      connection: switch
      when: peer_hwsku | search("Arista") or peer_hwsku | search("arista")


    - name: Wait for queue to recover from PFC storm
      pause:
        seconds: "{{(pfc_wd_restore_time_large / 1000 * 2) | int}}"

    - name: Check if logs contain message that PFC WD restored from deadlock
      include: roles/test/files/tools/loganalyzer/loganalyzer_analyze.yml

    - name: Check if logs contain message that PFC WD restored from deadlock
      include: roles/test/files/tools/loganalyzer/loganalyzer_end.yml

    - name: Get PFC_WD_QUEUE_STATS_TX_PACKETS after test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_TX_PACKETS"
      register: pfc_wd_tx_after

    - name: Verify tx counter
      fail:
        msg: "Number of tx packets is not equal to {{ pfc_wd_test_pkt_count }}"
      when: "{{ pfc_wd_tx_after.stdout | int - pfc_wd_tx_before.stdout | int != pfc_wd_test_pkt_count }}"

    - name: Get PFC_WD_QUEUE_STATS_TX_PACKETS_LAST after test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_TX_PACKETS_LAST"
      register: pfc_wd_tx_last

    - name: Verify last tx counter
      fail:
        msg: "Number of last tx packets is not equal to {{ pfc_wd_test_pkt_count }}"
      when: "{{ pfc_wd_tx_last.stdout | int != pfc_wd_test_pkt_count }}"

    - name: Get PFC_WD_QUEUE_STATS_RX_PACKETS after test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_RX_PACKETS"
      register: pfc_wd_rx_after

    - name: Verify rx counter
      fail:
        msg: "Number of rx packets is not equal to {{ pfc_wd_test_pkt_count }}"
      when: "{{ pfc_wd_rx_after.stdout | int - pfc_wd_rx_before.stdout | int != pfc_wd_test_pkt_count }}"

    - name: Get PFC_WD_QUEUE_STATS_RX_PACKETS_LAST after test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_RX_PACKETS_LAST"
      register: pfc_wd_rx_last

    - name: Verify last rx counter
      fail:
        msg: "Number of last rx packets is not equal to {{ pfc_wd_test_pkt_count }}"
      when: "{{ pfc_wd_rx_last.stdout | int != pfc_wd_test_pkt_count }}"

  rescue:
    - name: Remove all temporary files from local host.
      file:
        name: "{{ tests_location }}/functional_test/{{ item }}"
        state: absent
      with_items: "{{ config_files }}"
      connection: local
      become: false

  always:
    - name: Clean up config
      vars:
        command_to_run: "pfcwd stop"
        errors_expected: false
      include: roles/test/tasks/run_command_with_log_analyzer.yml

# Verify timers

- block:
    - name: Apply config with proper timers to {{ pfc_wd_test_port }}.
      vars:
        command_to_run: "pfcwd start --action drop --restoration-time {{ pfc_wd_restore_time }} {{ pfc_wd_test_port }} {{ pfc_wd_detect_time }}"
        errors_expected: false
      include: roles/test/tasks/run_command_with_log_analyzer.yml

    - name: Enable routing from mgmt interface to localhost
      sysctl:
        name: net.ipv4.conf.eth0.route_localnet
        value: 1
        sysctl_set: yes
      become: true

      # Cannot use iptables module, because it does not support to_destination in 2.0
    - name: Add iptables rule to forward syslog packets from mgmt interface to localhost
      shell: "iptables -t nat -I PREROUTING -p udp -d {{ansible_eth0['ipv4']['address']}} --dport 514 -j DNAT --to-destination 127.0.0.1:514"
      become: true

    - set_fact:
        detect_time_list: []
        restore_time_list: []

    - set_fact:
        pfc_frames_number: 100000
      when: peer_hwsku | search("Arista") or peer_hwsku | search("arista")


    - name: Calculate detection and restoration timings
      include: roles/test/tasks/pfc_wd/functional_test/timer_test.yml
      with_sequence: start=1 end=3

    - debug:
        var: "{{item}}"
      with_items: 
        - detect_time_list
        - restore_time_list

    - name: Verify that real detection time is not greater than configured
      fail:
        msg: Real detection time is greater than configured
      when: "{{(detect_time_list | sum) / 3 > pfc_wd_detect_time + pfc_wd_poll_time}}"

    - name: Verify that real detection time is not less than configured
      fail:
        msg: Real detection time is less than configured
      when: "{{(detect_time_list | sum) / 3 <  pfc_wd_detect_time}}"

    - name: Verify that real restoration time is not less than configured
      fail:
        msg: Real restoration time is less than configured
      when: "{{(restore_time_list | sum) / 3 < pfc_wd_restore_time}}"

    - name: Verify that real restoration time is less than configured
      fail:
        msg: Real restoration time is greater than configured
      when: "{{(restore_time_list | sum) / 3 > pfc_wd_restore_time + pfc_wd_poll_time}}"

  always:
    - name: Clean up config
      vars:
        command_to_run: "pfcwd stop"
        errors_expected: false
      include: roles/test/tasks/run_command_with_log_analyzer.yml
