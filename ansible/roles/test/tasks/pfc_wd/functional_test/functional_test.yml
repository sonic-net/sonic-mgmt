- name: Set fact for item values
  set_fact:
   peer_device: "{{item.value.peer_device}}"
   pfc_wd_test_port: "{{item.key}}"
   pfc_wd_rx_port: "{{item.value.rx_port}}"
   pfc_wd_test_neighbor_addr: "{{item.value.test_neighbor_addr}}"
   pfc_wd_rx_neighbor_addr: "{{item.value.rx_neighbor_addr}}"
   pfc_wd_test_port_id: "{{item.value.test_port_id}}"
   pfc_wd_rx_port_id: "{{item.value.rx_port_id}}"
   port_type: "{{item.value.test_port_type}}"

- name: Set fact for test port ids and include portchannel other members if exists
  set_fact:
    pfc_wd_test_port_ids: "[{{item.value.test_portchannel_members | join(' ')}}]"
  when: port_type == "portchannel"

- set_fact:
    pfc_wd_test_port_ids: "[{{pfc_wd_test_port_id}}]"
  when: port_type in ["vlan", "interface"]

- name: Remove existing IPs from PTF host
  script: roles/test/files/helpers/remove_ip.sh
  delegate_to: "{{ptf_host}}"
  when: port_type == "vlan"

- name: "Set {{pfc_wd_test_neighbor_addr}} to eth{{pfc_wd_test_port_id}} on PTF host"
  shell: ifconfig eth{{pfc_wd_test_port_id}} {{pfc_wd_test_neighbor_addr}}
  delegate_to: "{{ptf_host}}"
  when: port_type == "vlan"

- name: "Update ARP entry on DUT"
  shell: ping {{minigraph_vlan_interfaces[0]['addr']}} -c 10
  delegate_to: "{{ptf_host}}"
  when: port_type == "vlan"

- name: "Update ARP entry on DUT"
  shell: docker exec -i swss arping {{pfc_wd_test_neighbor_addr}} -c 5
  when: port_type == "vlan"

- conn_graph_facts: host={{ peer_device }}
  connection: local
  become: no

- name: Prepare variables required for PFC test
  set_fact:
    pfc_queue_index: 4
    pfc_frames_number: 100000
    pfc_wd_test_pkt_count: 100
    pfc_fanout_interface: "{{neighbors[pfc_wd_test_port]['peerport']}}"
    peer_hwsku: "{{device_info['HwSku']}}"
    peer_mgmt: "{{device_info['mgmtip']}}"
    testname: functional_test
    config_files:
      - pfc_wd_drp_action.json
      - pfc_wd_fwd_action.json
      - pfc_wd_timer.json
      - pfc_wd_del_action.json

- set_fact:
    class_enable: "{{(1).__lshift__(pfc_queue_index)}}"

- set_fact:
      peer_login: "{{switch_login[hwsku_map[peer_hwsku]]}}"

- name: set pfc storm templates based on fanout platform sku
  include: roles/test/tasks/pfc_wd/functional_test/set_pfc_storm_templates.yml

- name: Set timers
  set_fact:
      pfc_wd_detect_time: 400
      pfc_wd_restore_time: 400
      pfc_wd_restore_time_large: 50000
      pfc_wd_poll_time: 400

- name: Set timers if user has specified
  set_fact:
      pfc_wd_restore_time_large: "{{restore_time}}"
  when: restore_time is defined

- name: Set polling interval {{ pfc_wd_poll_time }}.
  shell: "pfcwd interval {{ pfc_wd_poll_time }}"

- set_fact:
      pfc_gen_file: pfc_gen.py

- name: Deploy pfc packet generater file to fanout switch
  include: roles/test/tasks/pfc_wd/functional_test/deploy_pfc_pktgen.yml

- name: copy the test to ptf container
  copy: src=roles/test/files/ptftests dest=/root
  delegate_to: "{{ ptf_host }}"

- name: Get queue OID
  shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS_QUEUE_NAME_MAP {{ pfc_wd_test_port }}:{{ pfc_queue_index }}"
  register: queue_oid

# Verify PFCWD detection when queue buffer is not empty and proper function of drop action
- block:
    - set_fact:
        pfc_frames_number: 100000000

    - name: Generate PFC storm on fanout switch
      action: apswitch template="{{pfc_wd_storm_template}}"
      args:
        host: "{{peer_mgmt}}"
        login: "{{peer_login}}"
      connection: switch

    - name: Let PFC storm happen for a while
      pause:
        seconds: 5

    - name: "Buffer up the queue in {{pfc_wd_test_port}}"
      include: roles/test/tasks/ptf_runner.yml
      vars:
        ptf_test_name: PFC WD test
        ptf_test_dir: ptftests
        ptf_test_path: pfc_wd.PfcWdTest
        ptf_platform: remote
        ptf_platform_dir: ptftests
        ptf_test_params:
          - testbed_type='{{testbed_type}}'
          - router_mac='{{ansible_ethernet0_mac_addr}}'
          - queue_index='{{pfc_queue_index}}'
          - pkt_count='{{pfc_wd_test_pkt_count}}'
          - port_src='{{pfc_wd_rx_port_id[0]}}'
          - port_dst='[{{pfc_wd_test_port_id}}]'
          - ip_dst='{{pfc_wd_test_neighbor_addr}}'
          - port_type='{{port_type}}'
          - wd_action='drop'
        ptf_extra_options: "--relax --debug info --log-file /tmp/pfc_wd.PfcWdTest.{{lookup('pipe','date +%Y-%m-%d-%H:%M:%S')}}.log "

    - set_fact:
        test_expect_file: "expect_pfc_wd_detect"
        test_ignore_file: "ignore_pfc_wd_messages"

    - name: Initialize loganalyzer
      include: roles/test/files/tools/loganalyzer/loganalyzer_init.yml

    - name: Apply drop config to port {{ pfc_wd_test_port }}.
      shell: "pfcwd start --action drop --restoration-time {{ pfc_wd_restore_time_large }} {{ ports }} {{ pfc_wd_detect_time }}"

    - name: Let PFC storm happen for a while
      pause:
        seconds: 5

    - name: Check if logs contain message that PFC WD detected deadlock
      include: roles/test/files/tools/loganalyzer/loganalyzer_analyze.yml

    - name: Check if logs contain message that PFC WD detected deadlock
      include: roles/test/files/tools/loganalyzer/loganalyzer_end.yml

    - name: Get PFC_WD_QUEUE_STATS_TX_DROPPED_PACKETS before test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_TX_DROPPED_PACKETS"
      register: pfc_wd_tx_drop_before

    - name: Get PFC_WD_QUEUE_STATS_RX_DROPPED_PACKETS before test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_RX_DROPPED_PACKETS"
      register: pfc_wd_rx_drop_before

    - name: "check egress drop, tx port {{pfc_wd_test_port}}"
      include: roles/test/tasks/ptf_runner.yml
      vars:
        ptf_test_name: PFC WD test
        ptf_test_dir: ptftests
        ptf_test_path: pfc_wd.PfcWdTest
        ptf_platform: remote
        ptf_platform_dir: ptftests
        ptf_test_params:
          - testbed_type='{{testbed_type}}'
          - router_mac='{{ansible_ethernet0_mac_addr}}'
          - queue_index='{{pfc_queue_index}}'
          - pkt_count='{{pfc_wd_test_pkt_count}}'
          - port_src='{{pfc_wd_rx_port_id[0]}}'
          - port_dst='[{{pfc_wd_test_port_id}}]'
          - ip_dst='{{pfc_wd_test_neighbor_addr}}'
          - port_type='{{port_type}}'
          - wd_action='drop'
        ptf_extra_options: "--relax --debug info --log-file /tmp/pfc_wd.PfcWdTest.{{lookup('pipe','date +%Y-%m-%d-%H:%M:%S')}}.log "

    - name: "Check ingress drop, rx port {{pfc_wd_test_port}}"
      include: roles/test/tasks/ptf_runner.yml
      vars:
        ptf_test_name: PFC WD test
        ptf_test_dir: ptftests
        ptf_test_path: pfc_wd.PfcWdTest
        ptf_platform: remote
        ptf_platform_dir: ptftests
        ptf_test_params:
          - testbed_type='{{testbed_type}}'
          - router_mac='{{ansible_ethernet0_mac_addr}}'
          - queue_index='{{pfc_queue_index}}'
          - pkt_count='{{pfc_wd_test_pkt_count}}'
          - port_src='{{pfc_wd_test_port_id}}'
          - port_dst='[{{pfc_wd_rx_port_id | join(' ')}}]'
          - ip_dst='{{pfc_wd_rx_neighbor_addr}}'
          - port_type='{{port_type}}'
          - wd_action='drop'
        ptf_extra_options: "--relax --debug info --log-file /tmp/pfc_wd.PfcWdTest.{{lookup('pipe','date +%Y-%m-%d-%H:%M:%S')}}.log "

    - name: "Send packets via {{pfc_wd_test_port}} to verify that other queue is not affected"
      include: roles/test/tasks/ptf_runner.yml
      vars:
        ptf_test_name: PFC WD test
        ptf_test_dir: ptftests
        ptf_test_path: pfc_wd.PfcWdTest
        ptf_platform: remote
        ptf_platform_dir: ptftests
        ptf_test_params:
          - testbed_type='{{testbed_type}}'
          - router_mac='{{ansible_ethernet0_mac_addr}}'
          - queue_index='{{pfc_queue_index - 1}}'
          - pkt_count='{{pfc_wd_test_pkt_count}}'
          - port_src='{{pfc_wd_rx_port_id[0]}}'
          - port_dst='{{pfc_wd_test_port_ids}}'
          - ip_dst='{{pfc_wd_test_neighbor_addr}}'
          - port_type='{{port_type}}'
          - wd_action='forward'
        ptf_extra_options: "--relax --debug info --log-file /tmp/pfc_wd.PfcWdTest.{{lookup('pipe','date +%Y-%m-%d-%H:%M:%S')}}.log "

    - name: "Send packets to {{pfc_wd_test_port}} to verify that other pg is not affected"
      include: roles/test/tasks/ptf_runner.yml
      vars:
        ptf_test_name: PFC WD test
        ptf_test_dir: ptftests
        ptf_test_path: pfc_wd.PfcWdTest
        ptf_platform: remote
        ptf_platform_dir: ptftests
        ptf_test_params:
          - testbed_type='{{testbed_type}}'
          - router_mac='{{ansible_ethernet0_mac_addr}}'
          - queue_index='{{pfc_queue_index - 1}}'
          - pkt_count='{{pfc_wd_test_pkt_count}}'
          - port_src='{{pfc_wd_test_port_id}}'
          - port_dst='[{{pfc_wd_rx_port_id | join(' ')}}]'
          - ip_dst='{{pfc_wd_rx_neighbor_addr}}'
          - port_type='{{port_type}}'
          - wd_action='forward'
        ptf_extra_options: "--relax --debug info --log-file /tmp/pfc_wd.PfcWdTest.{{lookup('pipe','date +%Y-%m-%d-%H:%M:%S')}}.log "

    - set_fact:
        test_expect_file: "expect_pfc_wd_restore"

    - name: Initialize loganalyzer
      include: roles/test/files/tools/loganalyzer/loganalyzer_init.yml

    - name: Stop PFC storm on fanout switch
      action: apswitch template="{{pfc_wd_storm_stop_template}}"
      args:
        host: "{{peer_mgmt}}"
        login: "{{peer_login}}"
      connection: switch

    - name: Wait for queue to recover from PFC storm
      pause:
        seconds: "{{(pfc_wd_restore_time_large | int / 1000 * 2) | int}}"

    - name: Check if logs contain message that PFC WD restored from deadlock
      include: roles/test/files/tools/loganalyzer/loganalyzer_analyze.yml

    - name: Check if logs contain message that PFC WD restored from deadlock
      include: roles/test/files/tools/loganalyzer/loganalyzer_end.yml

    - name: Get PFC_WD_QUEUE_STATS_TX_DROPPED_PACKETS after test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_TX_DROPPED_PACKETS"
      register: pfc_wd_tx_drop_after

    - name: Verify tx drop counter
      fail:
        msg: "Number of tx dropped packets {{pfc_wd_tx_drop_after.stdout | int - pfc_wd_tx_drop_before.stdout | int}} is not equal to {{ pfc_wd_test_pkt_count }}"
      when: (pfc_wd_tx_drop_after.stdout | int - pfc_wd_tx_drop_before.stdout | int != pfc_wd_test_pkt_count and port_type in ["vlan", "interface"]) or (pfc_wd_tx_drop_after.stdout | int - pfc_wd_tx_drop_before.stdout | int<= 0)

    - name: Get PFC_WD_QUEUE_STATS_TX_DROPPED_PACKETS_LAST after test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_TX_DROPPED_PACKETS_LAST"
      register: pfc_wd_tx_drop_last

    - name: Verify last tx drop counter
      fail:
        msg: "Number of last tx dropped packets {{pfc_wd_tx_drop_last.stdout | int}} is not equal to {{ pfc_wd_test_pkt_count }}"
      when: (pfc_wd_tx_drop_last.stdout | int != pfc_wd_test_pkt_count and port_type in ["vlan", "interface"]) or (pfc_wd_tx_drop_last.stdout | int <= 0)

    - name: Get PFC_WD_QUEUE_STATS_RX_DROPPED_PACKETS after test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_RX_DROPPED_PACKETS"
      register: pfc_wd_rx_drop_after

    - name: Verify rx drop counter
      fail:
        msg: "Number of rx dropped packets is not equal to {{ pfc_wd_test_pkt_count }}"
      when: (pfc_wd_rx_drop_after.stdout | int - pfc_wd_rx_drop_before.stdout | int != pfc_wd_test_pkt_count and port_type in ["vlan", "interface"]) or (pfc_wd_rx_drop_after.stdout | int - pfc_wd_rx_drop_before.stdout | int <= 0)

    - name: Get PFC_WD_QUEUE_STATS_RX_DROPPED_PACKETS_LAST after test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_RX_DROPPED_PACKETS_LAST"
      register: pfc_wd_rx_drop_last

    - name: Verify last rx drop counter
      fail:
        msg: "Number of last rx dropped packets is not equal to {{ pfc_wd_test_pkt_count }}"
      when: (pfc_wd_rx_drop_last.stdout | int != pfc_wd_test_pkt_count and port_type in ["vlan", "interface"]) or (pfc_wd_rx_drop_last.stdout | int <= 0)

  always:
    - name: Stop PFC storm on fanout switch
      action: apswitch template="{{pfc_wd_storm_stop_template}}"
      args:
        host: "{{peer_mgmt}}"
        login: "{{peer_login}}"
      connection: switch

    - name: Clean up config
      vars:
        command_to_run: "pfcwd stop"
        errors_expected: false
      include: roles/test/tasks/run_command_with_log_analyzer.yml

# Verify proper function of drop action
- block:
    - name: Apply drop config to {{ pfc_wd_test_port }}.
      vars:
        command_to_run: "pfcwd start --action drop --restoration-time {{ pfc_wd_restore_time_large }} {{ ports }} {{ pfc_wd_detect_time }}"
        errors_expected: false
      include: roles/test/tasks/run_command_with_log_analyzer.yml

    - name: Get PFC_WD_QUEUE_STATS_TX_DROPPED_PACKETS before test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_TX_DROPPED_PACKETS"
      register: pfc_wd_tx_drop_before

    - name: Get PFC_WD_QUEUE_STATS_RX_DROPPED_PACKETS before test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_RX_DROPPED_PACKETS"
      register: pfc_wd_rx_drop_before

    - set_fact:
        test_expect_file: "expect_pfc_wd_detect"

    - set_fact:
        pfc_frames_number: 100000000

    - name: Initialize loganalyzer
      include: roles/test/files/tools/loganalyzer/loganalyzer_init.yml

    - name: Generate PFC storm on fanout switch
      action: apswitch template="{{pfc_wd_storm_template}}"
      args:
        host: "{{peer_mgmt}}"
        login: "{{peer_login}}"
      connection: switch

    - name: Let PFC storm happen for a while
      pause:
        seconds: 5

    - name: Check if logs contain message that PFC WD detected deadlock
      include: roles/test/files/tools/loganalyzer/loganalyzer_analyze.yml

    - name: Check if logs contain message that PFC WD detected deadlock
      include: roles/test/files/tools/loganalyzer/loganalyzer_end.yml

    - name: "Send packets via {{pfc_wd_test_port}}"
      include: roles/test/tasks/ptf_runner.yml
      vars:
        ptf_test_name: PFC WD test
        ptf_test_dir: ptftests
        ptf_test_path: pfc_wd.PfcWdTest
        ptf_platform: remote
        ptf_platform_dir: ptftests
        ptf_test_params:
          - testbed_type='{{testbed_type}}'
          - router_mac='{{ansible_ethernet0_mac_addr}}'
          - queue_index='{{pfc_queue_index}}'
          - pkt_count='{{pfc_wd_test_pkt_count}}'
          - port_src='{{pfc_wd_rx_port_id[0]}}'
          - port_dst='[{{pfc_wd_test_port_id}}]'
          - ip_dst='{{pfc_wd_test_neighbor_addr}}'
          - port_type='{{port_type}}'
          - wd_action='drop'
        ptf_extra_options: "--relax --debug info --log-file /tmp/pfc_wd.PfcWdTest.{{lookup('pipe','date +%Y-%m-%d-%H:%M:%S')}}.log "

    - name: "Send packets to {{pfc_wd_test_port}}"
      include: roles/test/tasks/ptf_runner.yml
      vars:
        ptf_test_name: PFC WD test
        ptf_test_dir: ptftests
        ptf_test_path: pfc_wd.PfcWdTest
        ptf_platform: remote
        ptf_platform_dir: ptftests
        ptf_test_params:
          - testbed_type='{{testbed_type}}'
          - router_mac='{{ansible_ethernet0_mac_addr}}'
          - queue_index='{{pfc_queue_index}}'
          - pkt_count='{{pfc_wd_test_pkt_count}}'
          - port_src='{{pfc_wd_test_port_id}}'
          - port_dst='[{{pfc_wd_rx_port_id | join(' ')}}]'
          - ip_dst='{{pfc_wd_rx_neighbor_addr}}'
          - port_type='{{port_type}}'
          - wd_action='drop'
        ptf_extra_options: "--relax --debug info --log-file /tmp/pfc_wd.PfcWdTest.{{lookup('pipe','date +%Y-%m-%d-%H:%M:%S')}}.log "

    - name: "Send packets via {{pfc_wd_test_port}} to verify that other queue is not affected"
      include: roles/test/tasks/ptf_runner.yml
      vars:
        ptf_test_name: PFC WD test
        ptf_test_dir: ptftests
        ptf_test_path: pfc_wd.PfcWdTest
        ptf_platform: remote
        ptf_platform_dir: ptftests
        ptf_test_params:
          - testbed_type='{{testbed_type}}'
          - router_mac='{{ansible_ethernet0_mac_addr}}'
          - queue_index='{{pfc_queue_index - 1}}'
          - pkt_count='{{pfc_wd_test_pkt_count}}'
          - port_src='{{pfc_wd_rx_port_id[0]}}'
          - port_dst='{{pfc_wd_test_port_ids}}'
          - ip_dst='{{pfc_wd_test_neighbor_addr}}'
          - port_type='{{port_type}}'
          - wd_action='forward'
        ptf_extra_options: "--relax --debug info --log-file /tmp/pfc_wd.PfcWdTest.{{lookup('pipe','date +%Y-%m-%d-%H:%M:%S')}}.log "

    - name: "Send packets to {{pfc_wd_test_port}} to verify that other pg is not affected"
      include: roles/test/tasks/ptf_runner.yml
      vars:
        ptf_test_name: PFC WD test
        ptf_test_dir: ptftests
        ptf_test_path: pfc_wd.PfcWdTest
        ptf_platform: remote
        ptf_platform_dir: ptftests
        ptf_test_params:
          - testbed_type='{{testbed_type}}'
          - router_mac='{{ansible_ethernet0_mac_addr}}'
          - queue_index='{{pfc_queue_index - 1}}'
          - pkt_count='{{pfc_wd_test_pkt_count}}'
          - port_src='{{pfc_wd_test_port_id}}'
          - port_dst='[{{pfc_wd_rx_port_id | join(' ')}}]'
          - ip_dst='{{pfc_wd_rx_neighbor_addr}}'
          - port_type='{{port_type}}'
          - wd_action='forward'
        ptf_extra_options: "--relax --debug info --log-file /tmp/pfc_wd.PfcWdTest.{{lookup('pipe','date +%Y-%m-%d-%H:%M:%S')}}.log "

    - set_fact:
        test_expect_file: "expect_pfc_wd_restore"

    - name: Initialize loganalyzer
      include: roles/test/files/tools/loganalyzer/loganalyzer_init.yml

    - name: Stop PFC storm on fanout switch
      action: apswitch template="{{pfc_wd_storm_stop_template}}"
      args:
        host: "{{peer_mgmt}}"
        login: "{{peer_login}}"
      connection: switch

    - name: Wait for queue to recover from PFC storm
      pause:
        seconds: "{{(pfc_wd_restore_time_large | int / 1000 * 2) | int}}"

    - name: Check if logs contain message that PFC WD restored from deadlock
      include: roles/test/files/tools/loganalyzer/loganalyzer_analyze.yml

    - name: Check if logs contain message that PFC WD restored from deadlock
      include: roles/test/files/tools/loganalyzer/loganalyzer_end.yml

    - name: Get PFC_WD_QUEUE_STATS_TX_DROPPED_PACKETS after test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_TX_DROPPED_PACKETS"
      register: pfc_wd_tx_drop_after

    - name: Verify tx drop counter
      fail:
        msg: "Number of tx dropped packets {{pfc_wd_tx_drop_after.stdout | int - pfc_wd_tx_drop_before.stdout | int}} is not equal to {{ pfc_wd_test_pkt_count }}"
      when: (pfc_wd_tx_drop_after.stdout | int - pfc_wd_tx_drop_before.stdout | int != pfc_wd_test_pkt_count and port_type in ["vlan", "interface"]) or (pfc_wd_tx_drop_after.stdout | int - pfc_wd_tx_drop_before.stdout | int <= 0)

    - name: Get PFC_WD_QUEUE_STATS_TX_DROPPED_PACKETS_LAST after test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_TX_DROPPED_PACKETS_LAST"
      register: pfc_wd_tx_drop_last

    - name: Verify last tx drop counter
      fail:
        msg: "Number of last tx dropped packets {{(pfc_wd_tx_drop_last.stdout | int}} is not equal to {{ pfc_wd_test_pkt_count }}"
      when: (pfc_wd_tx_drop_last.stdout | int != pfc_wd_test_pkt_count and port_type in ["vlan", "interface"]) or (pfc_wd_tx_drop_last.stdout | int <= 0)

    - name: Get PFC_WD_QUEUE_STATS_RX_DROPPED_PACKETS after test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_RX_DROPPED_PACKETS"
      register: pfc_wd_rx_drop_after

    - name: Verify rx drop counter
      fail:
        msg: "Number of rx dropped packets {{pfc_wd_rx_drop_after.stdout | int - pfc_wd_rx_drop_before.stdout | int}} is not equal to {{ pfc_wd_test_pkt_count }}"
      when: (pfc_wd_rx_drop_after.stdout | int - pfc_wd_rx_drop_before.stdout | int != pfc_wd_test_pkt_count and port_type in ["vlan", "interface"]) or (pfc_wd_rx_drop_after.stdout | int - pfc_wd_rx_drop_before.stdout | int <= 0)

    - name: Get PFC_WD_QUEUE_STATS_RX_DROPPED_PACKETS_LAST after test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_RX_DROPPED_PACKETS_LAST"
      register: pfc_wd_rx_drop_last

    - name: Verify last rx drop counter
      fail:
        msg: "Number of last rx dropped packets {{pfc_wd_rx_drop_last.stdout | int}} is not equal to {{ pfc_wd_test_pkt_count }}"
      when: (pfc_wd_rx_drop_last.stdout | int != pfc_wd_test_pkt_count and port_type in ["vlan", "interface"]) or (pfc_wd_rx_drop_last.stdout | int <= 0)

    - name: Get PFC_WD_QUEUE_STATS_TX_DROPPED_PACKETS after test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_TX_DROPPED_PACKETS"
      register: pfc_wd_tx_drop_after

  always:
    - name: Stop PFC storm on fanout switch
      action: apswitch template="{{pfc_wd_storm_stop_template}}"
      args:
        host: "{{peer_mgmt}}"
        login: "{{peer_login}}"
      connection: switch

    - name: Clean up config
      vars:
        command_to_run: "pfcwd stop"
        errors_expected: false
      include: roles/test/tasks/run_command_with_log_analyzer.yml

# Verify proper function of forward action
- block:
    - name: Apply forward config to {{ pfc_wd_test_port }}.
      vars:
        command_to_run: "pfcwd start --action forward --restoration-time {{ pfc_wd_restore_time_large }} {{ ports }} {{ pfc_wd_detect_time }}"
        errors_expected: false
      include: roles/test/tasks/run_command_with_log_analyzer.yml

    - name: Get PFC_WD_QUEUE_STATS_TX_PACKETS before test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_TX_PACKETS"
      register: pfc_wd_tx_before

    - name: Get PFC_WD_QUEUE_STATS_RX_PACKETS before test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_RX_PACKETS"
      register: pfc_wd_rx_before

    - set_fact:
        test_expect_file: "expect_pfc_wd_detect"

    - set_fact:
        pfc_frames_number: 100000000

    - name: Initialize loganalyzer
      include: roles/test/files/tools/loganalyzer/loganalyzer_init.yml

    - name: Generate PFC storm on fanout switch
      action: apswitch template="{{pfc_wd_storm_template}}"
      args:
        host: "{{peer_mgmt}}"
        login: "{{peer_login}}"
      connection: switch

    - name: Let PFC storm happen for a while
      pause:
        seconds: 1

    - name: Check if logs contain message that PFC WD detected deadlock
      include: roles/test/files/tools/loganalyzer/loganalyzer_analyze.yml

    - name: Check if logs contain message that PFC WD detected deadlock
      include: roles/test/files/tools/loganalyzer/loganalyzer_end.yml

    - name: "Send packets via {{pfc_wd_test_port}}"
      include: roles/test/tasks/ptf_runner.yml
      vars:
        ptf_test_name: PFC WD test
        ptf_test_dir: ptftests
        ptf_test_path: pfc_wd.PfcWdTest
        ptf_platform: remote
        ptf_platform_dir: ptftests
        ptf_test_params:
          - testbed_type='{{testbed_type}}'
          - router_mac='{{ansible_ethernet0_mac_addr}}'
          - queue_index='{{pfc_queue_index}}'
          - pkt_count='{{pfc_wd_test_pkt_count}}'
          - port_src='{{pfc_wd_rx_port_id[0]}}'
          - port_dst='{{pfc_wd_test_port_ids}}'
          - ip_dst='{{pfc_wd_test_neighbor_addr}}'
          - port_type='{{port_type}}'
          - wd_action='forward'
        ptf_extra_options: "--relax --debug info --log-file /tmp/pfc_wd.PfcWdTest.{{lookup('pipe','date +%Y-%m-%d-%H:%M:%S')}}.log "

    - name: "Send packets to {{pfc_wd_test_port}}"
      include: roles/test/tasks/ptf_runner.yml
      vars:
        ptf_test_name: PFC WD test
        ptf_test_dir: ptftests
        ptf_test_path: pfc_wd.PfcWdTest
        ptf_platform: remote
        ptf_platform_dir: ptftests
        ptf_test_params:
          - testbed_type='{{testbed_type}}'
          - router_mac='{{ansible_ethernet0_mac_addr}}'
          - queue_index='{{pfc_queue_index}}'
          - pkt_count='{{pfc_wd_test_pkt_count}}'
          - port_src='{{pfc_wd_test_port_id}}'
          - port_dst='[{{pfc_wd_rx_port_id | join(' ')}}]'
          - ip_dst='{{pfc_wd_rx_neighbor_addr}}'
          - port_type='{{port_type}}'
          - wd_action='forward'
        ptf_extra_options: "--relax --debug info --log-file /tmp/pfc_wd.PfcWdTest.{{lookup('pipe','date +%Y-%m-%d-%H:%M:%S')}}.log "

    - set_fact:
        test_expect_file: "expect_pfc_wd_restore"

    - name: Initialize loganalyzer
      include: roles/test/files/tools/loganalyzer/loganalyzer_init.yml

    - name: Stop PFC storm on fanout switch
      action: apswitch template="{{pfc_wd_storm_stop_template}}"
      args:
        host: "{{peer_mgmt}}"
        login: "{{peer_login}}"
      connection: switch

    - name: Wait for queue to recover from PFC storm
      pause:
        seconds: "{{(pfc_wd_restore_time_large | int / 1000 * 2) | int}}"

    - name: Check if logs contain message that PFC WD restored from deadlock
      include: roles/test/files/tools/loganalyzer/loganalyzer_analyze.yml

    - name: Check if logs contain message that PFC WD restored from deadlock
      include: roles/test/files/tools/loganalyzer/loganalyzer_end.yml

    - name: Get PFC_WD_QUEUE_STATS_TX_PACKETS after test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_TX_PACKETS"
      register: pfc_wd_tx_after

    - name: Verify tx counter
      fail:
        msg: "Number of tx packets is not equal to {{ pfc_wd_test_pkt_count }}"
      when: (pfc_wd_tx_after.stdout | int - pfc_wd_tx_before.stdout | int != pfc_wd_test_pkt_count and port_type in ["vlan", "interface"]) or (pfc_wd_tx_after.stdout | int - pfc_wd_tx_before.stdout | int <= 0)

    - name: Get PFC_WD_QUEUE_STATS_TX_PACKETS_LAST after test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_TX_PACKETS_LAST"
      register: pfc_wd_tx_last

    - name: Verify last tx counter
      fail:
        msg: "Number of last tx packets is not equal to {{ pfc_wd_test_pkt_count }}"
      when: (pfc_wd_tx_last.stdout | int != pfc_wd_test_pkt_count and port_type in ["vlan", "interface"]) or (pfc_wd_tx_last.stdout | int <= 0)

    - name: Get PFC_WD_QUEUE_STATS_RX_PACKETS after test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_RX_PACKETS"
      register: pfc_wd_rx_after

    - name: Verify rx counter
      fail:
        msg: "Number of rx packets is not equal to {{ pfc_wd_test_pkt_count }}"
      when: (pfc_wd_rx_after.stdout | int - pfc_wd_rx_before.stdout | int != pfc_wd_test_pkt_count and port_typein ["vlan", "interface"]) or (pfc_wd_rx_after.stdout | int - pfc_wd_rx_before.stdout | int <= 0)

    - name: Get PFC_WD_QUEUE_STATS_RX_PACKETS_LAST after test
      shell: "docker exec -i database redis-cli -n 2 HGET COUNTERS:{{ queue_oid.stdout }} PFC_WD_QUEUE_STATS_RX_PACKETS_LAST"
      register: pfc_wd_rx_last

    - name: Verify last rx counter
      fail:
        msg: "Number of last rx packets is not equal to {{ pfc_wd_test_pkt_count }}"
      when: (pfc_wd_rx_last.stdout | int != pfc_wd_test_pkt_count and port_type in ["vlan", "interface"]) or (pfc_wd_rx_last.stdout | int <= 0)

  rescue:
    - name: Remove all temporary files from local host.
      file:
        name: "{{ tests_location }}/functional_test/{{ item }}"
        state: absent
      with_items: "{{ config_files }}"
      connection: local
      become: false

  always:
    - name: Stop PFC storm on fanout switch
      action: apswitch template="{{pfc_wd_storm_stop_template}}"
      args:
        host: "{{peer_mgmt}}"
        login: "{{peer_login}}"
      connection: switch

    - name: Clean up config
      vars:
        command_to_run: "pfcwd stop"
        errors_expected: false
      include: roles/test/tasks/run_command_with_log_analyzer.yml

