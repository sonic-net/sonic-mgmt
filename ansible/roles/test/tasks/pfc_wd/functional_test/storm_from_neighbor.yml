- name: Set fact for item values
  set_fact:
    peer_device: "{{item.value.peer_device}}"
    pfc_wd_test_port: "{{item.key}}"

- conn_graph_facts: host={{ peer_device }}
  connection: local
  become: no

- name: Prepare parameters required for PFC storming
  set_fact:
    pfc_queue_indices: [4]
    pfc_frames_number: 100000000
    pfc_fanout_interface: "{{neighbors[pfc_wd_test_port]['peerport']}}"
    peer_hwsku: "{{device_info['HwSku']}}"
    peer_mgmt: "{{device_info['mgmtip']}}"
#    testname: functional_test

- name: Add queue index 3 to pfc_queue_indices when seed is an odd number
  set_fact:
    pfc_queue_indices: "{{pfc_queue_indices + [3]}}"
  when: seed | int is odd

- debug: msg="{{pfc_queue_indices}}"

- set_fact:
    pfc_gen_file: pfc_gen.py

- name: Deploy pfc packet generater file to fanout switch
  include: roles/test/tasks/pfc_wd/functional_test/deploy_pfc_pktgen.yml

- set_fact:
    peer_login: "{{switch_login[hwsku_map[peer_hwsku]]}}"

- name: set pfc storm templates based on fanout platform sku
  include: roles/test/tasks/pfc_wd/functional_test/set_pfc_storm_templates.yml


- block:
    - set_fact:
        storm_defer_time: "{{120 | random()}}"
      with_items: "{{pfc_queue_indices}}"

    - name: Generate PFC storm on fanout switch with defer time {{pfc_storm_defer_time}}s
      action: apswitch template="{{pfc_wd_storm_template}}"
      args:
        host: "{{peer_mgmt}}"
        login: "{{peer_login}}"
      connection: switch
      vars:
        pfc_storm_defer_time: "{{storm_defer_time}}"
        pfc_queue_index: "{{item}}"
      with_items: "{{pfc_queue_indices}}"

    - set_fact:
        storm_stop_defer_time: "{{125 | random(start=(storm_defer_time | int + 5))}}"
      with_items: "{{pfc_queue_indices}}"

    - name: Stop PFC storm on fanout switch with defer time {{pfc_storm_stop_defer_time}}s
      action: apswitch template="{{pfc_wd_storm_stop_template}}"
      args:
        host: "{{peer_mgmt}}"
        login: "{{peer_login}}"
      connection: switch
      vars:
        pfc_storm_stop_defer_time: "{{storm_stop_defer_time}}"
        pfc_queue_index: "{{item}}"
      with_items: "{{pfc_queue_indices}}"

  rescue:
    - name: Stop PFC storm on fanout switch
      action: apswitch template="{{pfc_wd_storm_stop_template}}"
      args:
        host: "{{peer_mgmt}}"
        login: "{{peer_login}}"
      connection: switch
      vars:
        pfc_queue_index: "{{item}}"
      with_items: "{{pfc_queue_indices}}"
