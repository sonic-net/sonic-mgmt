- block:
    - name: Default values for preboot and inboot type
      set_fact:
        preboot_oper: None
        inboot_oper: None

    - name: Populate inboot var when it is of inboot type
      set_fact:
        inboot_oper: "{{ item }}"
      when:
        - item and item != 'None'
        - "{{ 'routing' in item }}"

    - name: Populate preboot var when it is of preboot type
      set_fact:
        preboot_oper: "{{ item }}"
      when:
        - item and item != 'None'
        - "{{ 'routing' not in item }}"

    - name: Copy arp responder to the PTF container
      copy: src=roles/test/files/helpers/arp_responder.py dest=/opt
      delegate_to: "{{ ptf_host }}"

    - name: Copy arp responder supervisor configuration to the PTF container. No args when there is no preboot type
      template: src=arp_responder.conf.j2 dest=/etc/supervisor/conf.d/arp_responder.conf
      vars:
        - arp_responder_args: '-e'
      delegate_to: "{{ ptf_host }}"
      when: not item or item == 'None'

    - name: Copy arp responder supervisor configuration to the PTF container. Specifying args when there is a preboot type
      template: src=arp_responder.conf.j2 dest=/etc/supervisor/conf.d/arp_responder.conf
      vars:
        - arp_responder_args: '-e -c /tmp/from_t1_{{ item }}.json'
      delegate_to: "{{ ptf_host }}"
      when: item and item != 'None'

    - name: Update supervisor configuration
      include_tasks: "roles/test/tasks/common_tasks/update_supervisor.yml"
      vars:
        supervisor_host: "{{ ptf_host }}"

    - include_vars: "vars/topo_{{testbed_type}}.yml"

    - name: Expand properties into props
      set_fact: props="{{configuration_properties['common']}}"
      when: testbed_type in ['t0', 't0-56', 't0-64', 't0-116', 't0-64-32']

    # Generate route file
    - name: Generate route-port map information
      template: src=roles/test/templates/fib.j2
            dest=/root/fib_info.txt
      delegate_to: "{{ptf_host}}"

    - include_tasks: ptf_runner.yml
      vars:
        ptf_test_name: Advanced-reboot test
        ptf_test_dir: ptftests
        ptf_test_path: advanced-reboot.ReloadTest
        ptf_platform: remote
        ptf_platform_dir: ptftests
        ptf_qlen: 1000
        ptf_test_params:
        - verbose=False
        - dut_username=\"{{ sonicadmin_user }}\"
        - dut_password=\"{{ sonicadmin_password }}\"
        - dut_hostname=\"{{ ansible_host }}\"
        - reboot_limit_in_seconds={{ reboot_limit }}
        - reboot_type=\"{{ reboot_type }}\"
        - portchannel_ports_file=\"/tmp/portchannel_interfaces.json\"
        - vlan_ports_file=\"/tmp/vlan_interfaces.json\"
        - ports_file=\"/tmp/ports.json\"
        - fib_info=\"/root/fib_info.txt\"
        - dut_mac='{{ dut_mac }}'
        - dut_vlan_ip='192.168.0.1'
        - vlan_ip_range='{{ vlan_ip_range }}'
        - lo_v6_prefix='{{ lo_v6_prefix }}'
        - arista_vms=\"['{{ vm_hosts | list | join("','") }}']\"
        - preboot_files='{{ preboot_files }}'
        - preboot_oper='{{ preboot_oper }}'
        - inboot_oper='{{ inboot_oper }}'
        - nexthop_ips={{ nexthop_ips }}
        - allow_vlan_flooding='{{ allow_vlan_flooding }}'
        - sniff_time_incr={{ sniff_time_incr }}
        - setup_fdb_before_test=True
        - vnet={{ vnet }}
        - vnet_pkts='{{ vnet_pkts }}'

  always:

    - name: Set all the filename vars when there is no preboot/inboot type
      set_fact:
        reboot_log: '/tmp/{{reboot_type}}.log'
        capture_pcap: '/tmp/capture.pcap'
        filter_pcap: '/tmp/capture_filtered.pcap'
        syslog_file: '/tmp/syslog'
        sairedis_rec: '/tmp/sairedis.rec'
        swss_rec: '/tmp/swss.rec'
      when: not item or item == 'None'

    - name: Set all the filename vars when there is a preboot/inboot type
      set_fact:
        reboot_log: '/tmp/{{reboot_type}}-{{item}}.log'
        capture_pcap: '/tmp/capture_{{item}}.pcap'
        filter_pcap: '/tmp/capture_filtered_{{item}}.pcap'
        syslog_file: '/tmp/syslog_{{item}}'
        sairedis_rec: '/tmp/sairedis.rec.{{item}}'
        swss_rec: '/tmp/swss.rec.{{item}}'
      when: item and item != 'None'

    - name: Copy test results from ptf to the local box /tmp/*-reboot*.log
      fetch: src="{{ reboot_log }}" dest='/tmp/' flat=true fail_on_missing=false
      delegate_to: "{{ ptf_host }}"

    - name: Copy pcap files from ptf to the local box /tmp/
      fetch: src={{ item }} dest='/tmp/' flat=true fail_on_missing=false
      delegate_to: "{{ ptf_host }}"
      with_items:
        - "{{ capture_pcap }}"
        - "{{ filter_pcap }}"

    - name: Extract all syslog entries since the last reboot
      extract_log:
        directory: '/var/log'
        file_prefix: 'syslog'
        start_string: 'Linux version'
        target_filename: "{{ syslog_file }}"
      become: yes

    - name: Copy the exctracted syslog entries to the local machine
      fetch:
        src: "{{ syslog_file }}"
        dest: '/tmp/'
        flat: yes

    - name: Extract all sairedis.rec entries since the last reboot
      extract_log:
        directory: '/var/log/swss'
        file_prefix: 'sairedis.rec'
        start_string: 'recording on:'
        target_filename: "{{ sairedis_rec }}"

    - name: Copy the exctracted sairedis.rec entries to the local machine
      fetch:
        src: "{{ sairedis_rec }}"
        dest: '/tmp/'
        flat: yes

    - name: Extract all swss.rec entries since the last reboot
      extract_log:
        directory: '/var/log/swss'
        file_prefix: 'swss.rec'
        start_string: 'recording started'
        target_filename: "{{ swss_rec }}"

    - name: Copy the exctracted swss.rec entries to the local machine
      fetch:
        src: "{{ swss_rec }}"
        dest: '/tmp/'
        flat: yes

    - name: Clear ARP table
      command: sonic-clear arp

    - name: Clear FDB table
      command: sonic-clear fdb all

- name: Wait for the DUT to be ready for the next test
  pause: seconds=420
  when: (preboot_list|length > 0 and None not in preboot_list) or
          (inboot_list|length > 0 and None not in inboot_list)
