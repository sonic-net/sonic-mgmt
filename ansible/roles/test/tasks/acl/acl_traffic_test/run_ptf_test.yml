- block:
    - set_fact:
        testname_unique: "{{ testname }}.{{ ansible_date_time.date }}.{{ ansible_date_time.time }}"

    - set_fact:
        test_out_dir: "{{ out_dir }}/{{ testname_unique }}"
        summary_file: "{{ 'summary.loganalysis.{{ testname_unique }}.log' }}"
        result_file: "{{ 'result.loganalysis.{{ testname_unique }}.log' }}"

    - name: Configure link
      command: docker exec -i syncd sx_api_port_speed_set_100G.py

    - name: Wait for link
      command: sleep 40

    - name: Execute ping from host to switch to validate link
      shell: ping {{ switch_ip1 }} -c 3
      register: pingrc
      failed_when: pingrc.rc != 0
      delegate_to: "{{ ptf_host }}"

    - name: Execute ping from host2 to switch to validate link
      shell: ping {{ switch_ip2 }} -c 3
      register: pingrc
      failed_when: pingrc.rc != 0
      delegate_to: "{{ ptf_host2 }}"

    - name: Add route on host1
      shell: ip route add {{ subnet2 }} via {{ switch_ip1 }}
      failed_when: false
      delegate_to: "{{ ptf_host }}"

    - name: Add route on host2
      shell: ip route add {{ subnet1 }} via {{ switch_ip2 }}
      failed_when: false
      delegate_to: "{{ ptf_host2 }}"

    - name: Start log analyser
      include: "{{ loganalyzer_init }}"

    - name: Set ACL rules.
      command: docker exec -i orchagent swssconfig {{ docker_testdir }}/{{ config_file }}

    - debug: msg="======================= PTF TEST =========================="

    - name: Send some TCP packets
      shell: ptf --test-dir acstests acl_tcp_test.SendTCP --interface 0@eth2
      args:
        chdir: "{{ host_testdir }}"
      register: ptfrc
      failed_when: (ptfrc.rc != 0 and errors_expected == false) or (ptfrc.rc == 0 and errors_expected == true)
      delegate_to: "{{ ptf_host }}"

    - debug: msg="======================= PTF END {{ ptfrc.rc }} ==========="

  always:
    - name: Stop log analyser
      include: "{{ loganalyzer_analyze }}"

    - name: Get the total number of error messages.
      shell: grep "TOTAL MATCHES" "{{ test_out_dir }}/{{ summary_file }}" | sed -n "s/TOTAL MATCHES:[[:space:]]*//p"
      register: errors_found

    - name: Check the number of error messages (positive tests only).
      fail: msg="{{ errors_found.stdout }} errors found while running {{ testname }} / {{ config_file }}. Please see {{ test_out_dir }}/{{ result_file }}"
      when: errors_found.stdout != "0"

    - name: Do configuration cleanup after the test
      command: systemctl restart orchagent
      register: clean_up
      when: run_cleanup == true

    - fail: msg="Failed to cleanup the ACL configuration"
      when: clean_up.rc != 0 and run_cleanup == true

    - name: Wait for orchagent initialization
      command: sleep 35
      when: run_cleanup == true
