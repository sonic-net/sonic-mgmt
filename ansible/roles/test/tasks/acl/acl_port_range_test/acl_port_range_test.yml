#----------------------------------------------
# L4 PORT RANGE TESTING.
# This script performs both traffic and configuration testing.
#
# It includes:
#   1) Testing of the valid configuration (both L3 and mirror)
#   2) Testing of the invalid configuration (L3)
#   3) Testing of the deleting configuration (L3)
#   4) Traffic testing (L3)
#----------------------------------------------

- fail: msg="Please set ptf_host variable"
  when: ptf_host is not defined

- fail: msg="Please set ptf_host_if variable (interface that host is connected to switch)"
  when: ptf_host_if is not defined

- fail: msg="Please set switch_if variable (interface that switch is connected to host)"
  when: switch_if is not defined

- set_fact:

    # configuration-test settings
    config_table_type_l3: "{{ 'config_table_type_l3.json' }}"
    config_mirror_session: "{{ 'config_mirror_session.json' }}"
    config_table_type_mirror: "{{ 'config_table_type_mirror.json' }}"
    config_l4_port_range_1_on_l3_table: "{{ 'config_l4_port_range_1_on_l3_table.json' }}"
    config_l4_port_range_2_on_l3_table: "{{ 'config_l4_port_range_2_on_l3_table.json' }}"
    config_l4_port_range_on_mirror_table: "{{ 'config_l4_port_range_on_mirror_table.json' }}"
    config_l4_full_port_range: "{{ 'config_l4_full_port_range.json' }}"
    config_l4_limited_port_range: "{{ 'config_l4_limited_port_range.json' }}"
    config_delete_limited_port_range: "{{ 'config_delete_limited_port_range.json' }}"
    config_delete_different_port_range: "{{ 'config_delete_different_port_range.json' }}"
    config_l4_port_range_invalid_1: "{{ 'config_l4_port_range_invalid_1.json' }}"
    config_l4_port_range_invalid_2: "{{ 'config_l4_port_range_invalid_2.json' }}"
    config_l4_port_range_invalid_3: "{{ 'config_l4_port_range_invalid_3.json' }}"
    config_l4_port_range_invalid_4: "{{ 'config_l4_port_range_invalid_4.json' }}"
    config_l4_port_range_invalid_5: "{{ 'config_l4_port_range_invalid_5.json' }}"
    config_l4_port_range_invalid_6: "{{ 'config_l4_port_range_invalid_6.json' }}"
    config_l4_port_range_invalid_7: "{{ 'config_l4_port_range_invalid_7.json' }}"
    config_l4_port_range_invalid_8: "{{ 'config_l4_port_range_invalid_8.json' }}"

    config_l4_port_range_expect: "{{ 'config_l4_port_range_expect_file' }}"
    config_empty_expect: "{{ 'config_empty_expect_file' }}"
    host_testdir: "{{ '/tmp/ptf_tests' }}"

    # traffic-test settings
    table_name: "{{ 'acl_test_table' }}"
    rule_limited_port_range_name: "{{ 'acl_rule_limited_port_range' }}"
    packets_sent: "{{ '3' }}"

    # mirror-testing settings
    switch_if_ip: "{{ '20.0.0.1' }}"
    ptf_host_if_ip: "{{ '20.0.0.2' }}"
    dst_mirror_subnet: "{{ '2.0.0.0/24' }}"

- set_fact:
    config_files:
      - "{{ config_table_type_l3 }}"
      - "{{ config_mirror_session }}"
      - "{{ config_table_type_mirror }}"
      - "{{ config_l4_port_range_1_on_l3_table }}"
      - "{{ config_l4_port_range_2_on_l3_table }}"
      - "{{ config_l4_port_range_on_mirror_table }}"
      - "{{ config_l4_full_port_range }}"
      - "{{ config_l4_limited_port_range }}"
      - "{{ config_delete_limited_port_range }}"
      - "{{ config_delete_different_port_range }}"
      - "{{ config_l4_port_range_invalid_1 }}"
      - "{{ config_l4_port_range_invalid_2 }}"
      - "{{ config_l4_port_range_invalid_3 }}"
      - "{{ config_l4_port_range_invalid_4 }}"
      - "{{ config_l4_port_range_invalid_5 }}"
      - "{{ config_l4_port_range_invalid_6 }}"
      - "{{ config_l4_port_range_invalid_7 }}"
      - "{{ config_l4_port_range_invalid_8 }}"

    testname: "{{ 'acl_port_range_test' }}"

- name: Copy JSON configs onto switch.
  copy: src="{{ tests_location }}/{{ testname }}/{{ item }}"  dest="{{ run_dir }}/{{ item }}"
  with_items:
      - "{{ config_files }}"

- name: Copy JSON configs from switch into docker filesystem.
  command: docker cp "{{ run_dir }}/{{ item }}" orchagent:{{ docker_testdir }}/{{ item }}
  with_items:
      - "{{ config_files }}"

#----------------- START TESTING ----------------------------
- block:

  #----------------------------------------------
  # CONFIG TESTING.
  #----------------------------------------------
      #--------------------------------
      # Valid configuration testing
      #--------------------------------

      # L3 table testing.
    - name: Create an L3 table.
      shell: docker exec -i orchagent swssconfig {{ docker_testdir }}/{{ config_table_type_l3 }}

    - set_fact:
        config_file: "{{ config_l4_port_range_1_on_l3_table }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Rule test - valid port range on L3 table.
      include: "{{ run_config_test }}"

    - block:
        - name: See that Redis DB has got an appropriate field.
          shell: docker exec -i database redis-cli -n 1 KEYS \* | grep SAI_OBJECT_TYPE_ACL_RANGE
          register: grep
          failed_when: grep.rc != 0

      always:
        - fail: msg="Redis DB has NOT got an appropriate field for rule (config file used - {{ config_l4_port_range_1_on_l3_table }})"
          when: grep.rc != 0

    - set_fact:
        config_file: "{{ config_l4_port_range_2_on_l3_table }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Rule test - put L4_DST_RANGE and L4_SRC_RANGE into one rule.
      include: "{{ run_config_test }}"

    - name: Run config cleanup after.
      include: "{{ run_config_cleanup }}"

     # Mirror table and rule testing.
    - name: Create a mirror session.
      shell: docker exec -i orchagent swssconfig {{ docker_testdir }}/{{ config_mirror_session }}

    - name: Create a mirror table.
      shell: docker exec -i orchagent swssconfig {{ docker_testdir }}/{{ config_table_type_mirror }}

    - name: Add neighbor.
      shell: ip neigh add {{ switch_if_ip }} lladdr 0e:9c:37:42:43:67 dev {{ switch_if }}

    - name: Add route.
      shell: ip route add {{ dst_mirror_subnet }} via {{ switch_if_ip }}

    - set_fact:
        config_file: "{{ config_l4_port_range_on_mirror_table }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Rule test - valid port range on mirror table.
      include: "{{ run_config_test }}"

    - block:
        - name: See that Redis DB has got an appropriate field.
          shell: docker exec -i database redis-cli -n 1 KEYS \* | grep SAI_OBJECT_TYPE_ACL_RANGE
          register: grep
          failed_when: grep.rc != 0

      always:
        - fail: msg="Redis DB has NOT got an appropriate field for rule (config file used - {{ config_l4_port_range_on_mirror_table }})"
          when: grep.rc != 0

    - name: Run config cleanup after.
      include: "{{ run_config_cleanup }}"

      #--------------------------------
      # Invalid configuration testing (valid L3 table + invalid rules).
      #--------------------------------
    - name: Create an L3 table.
      shell: docker exec -i orchagent swssconfig {{ docker_testdir }}/{{ config_table_type_l3 }}

    - set_fact:
        config_file: "{{ config_l4_port_range_invalid_1 }}"
        test_expect_file: "{{ config_l4_port_range_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - negative numbers used in range.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_l4_port_range_invalid_2 }}"
        test_expect_file: "{{ config_l4_port_range_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - boundaries reversed.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_l4_port_range_invalid_3 }}"
        test_expect_file: "{{ config_l4_port_range_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - port out of range.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_l4_port_range_invalid_4 }}"
        test_expect_file: "{{ config_l4_port_range_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - invalid syntax used in range.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_l4_port_range_invalid_5 }}"
        test_expect_file: "{{ config_l4_port_range_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - two ranges in rule, both matching source port.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_l4_port_range_invalid_6 }}"
        test_expect_file: "{{ config_l4_port_range_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - two ranges in rule, both matching destination port.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_l4_port_range_invalid_7 }}"
        test_expect_file: "{{ config_l4_port_range_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - three valid ranges in one rule (error case).
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_l4_port_range_invalid_8 }}"
        test_expect_file: "{{ config_l4_port_range_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Rule test - 17 valid rules (syncd might crash).
      include: "{{ run_config_test }}"

    - block:
        - name: See that Redis-DB has NOT got an appropriate field.
          shell: docker exec -i database redis-cli -n 1 KEYS \* | grep SAI_OBJECT_TYPE_ACL_RANGE
          register: grep
          failed_when: grep.rc == 0

      always:
        - fail: msg="Redis-DB has got data about invalid rule"
          when: grep.rc == 0

#--------------------------------
# Test the configuration deleting.
#--------------------------------
    - name: Create an L3 table.
      shell: docker exec -i orchagent swssconfig {{ docker_testdir }}/{{ config_table_type_l3 }}

    - name: Create the rule with limited port range permitted (1028 - 4096).
      shell: docker exec -i orchagent swssconfig {{ docker_testdir }}/{{ config_l4_limited_port_range }}

    - set_fact:
        config_file: "{{ config_delete_limited_port_range }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Delete rule test - rule with port range.
      include: "{{ run_config_test }}"

    - block:
        - name: See that Redis-DB has NOT got an appropriate field.
          shell: docker exec -i database redis-cli -n 1 KEYS \* | grep SAI_OBJECT_TYPE_ACL_RANGE
          register: grep
          failed_when: grep.rc == 0

      always:
        - fail: msg="Redis-DB has got data about deleted rule (config file used - {{ config_delete_limited_port_range }})"
          when: grep.rc == 0

      # Try to delete the same rule, but use another port range in delete-json.
      # This should not make any difference, so we dont expect any errors.
    - name: Create the rule with limited port range permitted (1028 - 4096).
      shell: docker exec -i orchagent swssconfig {{ docker_testdir }}/{{ config_l4_limited_port_range }}

    - set_fact:
        config_file: "{{ config_delete_different_port_range }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Delete rule test - rule with port range.
      include: "{{ run_config_test }}"

    - block:
        - name: See that Redis-DB has NOT got an appropriate field.
          shell: docker exec -i database redis-cli -n 1 KEYS \* | grep SAI_OBJECT_TYPE_ACL_RANGE
          register: grep
          failed_when: grep.rc == 0

      always:
        - fail: msg="Redis-DB has got data about deleted rule (config file used - {{ config_delete_different_port_range }})"
          when: grep.rc == 0

  #----------------------------------------------
  # TRAFFIC TESTING.
  #----------------------------------------------

    - block:
        - set_fact:
            test_expect_file: "{{ config_empty_expect }}"
            loganalyzer_run_init: true
            loganalyzer_run_analyze: false
        - name: Initialize loganalizer. Put start marker to log file.
          include: "{{ run_loganalyzer }}"

        - name: Set host interface IP address.
          shell: ifconfig {{ ptf_host_if }} {{ ptf_host_if_ip }}/24
          delegate_to: "{{ ptf_host }}"

          # todo: remove when config is done by IT dept.
        - name: Run script that sets ports speed.
          include: "{{ set_ports_speed }}"

        - name: Create target directory
          file: path={{ host_testdir }} state=directory
          delegate_to: "{{ ptf_host }}"

        - name: Copy PTF tests
          copy: src="roles/test/files/acstests/{{ item }}" dest="{{ host_testdir }}/{{ item }}"
          with_items:
            - "acl_port_range_traffic_test.py"
            - "acs_base_test.py"
          delegate_to: "{{ ptf_host }}"

        - name: Create an L3 table.
          shell: docker exec -i orchagent swssconfig {{ docker_testdir }}/{{ config_table_type_l3 }}

        - name: Create the rule with limited port range permitted (1028 - 4096).
          shell: docker exec -i orchagent swssconfig {{ docker_testdir }}/{{ config_l4_limited_port_range }}

          # Sending packets with L4 port permitted (counters value should be increased).
        - name: Read initial counters value (before sending packets).
          shell: docker exec -i database redis-cli -n 2 HGET "COUNTERS:{{ table_name }}:{{ rule_limited_port_range_name }}" Packets
          register: counters_value_initial
        - debug: var="counters_value_initial.stdout|int"

        - name: Send TCP packets with permitted L4 port (2100).
          shell: python2.7 /root/ptf/ptf --test-dir . acl_port_range_traffic_test.SendTCP  --interface 0@{{ ptf_host_if }} \
                 --test-params="count={{ packets_sent|int }}; port_number=2100"
          args:
            chdir: "{{ host_testdir }}"
          register: ptfrc
          failed_when: ptfrc.rc != 0
          delegate_to: "{{ ptf_host }}"

        - name: Wait for counters to update (it updates every 10 sec) ...
          shell: sleep 10

        - name: Read result counters value (after sending packets).
          command: docker exec -i database redis-cli -n 2 HGET "COUNTERS:{{ table_name }}:{{ rule_limited_port_range_name }}" Packets
          register: counters_value_result
        - debug: var="counters_value_result.stdout|int"

        - fail: msg="Counters value is not equal to number of packets transmitted"
          when: (counters_value_result.stdout|int - counters_value_initial.stdout|int) != packets_sent|int

          # Sending packets with L4 port forbidden (counters value should NOT be increased).
        - name: Read initial counters value (before sending packets).
          shell: docker exec -i database redis-cli -n 2 HGET "COUNTERS:{{ table_name }}:{{ rule_limited_port_range_name }}" Packets
          register: counters_value_initial
        - debug: var="counters_value_initial.stdout|int"

        - name: Send TCP packets with forbidden L4 port (80).
          shell: python2.7 /root/ptf/ptf --test-dir . acl_port_range_traffic_test.SendTCP  --interface 0@{{ ptf_host_if }} \
                 --test-params="count={{ packets_sent|int }}; port_number=80"
          args:
            chdir: "{{ host_testdir }}"
          register: ptfrc
          failed_when: ptfrc.rc != 0
          delegate_to: "{{ ptf_host }}"

        - name: Wait for counters to update (it updates every 10 sec) ...
          shell: sleep 10

        - name: Read result counters value (after sending packets).
          shell: docker exec -i database redis-cli -n 2 HGET "COUNTERS:{{ table_name }}:{{ rule_limited_port_range_name }}" Packets
          register: counters_value_result
        - debug: var="counters_value_result.stdout|int"

        - fail: msg="Counters value was increased while it shouldn't have been"
          when: (counters_value_result.stdout|int - counters_value_initial.stdout|int) != 0

      always:
        - set_fact:
            test_expect_file: "{{ config_empty_expect }}"
            loganalyzer_run_analyze: true
            loganalyzer_run_init: false
        - name: Run analyze-phase and check if no errors occured.
          include: "{{ run_loganalyzer }}"

  always:
    - name: Remove all the temporary files from switch.
      file: path="{{ run_dir }}/{{ item }}" state=absent
      with_items:
          - "{{ config_files }}"

    - name: Remove all the temporary files from host.
      file: path="{{ host_testdir }}/{{ item }}" state=absent
      with_items:
        - "acl_port_range_traffic_test.py"
        - "acs_base_test.py"
      delegate_to: "{{ ptf_host }}"

    - name: Run config cleanup after {{ testname}}
      include: "{{ run_config_cleanup }}"
