#----------------------------------------------
# SYNTAX- AND DELETE-TESTING FOR ORCHAGENT.
#----------------------------------------------

- set_fact:

    # Test table type.
    # Mirror - NOT IMPLEMENTED YET.
    # L3 - already tested, so here we check some bad cases.
    config_table_type_l3: "{{ 'config_table_type_l3.json' }}"
    config_table_type_invalid_1: "{{ 'config_table_type_invalid_1.json' }}"
    config_table_type_invalid_2: "{{ 'config_table_type_invalid_2.json' }}"
    config_table_type_expect: "{{ 'config_table_type_expect_file' }}"

    config_rule: "{{ 'config_rule.json' }}"

    # SYNTAX-TEST SPECIFIC CONFIG-FILES.
    # Test physical port.
    config_port_invalid_1: "{{ 'config_port_invalid_1.json' }}"
    config_port_invalid_2: "{{ 'config_port_invalid_2.json' }}"
    config_port_expect: "{{ 'config_port_expect_file' }}"

    # Test operation applied for table (SET ,DEL)
    config_operation_invalid_1: "{{ 'config_operation_invalid_1.json' }}"
    config_operation_invalid_2: "{{ 'config_operation_invalid_2.json' }}"

    # Test invalid extra field.
    config_extra_field_invalid: "{{ 'config_extra_field_invalid.json' }}"
    config_extra_field_expect: "{{ 'config_extra_field_expect_file' }}"

    #------------------------------------------
    # Test RULES parameters.
    #------------------------------------------

    config_priority_invalid_1: "{{ 'config_priority_invalid_1.json' }}"
    config_priority_invalid_2: "{{ 'config_priority_invalid_2.json' }}"
    config_priority_valid_max: "{{ 'config_priority_valid_max.json' }}"
    config_priority_expect: "{{ 'config_priority_expect_file' }}"

    config_ether_type_invalid_1: "{{ 'config_ether_type_invalid_1.json' }}"
    config_ether_type_invalid_2: "{{ 'config_ether_type_invalid_2.json' }}"
    config_ether_type_valid_1: "{{ 'config_ether_type_valid_1.json' }}"
    config_ether_type_valid_2: "{{ 'config_ether_type_valid_2.json' }}"
    config_ether_type_expect: "{{ 'config_ether_type_expect_file' }}"

    config_ip_type_invalid_1: "{{ 'config_ip_type_invalid_1.json' }}"
    config_ip_type_invalid_2: "{{ 'config_ip_type_invalid_2.json' }}"
    config_ip_type_valid_1: "{{ 'config_ip_type_valid_1.json' }}"
    config_ip_type_valid_2: "{{ 'config_ip_type_valid_2.json' }}"
    config_ip_type_expect: "{{ 'config_ip_type_expect_file' }}"

    config_ip_proto_invalid_1: "{{ 'config_ip_proto_invalid_1.json' }}"
    config_ip_proto_invalid_2: "{{ 'config_ip_proto_invalid_2.json' }}"
    config_ip_proto_valid_1: "{{ 'config_ip_proto_valid_1.json' }}"
    config_ip_proto_valid_2: "{{ 'config_ip_proto_valid_2.json' }}"
    config_ip_proto_expect: "{{ 'config_ip_proto_expect_file' }}"

    config_ip_addr_invalid_1: "{{ 'config_ip_addr_invalid_1.json' }}"
    config_ip_addr_invalid_2: "{{ 'config_ip_addr_invalid_2.json' }}"
    config_ip_addr_invalid_3: "{{ 'config_ip_addr_invalid_3.json' }}"
    config_ip_addr_invalid_4: "{{ 'config_ip_addr_invalid_4.json' }}"
    config_ip_addr_invalid_5: "{{ 'config_ip_addr_invalid_5.json' }}"
    config_ip_addr_invalid_6: "{{ 'config_ip_addr_invalid_6.json' }}"
    config_ip_addr_invalid_7: "{{ 'config_ip_addr_invalid_7.json' }}"
    config_ip_addr_valid_1: "{{ 'config_ip_addr_valid_1.json' }}"
    config_ip_addr_valid_2: "{{ 'config_ip_addr_valid_2.json' }}"
    config_ip_addr_expect: "{{ 'config_ip_addr_expect_file' }}"

    config_tcp_flags_valid_1: "{{ 'config_tcp_flags_valid_1.json' }}"
    config_tcp_flags_valid_2: "{{ 'config_tcp_flags_valid_2.json' }}"
    config_tcp_flags_invalid_1: "{{ 'config_tcp_flags_invalid_1.json' }}"
    config_tcp_flags_invalid_2: "{{ 'config_tcp_flags_invalid_2.json' }}"
    config_tcp_flags_expect: "{{ 'config_tcp_flags_expect_file' }}"

    config_l4_port_valid: "{{ 'config_l4_port_valid.json' }}"
    config_l4_port_invalid_1: "{{ 'config_l4_port_invalid_1.json' }}"
    config_l4_port_invalid_2: "{{ 'config_l4_port_invalid_2.json' }}"
    config_l4_port_invalid_3: "{{ 'config_l4_port_invalid_3.json' }}"
    config_l4_port_expect: "{{ 'config_l4_port_expect_file' }}"

    config_packet_action_valid: "{{ 'config_packet_action_valid.json' }}"
    config_packet_action_invalid_1: "{{ 'config_packet_action_invalid_1.json' }}"
    config_packet_action_invalid_2: "{{ 'config_packet_action_invalid_2.json' }}"
    config_packet_action_expect: "{{ 'config_packet_action_expect_file' }}"

    config_dscp_in_l3_table: "{{ 'config_dscp_in_l3_table.json' }}"
    config_dscp_in_l3_table_expect: "{{ 'config_dscp_in_l3_table_expect_file' }}"

    config_rule_empty_invalid: "{{ 'config_rule_empty.json' }}"
    config_rule_empty_expect: "{{ 'config_rule_empty_expect_file' }}"

    config_rule_in_non_existing_table: "{{ 'config_rule_in_non_existing_table.json' }}"
    config_rule_in_non_existing_table_expect: "{{ 'config_rule_in_non_existing_table_expect_file' }}"

    # DELETE-TEST SPECIFIC CONFIG-FILES.
    config_del_rule_valid: "{{ 'config_del_rule_valid.json' }}"
    config_del_rule_non_existing: "{{ 'config_del_rule_non_existing.json' }}"
    config_del_rule_expect: "{{ 'config_del_rule_expect_file' }}"

    config_del_table_valid: "{{ 'config_del_table_valid.json' }}"
    config_del_table_non_existing: "{{ 'config_del_table_non_existing.json' }}"
    config_del_table_with_rules: "{{ 'config_del_table_with_rules.json' }}"
    config_del_table_diff_fields: "{{ 'config_del_table_diff_fields.json' }}"
    config_del_table_expect: "{{ 'config_del_table_expect_file' }}"

    config_empty_expect: "{{ 'config_empty_expect_file' }}"
    config_duplicate_rule_expect: "{{ 'config_duplicate_rule_expect_file' }}"

- set_fact:
    config_files:
      - "{{ config_table_type_l3 }}"
      - "{{ config_rule }}"

      - "{{ config_table_type_invalid_1 }}"
      - "{{ config_table_type_invalid_2 }}"

      - "{{ config_port_invalid_1 }}"
      - "{{ config_port_invalid_2 }}"

      - "{{ config_operation_invalid_1 }}"
      - "{{ config_operation_invalid_2 }}"

      - "{{ config_extra_field_invalid }}"

      - "{{ config_priority_invalid_1 }}"
      - "{{ config_priority_invalid_2 }}"
      - "{{ config_priority_valid_max }}"

      - "{{ config_ether_type_invalid_1 }}"
      - "{{ config_ether_type_invalid_2 }}"
      - "{{ config_ether_type_valid_1 }}"
      - "{{ config_ether_type_valid_2 }}"

      - "{{ config_ip_type_invalid_1 }}"
      - "{{ config_ip_type_invalid_2 }}"
      - "{{ config_ip_type_valid_1 }}"
      - "{{ config_ip_type_valid_2 }}"

      - "{{ config_ip_proto_invalid_1 }}"
      - "{{ config_ip_proto_invalid_2 }}"
      - "{{ config_ip_proto_valid_1 }}"
      - "{{ config_ip_proto_valid_2 }}"

      - "{{ config_ip_addr_invalid_1 }}"
      - "{{ config_ip_addr_invalid_2 }}"
      - "{{ config_ip_addr_invalid_3 }}"
      - "{{ config_ip_addr_invalid_4 }}"
      - "{{ config_ip_addr_invalid_5 }}"
      - "{{ config_ip_addr_invalid_6 }}"
      - "{{ config_ip_addr_invalid_7 }}"
      - "{{ config_ip_addr_valid_1 }}"
      - "{{ config_ip_addr_valid_2 }}"

      - "{{ config_tcp_flags_valid_1 }}"
      - "{{ config_tcp_flags_valid_2 }}"
      - "{{ config_tcp_flags_invalid_1 }}"
      - "{{ config_tcp_flags_invalid_2 }}"

      - "{{ config_l4_port_valid }}"
      - "{{ config_l4_port_invalid_1 }}"
      - "{{ config_l4_port_invalid_2 }}"
      - "{{ config_l4_port_invalid_3 }}"

      - "{{ config_packet_action_valid }}"
      - "{{ config_packet_action_invalid_1 }}"
      - "{{ config_packet_action_invalid_2 }}"

      - "{{ config_dscp_in_l3_table }}"
      - "{{ config_rule_empty_invalid }}"
      - "{{ config_rule_in_non_existing_table }}"

      - "{{ config_del_rule_valid }}"
      - "{{ config_del_rule_non_existing }}"

      - "{{ config_del_table_valid }}"
      - "{{ config_del_table_non_existing }}"
      - "{{ config_del_table_with_rules }}"
      - "{{ config_del_table_diff_fields }}"

    testname: "{{ 'acl_orchagent_logic_test' }}"

- name: Copy JSON configs onto switch.
  copy: src="{{ tests_location }}/{{ testname }}/{{ item }}"  dest="{{ run_dir }}/{{ item }}"
  with_items:
      - "{{ config_files }}"

- name: Copy JSON configs from switch into docker filesystem.
  command: docker cp "{{ run_dir }}/{{ item }}" orchagent:{{ docker_testdir }}/{{ item }}
  with_items:
      - "{{ config_files }}"

#----------------------------------------------------------------------------------
#   Syntax-test uploads different valid and invalid configs
# with correct and incorrect fields and values, and checks for the error-messages
# in a log file.
#----------------------------------------------------------------------------------

#-----------------------------------------
# TABLES TESTING
#-----------------------------------------

- block:
    - set_fact:
        config_file: "{{ config_table_type_invalid_1 }}"
        test_expect_file: "{{ config_table_type_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Table test - invalid table type.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_table_type_invalid_2 }}"
        test_expect_file: "{{ config_table_type_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Table test - invalid table type.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_port_invalid_1 }}"
        test_expect_file: "{{ config_port_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Table test - invalid physical port.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_port_invalid_2 }}"
        test_expect_file: "{{ config_port_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Table test - invalid physical port.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_extra_field_invalid }}"
        test_expect_file: "{{ config_extra_field_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Table test - invalid extra field.
      include: "{{ run_config_test }}"

      # Check return code from swssconfig
    - name: Table test - invalid operation applied for table ("OP" field).
      shell: docker exec -i orchagent swssconfig {{ docker_testdir }}/{{ config_operation_invalid_1 }}
      register: invalid_oper_1
      failed_when: invalid_oper_1.rc == 0

    - name: Table test - invalid operation applied for table ("OP" field).
      shell: docker exec -i orchagent swssconfig {{ docker_testdir }}/{{ config_operation_invalid_2 }}
      register: invalid_oper_2
      failed_when: invalid_oper_2.rc == 0

    - name: Run config cleanup after.
      include: "{{ run_config_cleanup }}"
#-----------------------------------------
# test duplicate table creation
#-----------------------------------------
    - set_fact:
        config_file: "{{ config_table_type_l3 }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Create L3 table.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_table_type_l3 }}"
        test_expect_file: "{{ config_table_type_expect }}"
        errors_expected: true
        run_cleanup: true
    - name: Create duplicate L3 table.
      include: "{{ run_config_test }}"

#------------------------------------------
# RULES TESTING
#------------------------------------------

    - set_fact:
        config_file: "{{ config_table_type_l3 }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Create L3 table.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_priority_invalid_1 }}"
        test_expect_file: "{{ config_priority_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - invalid priority value.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_priority_invalid_2 }}"
        test_expect_file: "{{ config_priority_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - invalid priority value.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_priority_valid_max }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: true
    - name: Rule test - max priority value.
      include: "{{ run_config_test }}"

#----------------------------------------------
# ETHER_TYPE
#----------------------------------------------
    - set_fact:
        config_file: "{{ config_table_type_l3 }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Create L3 table.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_ether_type_valid_1 }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Rule test - valid ether type.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_ether_type_valid_2 }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Rule test - valid ether type.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_ether_type_invalid_1 }}"
        test_expect_file: "{{ config_ether_type_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - invalid ether type.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_ether_type_invalid_2 }}"
        test_expect_file: "{{ config_ether_type_expect }}"
        errors_expected: true
        run_cleanup: true
    - name: Rule test - invalid ether type.
      include: "{{ run_config_test }}"

#----------------------------------------------
# IP TYPE
#----------------------------------------------
    - set_fact:
        config_file: "{{ config_table_type_l3 }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Create L3 table.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_ip_type_invalid_1 }}"
        test_expect_file: "{{ config_ip_type_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - invalid ip type.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_ip_type_invalid_2 }}"
        test_expect_file: "{{ config_ip_type_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - invalid ip type.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_ip_type_valid_1 }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Rule test - invalid ip type.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_ip_type_valid_2 }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: true
    - name: Rule test - valid ip type.
      include: "{{ run_config_test }}"

#----------------------------------------------
# IP PROTO
#----------------------------------------------

    - set_fact:
        config_file: "{{ config_table_type_l3 }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Create L3 table.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_ip_proto_valid_1 }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Rule test - valid IP protocol.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_ip_proto_valid_2 }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Rule test - valid IP protocol.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_ip_proto_invalid_1 }}"
        test_expect_file: "{{ config_ip_proto_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - invalid IP protocol.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_ip_proto_invalid_2 }}"
        test_expect_file: "{{ config_ip_proto_expect }}"
        errors_expected: true
        run_cleanup: true
    - name: Rule test - invalid IP protocol.
      include: "{{ run_config_test }}"

#----------------------------------------------
# IP ADDRESS
#----------------------------------------------
    - set_fact:
        config_file: "{{ config_table_type_l3 }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Create L3 table.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_ip_addr_valid_1 }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Rule test - valid IP address.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_ip_addr_valid_2 }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Rule test - valid IP address.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_ip_addr_invalid_1 }}"
        test_expect_file: "{{ config_ip_addr_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - invalid IP address.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_ip_addr_invalid_2 }}"
        test_expect_file: "{{ config_ip_addr_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - invalid IP address.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_ip_addr_invalid_3 }}"
        test_expect_file: "{{ config_ip_addr_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - invalid IP address.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_ip_addr_invalid_4 }}"
        test_expect_file: "{{ config_ip_addr_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - invalid IP address.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_ip_addr_invalid_5 }}"
        test_expect_file: "{{ config_ip_addr_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - invalid IP address.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_ip_addr_invalid_6 }}"
        test_expect_file: "{{ config_ip_addr_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - invalid IP address.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_ip_addr_invalid_7 }}"
        test_expect_file: "{{ config_ip_addr_expect }}"
        errors_expected: true
        run_cleanup: true
    - name: Rule test - invalid IP address.
      include: "{{ run_config_test }}"

#----------------------------------------------
# TCP FLAGS
#----------------------------------------------

    - set_fact:
        config_file: "{{ config_table_type_l3 }}"
        test_expect_file: "{{ config_empty_expect }}"
        run_cleanup: false
        errors_expected: false
    - name: Create L3 table.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_tcp_flags_valid_1 }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Rule test - valid TCP flags.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_tcp_flags_valid_2 }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Rule test - valid TCP flags.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_tcp_flags_invalid_1 }}"
        test_expect_file: "{{ config_tcp_flags_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - invalid TCP flags.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_tcp_flags_invalid_2 }}"
        test_expect_file: "{{ config_tcp_flags_expect }}"
        errors_expected: true
        run_cleanup: true
    - name: Rule test - invalid TCP flags.
      include: "{{ run_config_test }}"

#----------------------------------------------
# L4 port
#----------------------------------------------

    - set_fact:
        config_file: "{{ config_table_type_l3 }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Create L3 table.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_l4_port_valid }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Rule test - valid L4 port.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_l4_port_invalid_1 }}"
        test_expect_file: "{{ config_l4_port_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - invalid L4 port.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_l4_port_invalid_2 }}"
        test_expect_file: "{{ config_l4_port_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - invalid L4 port.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_l4_port_invalid_3 }}"
        test_expect_file: "{{ config_l4_port_expect }}"
        errors_expected: true
        run_cleanup: true
    - name: Rule test - invalid L4 port.
      include: "{{ run_config_test }}"

#----------------------------------------------
# Packet action
#----------------------------------------------

    - set_fact:
        config_file: "{{ config_table_type_l3 }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Create L3 table.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_packet_action_valid }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Rule test - valid packet action.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_packet_action_invalid_1 }}"
        test_expect_file: "{{ config_packet_action_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - invalid packet action.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_packet_action_invalid_2 }}"
        test_expect_file: "{{ config_packet_action_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - invalid packet action.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_dscp_in_l3_table }}"
        test_expect_file: "{{ config_dscp_in_l3_table_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - dscp in L3 table.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_rule_empty_invalid }}"
        test_expect_file: "{{ config_rule_empty_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Rule test - empty rule with no expectes.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_rule_in_non_existing_table }}"
        test_expect_file: "{{ config_rule_in_non_existing_table_expect }}"
        errors_expected: true
        run_cleanup: true
    - name: Rule test - create rule in non-existing table.
      include: "{{ run_config_test }}"

#----------------------------------------------
# test duplicate rule creation
#----------------------------------------------
    - set_fact:
        config_file: "{{ config_table_type_l3 }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Create L3 table.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_rule }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Rule test - valid rule.
      include: "{{ run_config_test }}"

   # Duplicate rule!
    - set_fact:
        config_file: "{{ config_rule }}"
        test_expect_file: "{{ config_duplicate_rule_expect }}"
        errors_expected: true
        run_cleanup: true
    - name: Rule test - duplicate rule creation.
      include: "{{ run_config_test }}"


#----------------------------------------------------------------------------------
#----------------------------------------------------------------------------------
# Delete-test uploads different valid and invalid configs with OP: "DEL" and checks for the errors.
#
# Basic flow:
#   1) Load valid ACL config, which creates table with rule (it's trusted config, so we don't check for errors).
#   2) Upload some valid ACL configs with OP: "DEL". No errors should appear.
#   3) Upload some invalid ACL config OP: "DEL" which tries to remove non-existing object.
#      Error messages should appear.
#----------------------------------------------------------------------------------
#----------------------------------------------------------------------------------

    # Prepare valid config: create ACL table.
    - set_fact:
        config_file: "{{ config_table_type_l3 }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Create L3 table.
      include: "{{ run_config_test }}"

    # Prepare valid config: create ACL rule.
    - set_fact:
        config_file: "{{ config_rule }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Create a rule inside of ACL table (which is created previously).
      include: "{{ run_config_test }}"

    # Invalid table deletion: try to delete existing table that contains rules.
    - set_fact:
        config_file: "{{ config_del_table_with_rules }}"
        test_expect_file: "{{ config_del_table_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Try to delete existing table with rules (errors expected).
      include: "{{ run_config_test }}"

    # Valid rule deletion.
    - set_fact:
        config_file: "{{ config_del_rule_valid }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Delete an existing rule test.
      include: "{{ run_config_test }}"

    # Valid table deletion.
    - set_fact:
        config_file: "{{ config_del_table_valid }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: true
    - name: Delete an existing table test.
      include: "{{ run_config_test }}"

    # Prepare valid config: create ACL table.
    - set_fact:
        config_file: "{{ config_table_type_l3 }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Create L3 table.
      include: "{{ run_config_test }}"

    # Delete non-existing rule from existing table.
    - set_fact:
        config_file: "{{ config_del_rule_non_existing }}"
        test_expect_file: "{{ config_del_rule_expect }}"
        errors_expected: true
        run_cleanup: false
    - name: Delete non-existing rule test.
      include: "{{ run_config_test }}"

    - set_fact:
        config_file: "{{ config_del_table_non_existing }}"
        test_expect_file: "{{ config_del_table_expect }}"
        errors_expected: true
        run_cleanup: true
    - name: Delete non-existing table test.
      include: "{{ run_config_test }}"


    # Prepare valid config: create ACL table.
    - set_fact:
        config_file: "{{ config_table_type_l3 }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: false
    - name: Create L3 table.
      include: "{{ run_config_test }}"

      # delete table with different fields provided
    - set_fact:
        config_file: "{{ config_del_table_diff_fields }}"
        test_expect_file: "{{ config_empty_expect }}"
        errors_expected: false
        run_cleanup: true
    - name: Delete table with different fields provided.
      include: "{{ run_config_test }}"

  always:
    - name: Remove all the temporary files created by the test.
      file: path="{{ run_dir }}/{{ item }}" state=absent
      with_items:
          - "{{ config_files }}"

