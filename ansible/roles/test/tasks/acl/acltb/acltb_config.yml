- name: Init variables
  set_fact:
    tor_ports: []
    tor_ports_id: []
    spine_ports: []
    spine_ports_id: []
    portchannel_ports: []
    all_ports: "{{ minigraph_ports }}"
    router_mac: "{{ ansible_interface_facts['Ethernet0']['macaddress'] }}"
    dst_ip_addr_spine: 192.168.0.0
    dst_ip_addr_spine_forwarded: 192.168.0.16
    dst_ip_addr_spine_blocked: 192.168.0.17
    dst_ip_addr_tor: 172.16.1.0
    dst_ip_addr_tor_forwarded: 172.16.2.0
    dst_ip_addr_tor_blocked: 172.16.3.0

- name: Get the list of TOR ports
  set_fact:
    tor_ports: "{% for neigh in minigraph_neighbors.items() %}{% if 'T0' in neigh[1].name %}{{ neigh[0] }},{% endif %}{% endfor %}"
- set_fact:
    tor_ports: "{{ tor_ports.split(',')[:-1]}}"

- name: Get tor ports id
  set_fact:
    tor_ports_id: "{% for port_name in tor_ports %}{{ minigraph_port_indices[port_name] }},{% endfor %}"
- set_fact:
    tor_ports_id: "{{ tor_ports_id.split(',')[:-1]}}"

- name: Get the list of SPINE ports
  set_fact:
    spine_ports: "{% for neigh in minigraph_neighbors.items() %}{% if 'T2' in neigh[1].name %}{{ neigh[0] }},{% endif %}{% endfor %}"
- set_fact:
    spine_ports: "{{ spine_ports.split(',')[:-1]}}"

- name: Get spine ports id
  set_fact:
    spine_ports_id: "{% for port_name in spine_ports %}{{ minigraph_port_indices[port_name] }},{% endfor %}"
- set_fact:
    spine_ports_id: "{{ spine_ports_id.split(',')[:-1]}}"

- name: Get the list of portchannel ports
  set_fact:
    portchannel_ports: "{% for portchannel in minigraph_portchannels.items() %}{{ portchannel[0] }},{% endfor %}"
- set_fact:
    portchannel_ports: "{{ portchannel_ports.split(',')[:-1]}}"

- name: Get the list of ports to be combined to ACL tables
  set_fact:
    acl_table_ports: "{{ (testbed_type in ['t1-lag', 't1-64-lag']) | ternary(portchannel_ports + tor_ports, spine_ports + tor_ports) }}"

- name: Initialize data of ACL tables
  set_fact:
    acl_tables: "{{ [{'name': 'DATAINGRESS', 'ports': acl_table_ports, 'stage': 'ingress', 'type': 'L3'}] }}"

- name: Initialize data of ACL tables, egress
  set_fact:
    acl_tables: "{{ acl_tables + [{'name': 'DATAEGRESS', 'ports': acl_table_ports, 'stage': 'egress', 'type': 'L3'}] }}"
  when: run_egress is defined and run_egress|bool == true

- name: Create dut_tmp_dir on DUT
  file:
    path: "{{ dut_tmp_dir }}"
    state: directory

- name: Generate config files for acl tables and rules
  include: "roles/test/tasks/acl/acltb/acltb_config_generate.yml"
  with_items: acl_tables

- name: copy acsbase files
  copy: src=roles/test/files/acstests
        dest=/root
  delegate_to: "{{ ptf_host }}"

- name: copy ptftests
  copy: src=roles/test/files/ptftests
        dest=/root
  delegate_to: "{{ ptf_host }}"

- name: Copy empty ACL config file to the DUT
  copy: src="roles/test/tasks/acl/acltb_test_rules-del.json" dest="{{ dut_tmp_dir }}"
