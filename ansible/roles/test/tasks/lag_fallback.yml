### This playbook is part of lag_2.yml test
### It is to test LACP fallback functionality when neighbor is not sending LACPDU.
### The lag_fallback test cases flap the link from VM side while keeping the
### physical link up, this is to simulate the situation where the remote end
### stops sending LACP DU. If fallback is enabled, the port should still be selected,
### and LAG should be kept up. Otherwise, the LAG should be brought down.
### Then bring up the remote interface to make sure Port channel interface
### should be kept up if fallback is enabled

- set_fact:
    po: "{{ item }}"
    po_interfaces: "{{ lag_facts.lags[item]['po_config']['ports'] }}"
    po_intf_num: "{{ lag_facts.lags[item]['po_config']['ports']|length }}"

- set_fact:
    flap_intf: "{{ lag_facts.lags[item]['po_config']['ports'].keys()[0] }}"
    po_fallback: "{{ lag_facts.lags[item]['po_config']['runner']['fallback'] }}"

### Now figure out remote VM and interface info for the falpping lag member and run fallback test
- set_fact:
    peer_device: "{{vm_neighbors[flap_intf]['name']}}"
    neighbor_interface: "{{vm_neighbors[flap_intf]['port']}}"
    peer_hwsku: 'Arista-VM'

- set_fact:
    peer_host: "{{ lldp[flap_intf]['chassis']['mgmt-ip'] }}"
    wait_down_time: 120

- block:
    - name: Shut down neighbor interface {{ neighbor_interface }} on {{ peer_device }}
      action: apswitch template=neighbor_interface_shut_single.j2
      args:
        host: "{{peer_host}}"
        login: "{{switch_login[hwsku_map[peer_hwsku]]}}"
      connection: switch

    - pause:
        seconds: "{{ wait_down_time }}"

    - lag_facts: host={{ inventory_hostname }}

    - name: Display teamshow result
      shell: teamshow
      become: true
      register: teamshow_result

    - debug: var=teamshow_result.stdout_lines

    - name: Verify all other lag member interfaces are marked selected
      assert: { that: "'{{ lag_facts.lags[po]['po_stats']['ports'][item]['runner']['selected'] }}' == 'True'" }
      with_items: "{{ po_interfaces.keys() }}"
      when: item != "{{ flap_intf }}"

    - name: Verify {{ flap_intf}}  lag member interfaces are marked as deselected for the shutdown port without fallback
      assert: { that: "'{{ lag_facts.lags[po]['po_stats']['ports'][item]['runner']['selected'] }}' == 'False'" }
      with_items: "{{ po_interfaces.keys() }}"
      when: 
        - po_fallback != True
        - item == "{{ flap_intf }}"

    - name: Verify {{ flap_intf}}  lag member interfaces are marked as selected for the shutdown port with fallback
      assert: { that: "'{{ lag_facts.lags[po]['po_stats']['ports'][item]['runner']['selected'] }}' == 'True'" }
      with_items: "{{ po_interfaces.keys() }}"
      when: 
        - po_fallback == True
        - item == "{{ flap_intf }}"

    - name: verify port-channel {{ po }} interface are marked down correctly if portchannel should down
      assert: { that: "'{{ lag_facts.lags[po]['po_intf_stat'] }}' == 'Down' "}
      when: po_fallback != True

    - name: verify port-channel {{ po }} interface are marked Up correctly if portchannel should keepup
      assert: { that: "'{{ lag_facts.lags[po]['po_intf_stat'] }}' == 'Up' "}
      when: po_fallback == True

  ### always bring back port in case test error and left testbed in unknow stage
  always:
    - name: Bring up neighbor interface {{ neighbor_interface }} on {{ peer_host }}
      action: apswitch template=neighbor_interface_no_shut_single.j2
      args:
        host: "{{peer_host}}"
        login: "{{switch_login[hwsku_map[peer_hwsku]]}}"
      connection: switch

    - pause:
        seconds: 30

    - lag_facts: host={{ inventory_hostname }}

    - name: Verify all interfaces in port_channel  are marked up
      assert: { that: "'{{ lag_facts.lags[po]['po_stats']['ports'][item]['link']['up'] }}' == 'True'" }
      with_items: "{{ po_interfaces.keys() }}"

    - name: verify port-channel {{ po }} interface are marked up correctly
      assert: { that: "'{{ lag_facts.lags[po]['po_intf_stat'] }}' == 'Up' "}
