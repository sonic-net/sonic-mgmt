#-----------------------------------------
# Run all the PFC WD tests.
# The test currently supports arista fanout switches,to support othern platforms:
#
# 1. Add platform specific logic to deploy pfc packet generator automatically
# in roles/test/tasks/pfc_wd/functional_test/deploy_pfc_pktgen.yml
# or manual deploy roles/test/files/helpers/pfc_gen.py and ensure the file is available on fanout switch.
#
# 2. Create pfc_storm_[sku].j2 and pfc_storm_stop_[sku].j2 under roles/test/templates/
# to run/stop pfc packet generator which triggers pfc storm start/stop action.
#
# 3. Set pfc_storm_template and pfc_storm_stop_template variables to platform-specific template names.
# in roles/test/tasks/pfc_wd/functional_test/set_pfc_storm_templates.yml
#---------------------------------------------

- set_fact:
    run_dir: /home/admin/pfc_wd_tests
    out_dir: /home/admin/pfc_wd_tests/results
    docker_testdir: /tmp
    tests_location: roles/test/tasks/pfc_wd

- name: Create run_dir
  file:
    path: "{{ run_dir }}"
    state: directory

- name: Gathering lab graph facts about the device
  conn_graph_facts: host={{ inventory_hostname }}
  delegate_to: localhost
  tags: always

- name: Gather minigraph facts about the device
  minigraph_facts: host={{inventory_hostname}}

- set_fact:
    port_list: "{{minigraph_ports.keys()}}"
    ports: "{{minigraph_ports.keys() | join(' ')}}"

- set_fact:
    neighbors: "{{device_conn}}"

- set_fact:
    ansible_eth0_ipv4_addr: "{{ansible_eth0['ipv4']['address']}}"
    ansible_ethernet0_mac_addr: "{{ansible_Ethernet0['macaddress']}}"
    ansible_date_time: "{{ansible_date_time}}"

- set_fact:
    seed: "{{ansible_date_time['day']}}"

- set_fact:
    used: false
    first_pair: false
    pfc_wd_rx_port: "rx"
    pfc_wd_test_port: "test"

- set_fact:
    test_ports: {}

- name: Iterate all interfaces to get all interface ports info if exists
  include_tasks: roles/test/tasks/pfc_wd/iterate_interfaces.yml
  with_items: "{{minigraph_interfaces}}"
  when: item['addr'] | ipv4

- set_fact:
    restart: True
  when: minigraph_portchannels| length > 0

- name: Iterate all the portchannels to get all portchanel member ports info if exists.
  include_tasks: roles/test/tasks/pfc_wd/iterate_portchannels.yml
  with_dict: "{{minigraph_portchannels}}"

- name: Generate ips in VLAN range
  get_ip_in_range: num=1 prefix="{{minigraph_vlan_interfaces[0]['addr']}}/{{minigraph_vlan_interfaces[0]['prefixlen']}}" exclude_ips="{{minigraph_vlan_interfaces[0]['addr']}}"
  become: no
  delegate_to: localhost
  failed_when: False
  when: minigraph_vlans | length >0

- name: Set unique MACs to PTF interfaces
  script: roles/test/files/helpers/change_mac.sh
  delegate_to: "{{ptf_host}}"
  when: minigraph_vlans | length >0

- set_fact:
    vlan_members: "{{minigraph_vlans[minigraph_vlans.keys()[0]]['members']}}"
  when: minigraph_vlans | length >0

- name: Iterate all vlan members to get all vlan member ports info if exists.
  include_tasks: roles/test/tasks/pfc_wd/iterate_vlans.yml
  with_items: "{{vlan_members | default([])}}"
  when: minigraph_vlans | length >0

- name: Flush vlan ips route
  command: ip route flush {{generated_ips[0].split('/')[0]}}/32
  become: yes
  when: minigraph_vlans | length >0

- name: Add vlan ips route
  command: ip route add {{generated_ips[0].split('/')[0]}}/32 dev {{minigraph_vlan_interfaces[0]['attachto']}}
  become: yes
  when: minigraph_vlans | length >0

- debug: msg="{{test_ports}}"

- set_fact:
    select_test_ports: "{{select_test_ports | default({}) | combine({item.key: item.value})}}"
  with_dict: "{{test_ports}}"
  when: (item.value.test_port_id | int % 15) == (seed | int % 15)

- set_fact:
    random_port: "{{ test_ports.keys()[0] }}"
  when: select_test_ports is not defined

- set_fact:
    select_test_ports: "{{ select_test_ports | default({}) | combine({random_port : test_ports[random_port]}) | to_json }}"
  when: select_test_ports is not defined

- debug: msg="{{select_test_ports}}"

- name: Run default test if user has not specified warm reboot test
  set_fact:
    warm_reboot_test: false
  when: warm_reboot_test is not defined

 #****************************************#
 #           Start tests                  #
 #****************************************#

- block:
    - name: Vlan members initial value
      set_fact:
        vlan_members: []
      when: vlan_members is undefined

    - name: Vlan interfaces initial value
      set_fact:
        minigraph_vlan_interfaces: []
      when: minigraph_vlan_interfaces is undefined

    - name: Set timers
      set_fact:
        pfc_wd_detect_time: 400
        pfc_wd_restore_time: 400
        pfc_wd_restore_time_large: 3000
        pfc_wd_poll_time: 400

    - name: Stop PFC watchdog if enable by default before setting poll interval.
      shell: "pfcwd stop"
      become: yes
        
    - name: Set polling interval {{ pfc_wd_poll_time }}.
      shell: "pfcwd interval {{ pfc_wd_poll_time }}"
      become: yes

    - block:
        - name: Clean up config
          command: pfcwd stop
          become: yes

        - name: Test PFC WD configuration validation.
          vars:
            pfc_wd_template: roles/test/templates/pfc_wd_config.j2
          include_tasks: roles/test/tasks/pfc_wd/config_test/config_test.yml
          when: subtest is undefined or (subtest is defined and 'pfc_config' in subtest)

        - name: Test PFC WD Functional tests.
          include_tasks: roles/test/tasks/pfc_wd/functional_test/functional_test.yml
          with_dict: "{{select_test_ports}}"
          when: subtest is undefined or (subtest is defined and 'pfc_functional' in subtest)

        - name: Test PFC WD Timer accuracy.
          include_tasks: roles/test/tasks/pfc_wd/functional_test/check_timer_accuracy_test.yml
          when: subtest is undefined or (subtest is defined and 'pfc_timer' in subtest)

        - name: Test PFC WD extreme case when all ports have storm
          include_tasks: roles/test/tasks/pfc_wd/functional_test/storm_all_test.yml
          when: subtest is undefined or (subtest is defined and 'pfc_all_port_storm' in subtest)

        - name: Set vlan members
          set_fact:
            vlan_members: "{{ minigraph_vlans[minigraph_vlan_interfaces[0]['attachto']]['members']}}"
          when:
            - pfc_asym is defined

        - name: Enable asymmetric PFC on all server interfaces
          command: config interface pfc asymmetric on {{ item }}
          become: yes
          with_items: "{{ vlan_members }}"
          when:
            - pfc_asym is defined
            - testbed_type in ['t0']

        - name: Test PFC WD Functional tests.
          include_tasks: roles/test/tasks/pfc_wd/functional_test/functional_test.yml
          with_dict: "{{select_test_ports}}"
          when:
            - pfc_asym is defined
            - testbed_type in ['t0']
      when: warm_reboot_test | bool == false

    - block:
        - name: Set to default PFC WD config for warm-reboot test
          shell: bash -c 'redis-cli -n 4 hset "DEVICE_METADATA|localhost" default_pfcwd_status enable; sudo pfcwd stop; sleep 5; sudo pfcwd start_default'

        - name: Test PFC WD function against warm reboot
          include_tasks: roles/test/tasks/pfc_wd/functional_test/functional_test_warm_reboot.yml
      when: warm_reboot_test | bool == true

  always:
    - name: General cleanup.
      file:
        path: "{{ run_dir }}"
        state: absent

    - name: Disable asymmetric PFC on all server interfaces
      command: config interface pfc asymmetric on {{ item.dut_name }}
      become: yes
      with_items: "{{ vlan_members }}"
      when:
        - pfc_asym is defined
