- name: Require VMs as CEOS by default
  set_fact:
    vm_type: "ceos"
  when: vm_type is not defined

- name: Load topo variables
  include_vars: "vars/topo_{{ topo }}.yml"
  when: topo is defined

- name: Filter VMs for specified topology
  set_fact: VM_hosts={{ VM_hosts | filter_vm_targets(topology['VMs'], VM_base) | sort }}
  when: topology['VMs'] is defined and VM_base is defined

- name: Create directory for vm images and vm disks
  file: path={{ item }} state=directory mode=0755
  with_items:
    - "{{ root_path }}/images"
    - "{{ root_path }}/disks"

- block:

    - name: Check hdd image
      stat: path={{ root_path }}/images/{{ veos_hdd_image_filename }}
      register: veos_hdd_image_file_stat

    - name: Download veos hdd image if no local file exists
      block:

      - name: Fail if skip_veos_image_downloading is true
        fail:
          msg: "Failed, no local veos hdd image and skip_veos_image_downloading is true"
        when: skip_veos_image_downloading

      - name: Init veos_hdd_image_urls when veos_hdd_image_url value type is string
        set_fact:
          veos_hdd_image_urls:
            - "{{ veos_hdd_image_url }}"
        when: veos_hdd_image_url | type_debug == 'string'

      - name: Init veos_hdd_image_urls when veos_hdd_image_url value type is list
        set_fact:
          veos_hdd_image_urls: "{{ veos_hdd_image_url }}"
        when: veos_hdd_image_url | type_debug == 'list'

      - name: Init working_image_urls list
        set_fact:
          working_image_urls: []

      - name: Loop veos_hdd_image_urls to find out working URLs
        include_tasks: probe_image_url.yml
        loop: "{{ veos_hdd_image_urls }}"

      - name: Fail if no working veos hdd image download url is found
        fail:
          msg: [
            "Failed, no working veos hdd image download URL is found. There are 2 options to fix it:",
            "  1. Fix veos_hdd_image_url defined in ansible/group_vars/vm_host/veos.yml",
            "  2. Manually put veos hdd image to {{ root_path }}/images/{{ veos_hdd_image_filename }}",
          ]
        when: working_image_urls | length == 0

      - name: Download veos hdd image from the first URL in working_image_urls
        get_url:
          url: "{{ working_image_urls[0] }}"
          dest: "{{ root_path }}/images/{{ veos_hdd_image_filename }}"
        environment: "{{ proxy_env | default({}) }}"

      when: not veos_hdd_image_file_stat.stat.exists

    - name: Check cd image
      stat: path={{ root_path }}/images/{{ veos_cd_image_filename }}
      register: veos_cd_image_file_stat

    - name: Download veos cd image if no local file exists
      block:

      - name: Fail if skip_veos_image_downloading is true
        fail:
          msg: "Failed, no local veos cd image and skip_veos_image_downloading is true"
        when: skip_veos_image_downloading

      - name: Init veos_cd_image_urls when veos_cd_image_url value type is string
        set_fact:
          veos_cd_image_urls:
            - "{{ veos_cd_image_url }}"
        when: veos_cd_image_url | type_debug == 'string'

      - name: Init veos_cd_image_urls when veos_cd_image_url value type is list
        set_fact:
          veos_cd_image_urls: "{{ veos_cd_image_url }}"
        when: veos_cd_image_url | type_debug == 'list'

      - name: Init working_image_urls list
        set_fact:
          working_image_urls: []

      - name: Loop veos_cd_image_urls to find out working URLs
        include_tasks: probe_image_url.yml
        loop: "{{ veos_cd_image_urls }}"

      - name: Fail if no working veos cd image download url is found
        fail:
          msg: [
            "Failed, no working veos cd image download URL is found. There are 2 options to fix it:",
            "  1. Fix veos_cd_image_url defined in ansible/group_vars/vm_host/veos.yml",
            "  2. Manually put veos cd image to {{ root_path }}/images/{{ veos_cd_image_filename }}",
          ]
        when: working_image_urls | length == 0

      - name: Download veos cd image from the first URL in working_image_urls
        get_url:
          url: "{{ working_image_urls[0] }}"
          dest: "{{ root_path }}/images/{{ veos_cd_image_filename }}"
        environment: "{{ proxy_env | default({}) }}"

      when: not veos_cd_image_file_stat.stat.exists

    - set_fact:
        src_image_name: "{{ veos_hdd_image_filename }}"

  when: (vm_type | lower) == "veos"

- block:

    - name: Check SONiC image
      stat: path={{ root_path }}/images/{{ vsonic_image_filename }}
      register: sonic_img_stat

    - name: Download SONiC image if no local file exists
      block:

      - name: Fail if skip_vsonic_image_downloading is true
        fail:
          msg: "Failed, no local SONiC image and skip_vsonic_image_downloading is true"
        when: skip_vsonic_image_downloading

      - name: Init vsonic_image_urls when vsonic_image_url value type is string
        set_fact:
          vsonic_image_urls:
            - "{{ vsonic_image_url }}"
        when: vsonic_image_url | type_debug == 'string'

      - name: Init vsonic_image_urls when vsonic_image_url value type is list
        set_fact:
          vsonic_image_urls: "{{ vsonic_image_url }}"
        when: vsonic_image_url | type_debug == 'list'

      - name: Init working_image_urls list
        set_fact:
          working_image_urls: []

      - name: Loop vsonic_image_urls to find out working URLs
        include_tasks: probe_image_url.yml
        loop: "{{ vsonic_image_urls }}"

      - name: Fail if no working SONiC image download url is found
        fail:
          msg: [
            "Failed, no working SONiC image download URL is found. There are 2 options to fix it:",
            "  1. Fix vsonic_image_url defined in ansible/group_vars/vm_host/sonic.yml",
            "  2. Manually put SONiC image to {{ root_path }}/images/{{ vsonic_image_filename }}",
          ]
        when: working_image_urls | length == 0

      - name: Download SONiC image from the first URL in working_image_urls
        get_url:
          url: "{{ working_image_urls[0] }}"
          dest: "{{ root_path }}/images/{{ vsonic_image_filename }}"
        environment: "{{ proxy_env | default({}) }}"

      - name: Get downloaded SONiC image info
        stat: path={{ root_path }}/images/{{ vsonic_image_filename }}
        register: img_stat

      when: not sonic_img_stat.stat.exists

    - name: Get downloaded SONiC image info
      stat: path={{ root_path }}/images/{{ vsonic_image_filename }}
      register: downloaded_sonic_img_stat

    - block:

        - name: Rename file to have a .gz suffix
          command: mv {{ root_path }}/images/{{ vsonic_image_filename }} {{ root_path }}/images/{{ vsonic_image_filename }}.gz

        - name: Decompress file
          command: gunzip {{ root_path }}/images/{{ vsonic_image_filename }}.gz

      when: '"application/gzip" in downloaded_sonic_img_stat.stat.mimetype'

    - set_fact:
        src_image_name: "{{ vsonic_image_filename }}"

  when: (vm_type | lower) == "vsonic"

- block:

    - name: Check cisco image
      stat: path={{ root_path }}/images/{{ vcisco_image_filename }}
      register: cisco_img_stat

    - name: Download cisco image if no local file exists
      block:

      - name: Fail if skip_vcisco_image_downloading is true
        fail:
          msg: "Failed, no local cisco image and skip_vcisco_image_downloading is true"
        when: skip_vcisco_image_downloading

      - name: Init vcisco_image_urls when vcisco_image_url value type is string
        set_fact:
          vcisco_image_urls:
            - "{{ vcisco_image_url }}"
        when: vcisco_image_url | type_debug == 'string'

      - name: Init vcisco_image_urls when vcisco_image_url value type is list
        set_fact:
          vcisco_image_urls: "{{ vcisco_image_url }}"
        when: vcisco_image_url | type_debug == 'list'

      - name: Init working_image_urls list
        set_fact:
          working_image_urls: []

      - name: Loop vcisco_image_urls to find out working URLs
        include_tasks: probe_image_url.yml
        loop: "{{ vcisco_image_urls }}"

      - name: Fail if no working cisco image download url is found
        fail:
          msg: [
            "Failed, no working cisco image download URL is found. There are 2 options to fix it:",
            "  1. Fix vcisco_image_url defined in ansible/group_vars/vm_host/cisco.yml",
            "  2. Manually put cisco image to {{ root_path }}/images/{{ vcisco_image_filename }}",
          ]
        when: working_image_urls | length == 0

      - name: Download cisco image from the first URL in working_image_urls
        get_url:
          url: "{{ working_image_urls[0] }}"
          dest: "{{ root_path }}/images/{{ vcisco_image_filename }}"
          environment: "{{ proxy_env | default({}) }}"

      when: not cisco_img_stat.stat.exists

    - set_fact:
        src_image_name: "{{ vcisco_image_filename }}"

  when: (vm_type | lower) == "vcisco"

- name: Create VMs network
  become: yes
  vm_topology:
    cmd:          'create'
    vm_names:     "{{ VM_hosts }}"
    fp_mtu:       "{{ fp_mtu_size }}"
    max_fp_num:   "{{ max_fp_num }}"

- name: Default autostart to no when it is not defined
  set_fact:
    autostart: no
  when: autostart is not defined

- name: Default batch_size to 1 when it is not defined
  set_fact:
    batch_size: "{{ VM_hosts|length }}"
  when: batch_size is not defined

- name: Default wait interval to 0 if it is not defined
  set_fact:
    interval: 0
  when: interval is not defined

- name: Start VMs
  include_tasks: start_vm.yml
  vars:
    vm_name: "{{ item }}"
    hostname: "{{ vm_name }}"
    mgmt_ip_address: "{{ hostvars[vm_name]['ansible_host'] }}"
    serial_port: "{{ vm_console_base|int + vm_name[4:]|int }}"
    src_disk_image: "{{ root_path }}/images/{{ src_image_name }}"
    disk_image_dir: "{{ root_path }}/disks"
    cdrom_image: "{{ root_path }}/images/{{ veos_cd_image_filename }}"
    mgmt_tap:  "{{ vm_name }}-m"
    backplane_tap: "{{ vm_name }}-back"
  with_items: "{{ VM_hosts }}"

- set_fact:
    kickstart_failed_vms: []

- name: Kickstart VMs
  include_tasks: kickstart_vm.yml
  vars:
    vm_name: "{{ item }}"
    hostname: "{{ vm_name }}"
    mgmt_ip_address: "{{ hostvars[vm_name]['ansible_host'] }}"
    serial_port: "{{ vm_console_base|int + vm_name[4:]|int }}"
    src_disk_image: "{{ root_path }}/images/{{ src_image_name }}"
    disk_image_dir: "{{ root_path }}/disks"
    cdrom_image: "{{ root_path }}/images/{{ veos_cd_image_filename }}"
    mgmt_tap:  "{{ vm_name }}-m"
    backplane_tap: "{{ vm_name }}-back"
  with_items: "{{ VM_hosts }}"

- block:
    - name: Log all kickstart failed VMs
      debug: msg="{{ kickstart_failed_vms }}"

    - name: Fail if kickstart any VM failed
      fail: msg="Please run start-vms again with -e 'respin_vms=["VMXXX"]' to retry the failed VMs"
  when: kickstart_failed_vms | length > 0
