- name: Check docker repository
  find:
    paths: /etc/apt/sources.list.d/
    patterns: "*docker*"
  register: docker_repo

- name: Report docker repository exists
  debug:
    msg: "Docker repository already exists"
  when: docker_repo.matched > 0

- name: Report docker repository not exists
  debug:
    msg: "Docker repository does not exist"
  when: docker_repo.matched == 0

- name: Add docker official GPG key
  apt_key: url=https://download.docker.com/linux/ubuntu/gpg state=present
  become: yes
  environment: "{{ proxy_env | default({}) }}"
  when: docker_repo.matched == 0

- name: Add docker repository for 16.04
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
    state: present
  become: yes
  when: host_distribution_version.stdout == "16.04" and docker_repo.matched == 0

- name: Add docker repository for 17.04
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu zesty stable
    state: present
  become: yes
  when: host_distribution_version == "17.04" and docker_repo.matched == 0

- name: Add docker repository for 18.04
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable
    state: present
  become: yes
  when: host_distribution_version.stdout == "18.04" and docker_repo.matched == 0

- name: Add docker repository for 20.04
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
    state: present
  become: yes
  when: host_distribution_version.stdout == "20.04" and docker_repo.matched == 0

- name: Add docker repository for 22.04
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable
    state: present
  become: yes
  when: host_distribution_version.stdout == "22.04" and docker_repo.matched == 0

- name: Add docker repository for 24.04
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu noble stable
    state: present
  become: yes
  when: host_distribution_version.stdout == "24.04" and docker_repo.matched == 0

# In ansible 2.8, there isn't update_cache_retries option in apt module, we can manually run update as a seperate and retryable step
- name: Run the "apt-get update" as a separate and retryable step
  apt:
    update_cache: yes
  become: yes
  environment: "{{ proxy_env | default({}) }}"
  register: apt_update_res
  until: apt_update_res.cache_updated is defined and apt_update_res.cache_updated
  retries: 5
  delay: 10

- name: Install docker-ce
  apt: pkg=docker-ce
  become: yes
  environment: "{{ proxy_env | default({}) }}"

- name: Update python2 packages
  block:
  - name: remove old python packages
    pip: name=docker-py state=absent executable={{ pip_executable }}
    become: yes
    environment: "{{ proxy_env | default({}) }}"
    ignore_errors: yes
  - name: Install python packages
    pip: name=docker version=4.1.0 state=forcereinstall executable={{ pip_executable }}
    become: yes
    environment: "{{ proxy_env | default({}) }}"
  when: pip_executable=="pip"

- name: Update python3 packages
  block:
  - name: remove old python packages
    pip: name=docker-py state=absent executable={{ pip_executable }}
    become: yes
    environment: "{{ proxy_env | default({}) }}"
    ignore_errors: yes
  - name: Install python packages
    pip: name=docker version=7.1.0 state=forcereinstall executable={{ pip_executable }}
    become: yes
    environment: "{{ proxy_env | default({}) }}"
  when: pip_executable=="pip3" and host_distribution_version.stdout < "24.04"

- name: Update python3 packages
  block:
  - name: Ensure python3-venv is installed
    apt:
      name: python3-venv
      state: present
      update_cache: yes
    become: yes
  - name: Install python packages
    pip: name=docker version=7.1.0 state=forcereinstall virtualenv=/tmp/sonic-mgmt-virtualenv virtualenv_site_packages=true virtualenv_command="python3 -m venv"
    become: yes
    environment: "{{ proxy_env | default({}) }}"
  when: host_distribution_version.stdout >= "24.04"

- name: Use virtualenv for all Python scripts on Ubuntu 24.04 and newer
  set_fact:
    ansible_python_interpreter: "/tmp/sonic-mgmt-virtualenv/bin/python"
  when: host_distribution_version.stdout >= "24.04"
