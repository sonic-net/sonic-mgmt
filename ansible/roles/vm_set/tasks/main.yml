# This role creates a set of VM with veos
# Input parameters for the role:
# - action: 'start', 'stop' or 'renumber' for creating, removeing, or renumbering vm set respectively
# - id: sequence number for vm set on the host.
# - external_iface: interface which will be used as parent for vlan interface creation
# - vlan_base: first vlan id for the VMs
# - VMs: a dictionary which contains hostnames of VMs as a key and a dictionary with parameters (num, memory, mgmt_ip) for every VM.
# - topology: a dictionary which contains hostnames of VMs as a key and vlans value which define a topology (numbers of connected ports for every VM)
# - mgmt_bridge: linux bridge which is used for management interface connections
# - root_path: path where disk images for VMs are created
# - hdd_image_filename: base hdd image for VMs
# - cd_image_filename: base cd image for VMs
# - vm_images_url: url where base images are located
# - vmimages_saskey: a key for Azure download service. Could be set to ''

# Need latest ubuntu 4.10 kernel to fix a openvswitch bug
# https://bugs.launchpad.net/ubuntu/+source/kernel-package/+bug/1685742
- name: get host distribution
  shell: grep ^NAME /etc/os-release | awk -F '=' '{print $2}' | tr -d '"'
  register: host_distribution

- name: get host distribution version
  shell: grep ^VERSION_ID /etc/os-release | awk -F '=' '{print $2}' | tr -d '"'
  register: host_distribution_version

- name: get host kernel version
  shell: uname -r
  register: host_kernel

- name: Check if kernel upgrade needed
  set_fact:
    kernel_upgrade_needed: true
  when:
    - host_distribution.stdout == "Ubuntu"
    - host_distribution_version.stdout == "17.04"
    - host_kernel.stdout.find('4.10.0') != -1
    - "{{ host_kernel.stdout | regex_replace('4.10.0-([0-9]+)-.*', '\\1') | int < 25 }}"

- block:
    - debug: msg="{{ host_kernel.stdout }}"

    - name: Upgrade kernel package
      apt: pkg={{ item }} state=latest
      become: yes
      with_items:
        - linux-image-generic
        - linux-image-extra-virtual

    - name: Prompt for rebooting
      fail:
        msg: "Kernel upgraded, need to reboot!"
  when: kernel_upgrade_needed is defined

- name: Add docker repository for 17.04
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu zesty stable
    state: present
  become: yes
  when: host_distribution_version == "17.04"

- name: Add docker repository for 16.04
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
    state: present
  become: yes
  when: host_distribution_version == "16.04"

- name: Install necessary packages
  apt: pkg={{ item }} update_cache=yes cache_valid_time=86400
  become: yes
  with_items:
    - qemu
    - openvswitch-switch
    - net-tools
    - bridge-utils
    - util-linux
    - iproute2
    - vlan
    - libvirt-bin
    - python-libvirt
    - python-pip
    - apt-transport-https
    - ca-certificates
    - curl
    - software-properties-common
    - docker-ce

- name: Install python packages
  pip: name=docker-py state=present version=1.7.2
  become: yes
  environment: "{{ proxy_env | default({}) }}"

- name: Install br_netfilter kernel module
  become: yes
  modprobe: name=br_netfilter state=present

- name: setup trunk port
  template: src=trunk_port.j2
            dest=/etc/network/interfaces.d/trunk_port
  become: yes
  register: trunk_port

- name: bring up trunk port
  shell: /sbin/ifup {{ external_iface }} --force
  become: yes
  when: trunk_port.changed

- name: Ensure {{ root_path }} exists
  file: path={{ root_path }} state=directory

- name: Install cleanup script
  template: src=cleanup.sh.j2
            dest={{ root_path }}/cleanup.sh

- name: Copy vm_resumer.py to the {{ root_path }}
  become: true
  copy:
    src: roles/vm_set/files/vm_resumer.py
    dest: "{{ root_path }}"
    mode: 0755

- name: Retrieve a list of the defined VMs
  virt: command=list_vms
        uri=qemu:///system
  register: vm_list_defined

- name: Retrieve a list of the running VMs
  virt: command=list_vms
        uri=qemu:///system
        state=running
  register: vm_list_running

- name: Find current server group
  set_fact: current_server={{ group_names | extract_by_prefix('server_') }}

- name: Extract VM names from the inventory
  set_fact: VM_hosts={{ groups[current_server] | filter_by_prefix('VM') }}

- name: Stop VMs
  include: stop.yml
  when: action == 'stop'

- name: Start VMs
  include: start.yml
  when: action == 'start'

- name: Add topology
  include: add_topo.yml
  when: action == 'add_topo'

- name: Remove topology
  include: remove_topo.yml
  when: action == 'remove_topo'

- name: Renumber topology
  include: renumber_topo.yml
  when: action == 'renumber_topo'

- name: Connect VMs
  include: connect_vms.yml
  when: action == 'connect_vms'

- name: Disconnect VMs
  include: disconnect_vms.yml
  when: action == 'disconnect_vms'
