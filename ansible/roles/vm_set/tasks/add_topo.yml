
# The PTF image built from different branches may be incompatible. The ptf_imagetag variable added here is to
# support using different PTF images for different branches. When the ptf_imagetag variable is not specified,
# the PTF image with default "latest" tag will be used. When a specific PTF image version is required, we can
# specify a value for the ptf_imagetag variable somewhere, for example, specify from command line:
#    ./testbed-cli.sh add-topo <testbed_name>-<topo> vault -e ptf_imagetag=201811
# By using this practice, we suggest to add different tags for different PTF image versions in docker registry.
- name: Set default value for ptf_imagetag
  set_fact:
    ptf_imagetag: "latest"
  when: ptf_imagetag is not defined

- name: set "PTF" container type, by default
  set_fact:
    container_type: "PTF"

- name: set "API-SERVER" container type if Keysight Api Server is used
  set_fact:
    container_type: "API-SERVER"
  when: ptf_imagename is defined and ptf_imagename == "docker-keysight-api-server"

- name: Try to login into docker registry
  docker_login:
    registry_url: "{{ docker_registry_host }}"
    username: "{{ docker_registry_username }}"
    password: "{{ docker_registry_password }}"
  become: yes
  when: docker_registry_username is defined and docker_registry_password is defined

- name: Start Keysight API Server container
  block:
    - name: default secret_group_vars if not defined
      set_fact:
        secret_group_vars:
          ixia_api_server:
            rest_port: 443
      when: >
        secret_group_vars is not defined
        or secret_group_vars.ixia_api_server is not defined
        or secret_group_vars.ixia_api_server.rest_port is not defined

    - name: Pull and start Keysight API Server container
      docker_container:
        name: apiserver
        image: "{{ docker_registry_host }}/{{ ptf_imagename }}:{{ ptf_imagetag }}"
        pull: yes
        state: started
        restart: no
        published_ports: "{{ secret_group_vars.ixia_api_server.rest_port }}:443"
        detach: True
        capabilities:
          - net_admin
        privileged: yes
      become: yes
  when: container_type == "API-SERVER"


- name: Start PTF container
  block:
  - name: Create ptf container ptf_{{ vm_set_name }}
    docker_container:
      name: ptf_{{ vm_set_name }}
      image: "{{ docker_registry_host }}/{{ ptf_imagename }}:{{ ptf_imagetag }}"
      pull: yes
      state: started
      restart: no
      network_mode: none
      detach: True
      capabilities:
        - net_admin
      privileged: yes
    become: yes

  - name: Enable ipv6 for docker container ptf_{{ vm_set_name }}
    command: docker exec -i ptf_{{ vm_set_name }} sysctl -w net.ipv6.conf.all.disable_ipv6=0
    become: yes

  - name: Get dut ports
    include_tasks: get_dut_port.yml
    loop: "{{ duts_name.split(',') }}"
    loop_control:
      loop_var: dut_name

  - name: Create vlan ports for dut
    include_tasks: create_dut_port.yml
    when: external_port is defined
    loop: "{{ duts_name.split(',') }}"
    loop_control:
      loop_var: dut_name

  - debug: msg="{{ duts_fp_ports }}"
  - debug: msg="{{ duts_mgmt_port }}"

  - include_tasks: add_ceos_list.yml
    when: vm_type is defined and vm_type == "ceos"

  - name: Bind topology {{ topo }} to VMs. base vm = {{ VM_base }}
    vm_topology:
      cmd: "bind"
      vm_set_name: "{{ vm_set_name }}"
      topo: "{{ topology }}"
      vm_names: "{{ VM_hosts }}"
      vm_base: "{{ VM_base }}"
      ptf_mgmt_ip_addr: "{{ ptf_ip }}"
      ptf_mgmt_ipv6_addr: "{{ ptf_ipv6 }}"
      ptf_mgmt_ip_gw: "{{ mgmt_gw }}"
      ptf_mgmt_ipv6_gw: "{{ mgmt_gw_v6 | default(None) }}"
      ptf_bp_ip_addr: "{{ ptf_bp_ip }}"
      ptf_bp_ipv6_addr: "{{ ptf_bp_ipv6 }}"
      mgmt_bridge: "{{ mgmt_bridge }}"
      duts_fp_ports: "{{ duts_fp_ports }}"
      duts_mgmt_port: "{{ duts_mgmt_port }}"
      duts_name: "{{ duts_name.split(',') }}"
      fp_mtu: "{{ fp_mtu_size }}"
      max_fp_num: "{{ max_fp_num }}"
    become: yes

  - name: Send arp ping packet to gw for flusing the ARP table
    command: docker exec -i ptf_{{ vm_set_name }} python -c "from scapy.all import *; arping('{{ mgmt_gw }}')"
    become: yes

  - name: Start ptf_tgen service
    include_tasks: start_ptf_tgen.yml
    when: topo == 'fullmesh'

  - name: Start mux simulator
    include_tasks: control_mux_simulator.yml
    vars:
      mux_simulator_action: start
    when: "'dualtor' in topo"

  when: container_type == "PTF"
