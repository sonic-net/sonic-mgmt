- name: Set ansible login user name and password
  set_fact: ansible_user="admin" ansible_password={{ sonic_password }}

- name: Get VM front panel interface number
  shell: virsh domiflist {{ inventory_hostname }} | grep -E "{{ inventory_hostname }}-t" | wc -l
  register: fp_num
  delegate_to: "{{ VM_host[0] }}"
  become: yes

- name: Set SONiC backplane port name
  set_fact: bp_ifname="Ethernet{{ fp_num.stdout|int + 1 }}"
  when: '"hwsku" not in configuration[hostname]'

- name: Set SONiC backplane port name for cisco-8101-p4-32x100-vs
  set_fact: bp_ifname="Ethernet{{ fp_num.stdout|int *4 }}"
  when: '"hwsku" in configuration[hostname] and  configuration[hostname]["hwsku"]=="cisco-8101-p4-32x100-vs"'

- set_fact:
    mgmt_ip: "{{ ansible_host }}/{{ mgmt_prefixlen }}"
    mgmt_gw: "{{ vm_mgmt_gw | default(mgmt_gw) }}"

- name: create config via mininet config
  block:
  - name: create mgmt config
    template: src="configdb-mgmt.j2"
              dest=config-mgmt.json

  - name: create device metadata config for {{ configuration[hostname]['hwsku'] }}
    shell: >
            sonic-cfggen -H -k  {{ configuration[hostname]['hwsku'] }} --preset empty
            | jq '.DEVICE_METADATA.localhost.hostname="{{ hostname }}"'
            | jq '.DEVICE_METADATA.localhost.bgp_asn="{{ configuration[hostname]['bgp']['asn'] }}"'
            | jq '.DEVICE_METADATA.localhost.deployment_id="1"'
            > config-metadata.json
    when: '"hwsku" in configuration[hostname]'

  - name: create device metadata config
    shell: >
            sonic-cfggen -H -k Force10-S6000 --preset empty
            | jq '.DEVICE_METADATA.localhost.hostname="{{ hostname }}"'
            | jq '.DEVICE_METADATA.localhost.bgp_asn="{{ configuration[hostname]['bgp']['asn'] }}"'
            | jq '.DEVICE_METADATA.localhost.deployment_id="1"'
            > config-metadata.json
    when: '"hwsku" not in configuration[hostname]'

  - name: create interface config for {{ configuration[hostname]['hwsku'] }}
    shell: >
            sonic-cfggen -p /usr/share/sonic/device/x86_64-kvm_x86_64-r0/{{ configuration[hostname]['hwsku'] }}/port_config.ini -k {{ configuration[hostname]['hwsku'] }} --print-data
            | jq '.PORT[].admin_status |= "up"'
            > config-port.json
    when: '"hwsku" in configuration[hostname]'

  - name: create interface config
    shell: >
            sonic-cfggen -p /usr/share/sonic/device/x86_64-kvm_x86_64-r0/SONiC-VM/port_config.ini -k SONiC-VM --print-data
            | jq '.PORT[].admin_status |= "up"'
            > config-port.json
    when: '"hwsku" not in configuration[hostname]'

  - name: create topo config
    template: src="configdb.j2"
              dest=config-topo.json

  - name: create config db json
    shell: |
            set -e
            sonic-cfggen -j config-mgmt.json -j config-metadata.json -j config-port.json -j config-topo.json --print-data > /etc/sonic/config_db.json
            rm -f config-mgmt.json config-metadata.json config-port.json config-topo.json
    become: yes
    notify:
      - Update config db
      -  wait for SONiC update config db to finish
  when: hostname in configuration and "init_cfg_profile" not in configuration[hostname]

- name: Update config via provided json
  block:
    - name: Get playbook directory
      debug:
        msg: "The playbook dir {{ playbook_dir }}"
    - name: Load variables from vars/init_cfg_profiles.yml
      include_vars: "vars/init_cfg_profiles.yml"
    - name: set cfg_profile to {{ configuration[hostname].init_cfg_profile }}
      set_fact:
        cfg_profile: "{{ configuration[hostname].init_cfg_profile }}"
    - name: Set actual configuration value based on cfg_profile key
      set_fact:
        actual_config: "{{ lookup('vars', cfg_profile) }}"
    - name: Debug actual configuration value
      debug:
        msg: "The actual configuration value is: {{ actual_config }}"
    - name: Copy over config_db.json from file system
      copy :
        src: "{{ playbook_dir }}/{{ actual_config }}"
        dest: /tmp/config_db.json
    - name: Overwrite config_db.json
      shell: cat /tmp/config_db.json > /etc/sonic/config_db.json
      become: yes
      notify:
        - Update config db
        - wait for SONiC update config db to finish
  when: hostname in configuration and configuration[hostname]['init_cfg_profile'] is defined

- name: Load PTF image
  block:
    - copy: src="docker-ptf.tar" dest="docker-ptf.tar"
    - shell: docker load -i docker-ptf.tar || true
    - shell: rm -f docker-ptf.tar
  when: ptf_on_neighbor is defined and ptf_on_neighbor|bool == true
