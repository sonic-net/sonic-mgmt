"""
To support IPv6, we assigned IPv6 address to hosts in the inventory file.
The IPv6 address is generated by this script.
The conversion rule is:
    1. Setup map from Lab location, IPv4 prefix to IPv6 prefix
    2. Per assigned IPv4 address:
        a. Found IPv6 prefix
        b. Pick the first address of the IPv6 address
        c. Setting it to the last 32 bits of the IPv6 address to generate a new IPv6 address

Usage:
    python -m get_v6_addr_by_v4 -l <lab_location> -4 <ipv4_address>
Output:
    <ipv6_address>
Sample:
    bjw-can-serv-4:~$ python -m get_v6_addr_by_v4 -l bjw -4 10.150.22.128
    2404:f801:10:2200::a96:1680
"""

import argparse
import ipaddress
import sys


def convert_v4_addr_to_v6(lab_location, ipv4_addr):
    lab_ip_conf = {
        "bjw": {
            "0.0.0.0/0": "2404:f801:10:2200::/55"
        },
        "str": {
            "10.64.246.0/23": "2a01:111:e210:b000::/64",
            "10.3.146.0/24": "2a01:111:e210:3000::/64"
        },
        "svc": {
            "0.0.0.0/0": "2a01:111:e205:100::/64"
        }
    }
    if lab_location not in lab_ip_conf:
        sys.stderr.write("Unknown lab location: {}".format(lab_location))
        sys.exit(1)
    ip_map = lab_ip_conf[lab_location]
    ipv6_prefixes = [v for k, v in ip_map.items() if ipaddress.IPv4Address(ipv4_addr) in ipaddress.IPv4Network(k)]
    if len(ipv6_prefixes) == 0:
        sys.stderr.write("Unknown IPv4 address: {}".format(ipv4_addr))
        sys.exit(1)
    elif len(ipv6_prefixes) > 1:
        sys.stderr.write("Ambiguous IPv4 address: {}, there are more than one ipv6 prefixes mapped".format(ipv4_addr))
        sys.exit(1)

    v6_network = ipaddress.IPv6Network(ipv6_prefixes[0])
    v4_addr = ipaddress.IPv4Address(ipv4_addr)
    joint_ipv6_addr = ipaddress.IPv6Address(int(v6_network.network_address) | int(v4_addr))
    return str(joint_ipv6_addr)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-l',
        '--lab-location',
        help='The location of lab, like bjw, str and svc'
    )
    parser.add_argument(
        '-4',
        '--ipv4-addr',
        help='The IPv4 address to convert to IPv6'
    )
    args = parser.parse_args()
    ipv6_address = convert_v4_addr_to_v6(args.lab_location, args.ipv4_addr)
    sys.stdout.write(ipv6_address)
