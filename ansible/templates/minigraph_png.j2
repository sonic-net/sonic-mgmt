  <PngDec>
    <DeviceInterfaceLinks>
{% if card_type is not defined or card_type != 'supervisor' %}
{% for index in range(vms_number) %}
{% set vm_intfs=vm_topo_config['vm'][vms[index]]['intfs'][dut_index|int]|sort %}
{% set dut_intfs=vm_topo_config['vm'][vms[index]]['interface_indexes'][dut_index|int]|sort %}
{% for if_index in range(vm_intfs | length) %}
      <DeviceLinkBase>
        <ElementType>DeviceInterfaceLink</ElementType>
        <EndDevice>{{ vms[index] }}</EndDevice>
        <EndPort>{{ vm_intfs[if_index] }}</EndPort>
        <StartDevice>{{ inventory_hostname }}</StartDevice>
        <StartPort>{{ port_alias[dut_intfs[if_index]] }}</StartPort>
      </DeviceLinkBase>
{% endfor %}
{% endfor %}
{% if 'console_interfaces' in vm_topo_config %}
{% if vm_topo_config['console_interfaces'] | length > 0 %}
{% for console_if in vm_topo_config['console_interfaces'] %}
      <DeviceLinkBase i:type="DeviceSerialLink">
        <ElementType>DeviceSerialLink</ElementType>
        <Bandwidth>{{ console_if['baud'] }}</Bandwidth>
        <ChassisInternal>false</ChassisInternal>
        <EndDevice>{{ inventory_hostname }}</EndDevice>
        <EndPort>{{ console_if['line'] }}</EndPort>
        <FlowControl>{{ console_if['flow_control'] }}</FlowControl>
        <StartDevice>Terminal{{ console_if['line'] }}</StartDevice>
        <StartPort>console</StartPort>
        <Validate>true</Validate>
        <TcpPortName>{{ console_if['line'] + 2000 }}</TcpPortName>
      </DeviceLinkBase>
{% endfor %}
{% endif %}
{% endif %}
{% if vm_topo_config['host_interfaces_by_dut'][dut_index|int] | length > 0 %}
{% for host_index in range(vlan_intfs | length) %}
      <DeviceLinkBase>
        <ElementType>DeviceInterfaceLink</ElementType>
        <EndDevice>{{ inventory_hostname }}</EndDevice>
        <EndPort>{{ vlan_intfs[host_index] }}</EndPort>
        <StartDevice>Servers{{ host_index }}</StartDevice>
        <StartPort>eth0</StartPort>
      </DeviceLinkBase>
{% endfor %}
{% if 'dualtor' in topo %}
{% set cable_position = 'U' if inventory_hostname == dual_tor_facts['positions']['upper'] else 'L' %}
{% for cable in dual_tor_facts['cables'] %}
      <DeviceLinkBase>
        <ElementType>LogicalLink</ElementType>
        <EndDevice>{{ inventory_hostname }}</EndDevice>
        <EndPort>{{ cable['dut_intf'] }}</EndPort>
        <StartDevice>{{ cable['hostname'] }}</StartDevice>
        <StartPort>{{ cable_position }}</StartPort>
      </DeviceLinkBase>
{% endfor %}
{% endif %}
{% endif %}
{% for asic in asic_topo_config %}
{% for neigh_asic in  asic_topo_config[asic]['neigh_asic'] %}
{% for intf in asic_topo_config[asic]['neigh_asic'][neigh_asic]['intfs'][0] | sort %}
      <DeviceLinkBase i:type="DeviceInterfaceLink">
        <ElementType>DeviceInterfaceLink</ElementType>
        <Bandwidth>40000</Bandwidth>
        <ChassisInternal>true</ChassisInternal>
        <EndDevice>{{ neigh_asic }}</EndDevice>
        <EndPort>{{ intf }}</EndPort>
        <FlowControl>true</FlowControl>
        <StartDevice>{{ asic }}</StartDevice>
        <StartPort>{{ asic_topo_config[asic]['neigh_asic'][neigh_asic]['asic_intfs'][0][loop.index-1] }}</StartPort>
        <Validate>true</Validate>
      </DeviceLinkBase>
{% endfor %}
{% endfor %}
{% endfor %}
{% if switch_type is not defined or switch_type != "voq" %}
{% for asic_intf in front_panel_asic_ifnames %}
      <DeviceLinkBase i:type="DeviceInterfaceLink">
        <ElementType>DeviceInterfaceLink</ElementType>
        <Bandwidth>{{ port_speed[port_alias[loop.index - 1]] }}</Bandwidth>
        <ChassisInternal>true</ChassisInternal>
        <EndDevice>{{ asic_intf.split('-')[1] }}</EndDevice>
        <EndPort>{{ asic_intf }}</EndPort>
        <FlowControl>true</FlowControl>
        <StartDevice>{{ inventory_hostname }}</StartDevice>
        <StartPort>{{ port_alias[loop.index - 1] }}</StartPort>
        <Validate>true</Validate>
      </DeviceLinkBase>
{% endfor %}
{% endif %}
{% endif %}
    </DeviceInterfaceLinks>
    <Devices>
      <Device i:type="{{ vm_topo_config['dut_type'] }}">
        <Hostname>{{ inventory_hostname }}</Hostname>
        <HwSku>{{ hwsku }}</HwSku>
{% if 'loopback' in dual_tor_facts %}
        <Address xmlns:a="Microsoft.Search.Autopilot.NetMux">
          <a:IPPrefix>{{ dual_tor_facts['loopback'][inventory_hostname]['ipv4'] }}</a:IPPrefix>
        </Address>
        <AddressV6 xmlns:a="Microsoft.Search.Autopilot.NetMux">
          <a:IPPrefix>{{ dual_tor_facts['loopback'][inventory_hostname]['ipv6'] }}</a:IPPrefix>
        </AddressV6>
{% endif %}
        <ManagementAddress xmlns:a="Microsoft.Search.Autopilot.NetMux">
           <a:IPPrefix>{{ ansible_host }}</a:IPPrefix>
        </ManagementAddress>
{% if vm_topo_config['dut_type'] in ['BackEndToRRouter', 'BackEndLeafRouter'] and 'dut_cluster' in vm_topo_config %}
	      <ClusterName>{{ vm_topo_config['dut_cluster'] }}</ClusterName>
{% endif %}
      </Device>
{% if 'neighbor' in dual_tor_facts %}
{% set neighbor_hostname = dual_tor_facts['neighbor']['hostname'] %}
      <Device i:type="{{ vm_topo_config['dut_type'] }}">
        <Hostname>{{ neighbor_hostname }}</Hostname>
        <HwSku>{{ dual_tor_facts['neighbor']['hwsku'] }}</HwSku>
{% if 'loopback' in dual_tor_facts %}
        <Address xmlns:a="Microsoft.Search.Autopilot.NetMux">
          <a:IPPrefix>{{ dual_tor_facts['loopback'][neighbor_hostname]['ipv4'] }}</a:IPPrefix>
        </Address>
        <AddressV6 xmlns:a="Microsoft.Search.Autopilot.NetMux">
          <a:IPPrefix>{{ dual_tor_facts['loopback'][neighbor_hostname]['ipv6'] }}</a:IPPrefix>
        </AddressV6>
{% endif %}
        <ManagementAddress xmlns:a="Microsoft.Search.Autopilot.NetMux">
           <a:IPPrefix>{{ dual_tor_facts['neighbor']['ip'] }}</a:IPPrefix>
        </ManagementAddress>
      </Device>
{% endif %}
{% if 'cables' in dual_tor_facts %}
{% set server_base_address_v4 = (vlan_configs.values() | list)[0]['prefix'] %}
{% set server_base_address_v4 = server_base_address_v4 | ipaddr('network') %}
{% set server_base_address_v4 = '.'.join(server_base_address_v4.split('.')[:-1]) + '.{}' %}
{% set server_base_address_v6 = (vlan_configs.values() | list)[0]['prefix_v6'] %}
{% set server_base_address_v6 = server_base_address_v6 | ipaddr('network') %}
{% set server_base_address_v6 = ':'.join(server_base_address_v6.split(':')[:-1]) + ':{:x}' %}
{% for cable in dual_tor_facts['cables'] %}
      <Device i:type="SmartCable">
        <ElementType>SmartCable</ElementType>
        <Address xmlns:d5p1="Microsoft.Search.Autopilot.NetMux">
          <d5p1:IPPrefix>0.0.0.0/0</d5p1:IPPrefix>
        </Address>
        <AddressV6 xmlns:d5p1="Microsoft.Search.Autopilot.NetMux">
          <d5p1:IPPrefix>::/0</d5p1:IPPrefix>
        </AddressV6>
        <ManagementAddress xmlns:d5p1="Microsoft.Search.Autopilot.NetMux">
          <d5p1:IPPrefix>0.0.0.0/0</d5p1:IPPrefix>
        </ManagementAddress>
        <ManagementAddressV6 xmlns:d5p1="Microsoft.Search.Autopilot.NetMux">
          <d5p1:IPPrefix>::/0</d5p1:IPPrefix>
        </ManagementAddressV6>
        <SerialNumber i:nil="true" />
        <Hostname>{{ cable['hostname'] }}</Hostname>
      </Device>
      <Device i:type="Server">
        <ElementType>Server</ElementType>
        <Address xmlns:d5p1="Microsoft.Search.Autopilot.NetMux">
          <d5p1:IPPrefix>{{ server_base_address_v4.format(loop.index + 1) }}/26</d5p1:IPPrefix>
        </Address> 
        <AddressV6 xmlns:d5p1="Microsoft.Search.Autopilot.NetMux">
          <d5p1:IPPrefix>{{ server_base_address_v6.format(loop.index + 1) }}/96</d5p1:IPPrefix>
        </AddressV6>
        <ManagementAddress xmlns:d5p1="Microsoft.Search.Autopilot.NetMux">
          <d5p1:IPPrefix>0.0.0.0/0</d5p1:IPPrefix>
        </ManagementAddress>
        <Hostname>Servers{{ loop.index - 1 }}</Hostname>
      </Device>
{% endfor %}
{% endif %}
{% if VM_topo %}
{% for dev in neighbor_eosvm_mgmt %}
{% if vm_topo_config['vm'][dev]['intfs'][dut_index|int]|length %}
{% if 'properties' in vm_topo_config['vm'][dev] and 'device_type' in vm_topo_config['vm'][dev]['properties'] %}
{% set dev_type = vm_topo_config['vm'][dev]['properties']['device_type'] %}
{% elif 'T1' in dev %}
{% set dev_type = 'LeafRouter' %}
{% elif 'T2' in dev %}
{% set dev_type = 'SpineRouter' %}
{% elif 'T3' in dev %}
{% set dev_type = 'CoreRouter' %}
{% elif 'T0' in dev %}
{% set dev_type = 'ToRRouter' %}
{% else %}
{% set dev_ytpe = 'Unknown' %}
{% endif %}
      <Device i:type="{{ dev_type }}">
         <Hostname>{{ dev }}</Hostname>
         <ManagementAddress xmlns:a="Microsoft.Search.Autopilot.NetMux">
           <a:IPPrefix>{{ neighbor_eosvm_mgmt[dev] }}</a:IPPrefix>
         </ManagementAddress>
         <HwSku>Arista-VM</HwSku>
      </Device>
{% endif %}
{% endfor %}
{% endif %}
{% for asic in asic_topo_config %}
      <Device i:type="Asic">
        <ElementType>Asic</ElementType>
        <Address xmlns:a="Microsoft.Search.Autopilot.NetMux">
          <a:IPPrefix>0.0.0.0/0</a:IPPrefix>
        </Address>
        <AddressV6 xmlns:a="Microsoft.Search.Autopilot.NetMux">
          <a:IPPrefix>::/0</a:IPPrefix>
        </AddressV6>
        <AssociatedClustersStr/>
        <AssociatedSliceStr/>
        <AssociatedTagsStr/>
        <ClusterName/>
        <DeploymentId i:nil="true"/>
        <DeviceLocation i:nil="true"/>
        <HomeDatacenter i:nil="true"/>
        <ManagementAddress xmlns:a="Microsoft.Search.Autopilot.NetMux">
          <a:IPPrefix>0.0.0.0/0</a:IPPrefix>
        </ManagementAddress>
        <ManagementAddressV6 xmlns:a="Microsoft.Search.Autopilot.NetMux">
          <a:IPPrefix>::/0</a:IPPrefix>
        </ManagementAddressV6>
        <SerialNumber i:nil="true"/>
        <Hostname>{{ asic }}</Hostname>
        <HwSku>Broadcom-Trident2</HwSku>
      </Device>
{% endfor %}
{% if num_asics > 1 and switch_type is defined and switch_type == 'voq' %}
{% for asic_index in range(num_asics) %}
{% set asic_name = "ASIC" + asic_index|string %}
      <Device i:type="Asic">
        <ElementType>Asic</ElementType>
        <Hostname>{{ asic_name }}</Hostname>
      </Device>
{% endfor %}
{% endif %}
{% for asic in fabric_info %}
      <Device i:type="Asic">
        <Hostname>{{ asic['asicname'] }}</Hostname>
      </Device>
{% endfor %}
    </Devices>
  </PngDec>

