  <PngDec>
    <DeviceInterfaceLinks>
{% for index in range(vms_number) %}
{% set vm_intfs=vm_topo_config['vm'][vms[index]]['intfs'][dut_index|int]|sort %}
{% set dut_intfs=vm_topo_config['vm'][vms[index]]['interface_indexes'][dut_index|int]|sort %}
{% for if_index in range(vm_intfs | length) %}
      <DeviceLinkBase>
        <ElementType>DeviceInterfaceLink</ElementType>
        <EndDevice>{{ vms[index] }}</EndDevice>
        <EndPort>{{ vm_intfs[if_index] }}</EndPort>
        <StartDevice>{{ inventory_hostname }}</StartDevice>
        <StartPort>{{ port_alias[dut_intfs[if_index]] }}</StartPort>
      </DeviceLinkBase>
{% endfor %}
{% endfor %}
{% if vm_topo_config['host_interfaces_by_dut'][dut_index|int] | length > 0 %}
{% for host_index in range(vlan_intfs | length) %}
      <DeviceLinkBase>
        <ElementType>DeviceInterfaceLink</ElementType>
        <EndDevice>{{ inventory_hostname }}</EndDevice>
        <EndPort>{{ vlan_intfs[host_index] }}</EndPort>
        <StartDevice>Servers{{ host_index }}</StartDevice>
        <StartPort>eth0</StartPort>
      </DeviceLinkBase>
{% endfor %}
{% if 'dualtor' in topo %}
{% set cable_position = 'U' if inventory_hostname == dual_tor_facts['positions']['upper'] else 'L' %}
{% for cable in dual_tor_facts['cables'] %}
      <DeviceLinkBase>
        <ElementType>LogicalLink</ElementType>
        <EndDevice>{{ inventory_hostname }}</EndDevice>
        <EndPort>{{ cable['dut_intf'] }}</EndPort>
        <StartDevice>{{ cable['hostname'] }}</StartDevice>
        <StartPort>{{ cable_position }}</StartPort>
      </DeviceLinkBase>
{% endfor %}
{% endif %}
{% endif %}
    </DeviceInterfaceLinks>
    <Devices>
      <Device i:type="{{ vm_topo_config['dut_type'] }}">
        <Hostname>{{ inventory_hostname }}</Hostname>
        <HwSku>{{ hwsku }}</HwSku>
{% if 'loopback' in dual_tor_facts %}
        <Address xmlns:a="Microsoft.Search.Autopilot.NetMux">
          <a:IPPrefix>{{ dual_tor_facts['loopback'][inventory_hostname]['ipv4'] }}</a:IPPrefix>
        </Address>
        <AddressV6 xmlns:a="Microsoft.Search.Autopilot.NetMux">
          <a:IPPrefix>{{ dual_tor_facts['loopback'][inventory_hostname]['ipv6'] }}</a:IPPrefix>
        </AddressV6>
{% endif %}
        <ManagementAddress xmlns:a="Microsoft.Search.Autopilot.NetMux">
           <a:IPPrefix>{{ ansible_host }}</a:IPPrefix>
        </ManagementAddress>
      </Device>
{% if 'neighbor' in dual_tor_facts %}
{% set neighbor_hostname = dual_tor_facts['neighbor']['hostname'] %}
      <Device i:type="{{ vm_topo_config['dut_type'] }}">
        <Hostname>{{ neighbor_hostname }}</Hostname>
        <HwSku>{{ dual_tor_facts['neighbor']['hwsku'] }}</HwSku>
{% if 'loopback' in dual_tor_facts %}
        <Address xmlns:a="Microsoft.Search.Autopilot.NetMux">
          <a:IPPrefix>{{ dual_tor_facts['loopback'][neighbor_hostname]['ipv4'] }}</a:IPPrefix>
        </Address>
        <AddressV6 xmlns:a="Microsoft.Search.Autopilot.NetMux">
          <a:IPPrefix>{{ dual_tor_facts['loopback'][neighbor_hostname]['ipv6'] }}</a:IPPrefix>
        </AddressV6>
{% endif %}
        <ManagementAddress xmlns:a="Microsoft.Search.Autopilot.NetMux">
           <a:IPPrefix>{{ dual_tor_facts['neighbor']['ip'] }}</a:IPPrefix>
        </ManagementAddress>
      </Device>
{% endif %}
{% if 'cables' in dual_tor_facts %}
{% set server_base_address_v4 = (vlan_configs.values() | list)[0]['prefix'] %}
{% set server_base_address_v4 = server_base_address_v4 | ipaddr('network') %}
{% set server_base_address_v4 = '.'.join(server_base_address_v4.split('.')[:-1]) + '.{}' %}
{% set server_base_address_v6 = (vlan_configs.values() | list)[0]['prefix_v6'] %}
{% set server_base_address_v6 = server_base_address_v6 | ipaddr('network') %}
{% set server_base_address_v6 = ':'.join(server_base_address_v6.split(':')[:-1]) + ':{}' %}
{% for cable in dual_tor_facts['cables'] %}
      <Device i:type="SmartCable">
        <ElementType>SmartCable</ElementType>
        <Address xmlns:d5p1="Microsoft.Search.Autopilot.NetMux">
          <d5p1:IPPrefix>0.0.0.0/0</d5p1:IPPrefix>
        </Address>
        <AddressV6 xmlns:d5p1="Microsoft.Search.Autopilot.NetMux">
          <d5p1:IPPrefix>::/0</d5p1:IPPrefix>
        </AddressV6>
        <ManagementAddress xmlns:d5p1="Microsoft.Search.Autopilot.NetMux">
          <d5p1:IPPrefix>0.0.0.0/0</d5p1:IPPrefix>
        </ManagementAddress>
        <ManagementAddressV6 xmlns:d5p1="Microsoft.Search.Autopilot.NetMux">
          <d5p1:IPPrefix>::/0</d5p1:IPPrefix>
        </ManagementAddressV6>
        <SerialNumber i:nil="true" />
        <Hostname>{{ cable['hostname'] }}</Hostname>
      </Device>
      <Device i:type="Server">
        <ElementType>Server</ElementType>
        <Address xmlns:d5p1="Microsoft.Search.Autopilot.NetMux">
          <d5p1:IPPrefix>{{ server_base_address_v4.format(loop.index + 1) }}/26</d5p1:IPPrefix>
        </Address> 
        <AddressV6 xmlns:d5p1="Microsoft.Search.Autopilot.NetMux">
          <d5p1:IPPrefix>{{ server_base_address_v6.format(loop.index + 1) }}/96</d5p1:IPPrefix>
        </AddressV6>
        <ManagementAddress xmlns:d5p1="Microsoft.Search.Autopilot.NetMux">
          <d5p1:IPPrefix>0.0.0.0/0</d5p1:IPPrefix>
        </ManagementAddress>
        <Hostname>Servers{{ loop.index - 1 }}</Hostname>
      </Device>
{% endfor %}
{% endif %}
{% if VM_topo %}
{% for dev in neighbor_eosvm_mgmt %}
{% if vm_topo_config['vm'][dev]['intfs'][dut_index|int]|length %}
{% if 'T1' in dev %}
{% set dev_type = 'LeafRouter' %}
{% elif 'T2' in dev %}
{% set dev_type = 'SpineRouter' %}
{% elif 'T3' in dev %}
{% set dev_type = 'CoreRouter' %}
{% elif 'T0' in dev %}
{% set dev_type = 'ToRRouter' %}
{% else %}
{% set dev_ytpe = 'Unknown' %}
{% endif %}
      <Device i:type="{{ dev_type }}">
         <Hostname>{{ dev }}</Hostname>
         <ManagementAddress xmlns:a="Microsoft.Search.Autopilot.NetMux">
           <a:IPPrefix>{{ neighbor_eosvm_mgmt[dev] }}</a:IPPrefix>
         </ManagementAddress>
         <HwSku>Arista-VM</HwSku>
      </Device>
{% endif %}
{% endfor %}
{% endif %}
    </Devices>
  </PngDec>

