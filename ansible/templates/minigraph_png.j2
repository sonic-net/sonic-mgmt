  <PngDec>
    <DeviceInterfaceLinks>
{% if card_type is not defined or card_type != 'supervisor' %}
{% for index in range(vms_number) %}
{% set vm_intfs=vm_topo_config['vm'][vms[index]]['intfs'][dut_index|int]|sort %}
{% set dut_intfs=vm_topo_config['vm'][vms[index]]['interface_indexes'][dut_index|int]|sort %}
{% for if_index in range(vm_intfs | length) %}
      <DeviceLinkBase>
        <ElementType>DeviceInterfaceLink</ElementType>
        <EndDevice>{{ vms[index] }}</EndDevice>
        <EndPort>{{ vm_intfs[if_index] }}</EndPort>
        <StartDevice>{{ inventory_hostname }}</StartDevice>
        <StartPort>{{ port_alias[dut_intfs[if_index]] }}</StartPort>
{% if device_conn[inventory_hostname][port_alias_map[port_alias[dut_intfs[if_index]]]] is defined %}
        <Bandwidth>{{ device_conn[inventory_hostname][port_alias_map[port_alias[dut_intfs[if_index]]]]['speed'] }}</Bandwidth>
{% endif %}
      </DeviceLinkBase>
{% endfor %}
{% endfor %}
{% if 'console_interfaces' in vm_topo_config %}
{% if vm_topo_config['console_interfaces'] | length > 0 %}
{% for console_if in vm_topo_config['console_interfaces'] %}
      <DeviceLinkBase i:type="DeviceSerialLink">
        <ElementType>DeviceSerialLink</ElementType>
        <Bandwidth>{{ console_if['baud'] }}</Bandwidth>
        <ChassisInternal>false</ChassisInternal>
        <EndDevice>{{ inventory_hostname }}</EndDevice>
        <EndPort>{{ console_if['line'] }}</EndPort>
        <FlowControl>{{ console_if['flow_control'] }}</FlowControl>
        <StartDevice>Terminal{{ console_if['line'] }}</StartDevice>
        <StartPort>console</StartPort>
        <Validate>true</Validate>
        <TcpPortName>{{ console_if['line'] + 2000 }}</TcpPortName>
      </DeviceLinkBase>
{% endfor %}
{% endif %}
{% endif %}
{% if vm_topo_config['host_interfaces_by_dut'][dut_index|int] | length > 0 %}
{% for host_index in range(vlan_intfs | length) %}
      <DeviceLinkBase>
        <ElementType>DeviceInterfaceLink</ElementType>
        <EndDevice>{{ inventory_hostname }}</EndDevice>
        <EndPort>{{ vlan_intfs[host_index] }}</EndPort>
        <StartDevice>Servers{{ host_index }}</StartDevice>
        <StartPort>eth0</StartPort>
      </DeviceLinkBase>
{% endfor %}
{% if 'dualtor' in topo %}
{% set cable_position = 'U' if inventory_hostname == dual_tor_facts['positions']['upper'] else 'L' %}
{% set mux_cable_facts = dual_tor_facts['mux_cable_facts'] if 'mux_cable_facts' in dual_tor_facts %}
{% for cable in dual_tor_facts['cables'] %}
{% set intf_index = port_alias.index(cable['dut_intf'])|string %}
{% if mux_cable_facts is not defined or mux_cable_facts[intf_index]['cable_type'] == 'active-standby' %}
      <DeviceLinkBase>
        <ElementType>LogicalLink</ElementType>
        <EndDevice>{{ inventory_hostname }}</EndDevice>
        <EndPort>{{ cable['dut_intf'] }}</EndPort>
        <StartDevice>{{ cable['hostname'] }}</StartDevice>
        <StartPort>{{ cable_position }}</StartPort>
      </DeviceLinkBase>
{% endif %}
{% endfor %}
{% endif %}
{% endif %}
{% if ((asic_topo_config and slot_num is defined and slot_num in asic_topo_config) or (asic_topo_config and slot_num is not defined)) %}
{% for asic,asic_config in asic_topo_config[slot_num|default('slot0')].items() %}
{% for neigh_asic in  asic_config['neigh_asic'] %}
{% for intf in asic_config['neigh_asic'][neigh_asic]['intfs'][0] | sort %}
      <DeviceLinkBase i:type="DeviceInterfaceLink">
        <ElementType>DeviceInterfaceLink</ElementType>
{% if switch_type is not defined %}
        <Bandwidth>40000</Bandwidth>
{% endif %}
        <ChassisInternal>true</ChassisInternal>
        <EndDevice>{{ neigh_asic }}</EndDevice>
        <EndPort>{{ intf }}</EndPort>
        <FlowControl>true</FlowControl>
        <StartDevice>{{ asic }}</StartDevice>
        <StartPort>{{ asic_config['neigh_asic'][neigh_asic]['asic_intfs'][0][loop.index-1] }}</StartPort>
        <Validate>true</Validate>
      </DeviceLinkBase>
{% endfor %}
{% endfor %}
{% endfor %}
{% endif %}
{% for if_index in range(front_panel_asic_ifnames | length) %}
      <DeviceLinkBase i:type="DeviceInterfaceLink">
        <ElementType>DeviceInterfaceLink</ElementType>
{% if port_alias[loop.index - 1] in port_speed %}
        <Bandwidth>{{ port_speed[port_alias[loop.index - 1]] }}</Bandwidth>
{% else %}
        <Bandwidth>40000</Bandwidth>
{% endif %}
        <ChassisInternal>true</ChassisInternal>
        <EndDevice>{{ front_panel_asic_ifs_asic_id[if_index] }}</EndDevice>
        <EndPort>{{ front_panel_asic_ifnames[if_index] }}</EndPort>
        <FlowControl>true</FlowControl>
        <StartDevice>{{ inventory_hostname }}</StartDevice>
        <StartPort>{{ port_alias[loop.index - 1] }}</StartPort>
        <Validate>true</Validate>
      </DeviceLinkBase>
{% endfor %}
{% endif %}
    </DeviceInterfaceLinks>
    <Devices>
      <Device i:type="{{ vm_topo_config['dut_type'] }}">
        <Hostname>{{ inventory_hostname }}</Hostname>
        <HwSku>{{ hwsku }}</HwSku>
{% if 'loopback' in dual_tor_facts %}
        <Address xmlns:a="Microsoft.Search.Autopilot.NetMux">
          <a:IPPrefix>{{ dual_tor_facts['loopback'][inventory_hostname]['ipv4'] }}</a:IPPrefix>
        </Address>
        <AddressV6 xmlns:a="Microsoft.Search.Autopilot.NetMux">
          <a:IPPrefix>{{ dual_tor_facts['loopback'][inventory_hostname]['ipv6'] }}</a:IPPrefix>
        </AddressV6>
{% endif %}
        <ManagementAddress xmlns:a="Microsoft.Search.Autopilot.NetMux">
           <a:IPPrefix>{{ ansible_host }}</a:IPPrefix>
        </ManagementAddress>
{% if vm_topo_config['dut_type'] in ['BackEndToRRouter', 'BackEndLeafRouter'] and 'dut_cluster' in vm_topo_config %}
	      <ClusterName>{{ vm_topo_config['dut_cluster'] }}</ClusterName>
{% endif %}
      </Device>
{% if 'neighbor' in dual_tor_facts %}
{% set neighbor_hostname = dual_tor_facts['neighbor']['hostname'] %}
      <Device i:type="{{ vm_topo_config['dut_type'] }}">
        <Hostname>{{ neighbor_hostname }}</Hostname>
        <HwSku>{{ dual_tor_facts['neighbor']['hwsku'] }}</HwSku>
{% if 'loopback' in dual_tor_facts %}
        <Address xmlns:a="Microsoft.Search.Autopilot.NetMux">
          <a:IPPrefix>{{ dual_tor_facts['loopback'][neighbor_hostname]['ipv4'] }}</a:IPPrefix>
        </Address>
        <AddressV6 xmlns:a="Microsoft.Search.Autopilot.NetMux">
          <a:IPPrefix>{{ dual_tor_facts['loopback'][neighbor_hostname]['ipv6'] }}</a:IPPrefix>
        </AddressV6>
{% endif %}
        <ManagementAddress xmlns:a="Microsoft.Search.Autopilot.NetMux">
           <a:IPPrefix>{{ dual_tor_facts['neighbor']['ip'] }}</a:IPPrefix>
        </ManagementAddress>
      </Device>
{% endif %}
{% if 'cables' in dual_tor_facts %}
{% for cable in dual_tor_facts['cables'] %}
{% set intf_index = port_alias.index(cable['dut_intf'])|string %}
      <Device i:type="SmartCable">
        <ElementType>SmartCable</ElementType>
        <Address xmlns:d5p1="Microsoft.Search.Autopilot.NetMux">
          <d5p1:IPPrefix>0.0.0.0/0</d5p1:IPPrefix>
        </Address>
        <AddressV6 xmlns:d5p1="Microsoft.Search.Autopilot.NetMux">
          <d5p1:IPPrefix>::/0</d5p1:IPPrefix>
        </AddressV6>
        <ManagementAddress xmlns:d5p1="Microsoft.Search.Autopilot.NetMux">
          <d5p1:IPPrefix>0.0.0.0/0</d5p1:IPPrefix>
        </ManagementAddress>
        <ManagementAddressV6 xmlns:d5p1="Microsoft.Search.Autopilot.NetMux">
          <d5p1:IPPrefix>::/0</d5p1:IPPrefix>
        </ManagementAddressV6>
        <SerialNumber i:nil="true" />
        <Hostname>{{ cable['hostname'] }}</Hostname>
      </Device>
      <Device i:type="Server">
        <ElementType>Server</ElementType>
        <Address xmlns:d5p1="Microsoft.Search.Autopilot.NetMux">
          <d5p1:IPPrefix>{{ dual_tor_facts['mux_cable_facts'][intf_index]['server_ipv4'].split('/')[0] }}/26</d5p1:IPPrefix>
        </Address>
        <AddressV6 xmlns:d5p1="Microsoft.Search.Autopilot.NetMux">
          <d5p1:IPPrefix>{{ dual_tor_facts['mux_cable_facts'][intf_index]['server_ipv6'].split('/')[0] }}/96</d5p1:IPPrefix>
        </AddressV6>
        <ManagementAddress xmlns:d5p1="Microsoft.Search.Autopilot.NetMux">
          <d5p1:IPPrefix>0.0.0.0/0</d5p1:IPPrefix>
        </ManagementAddress>
        <Hostname>Servers{{ loop.index - 1 }}</Hostname>
      </Device>
{% endfor %}
{% endif %}
{% if VM_topo %}
{% for dev in neighbor_eosvm_mgmt %}
{% if vm_topo_config['vm'][dev]['intfs'][dut_index|int]|length %}
{% if 'properties' in vm_topo_config['vm'][dev] and 'device_type' in vm_topo_config['vm'][dev]['properties'] %}
{% set dev_type = vm_topo_config['vm'][dev]['properties']['device_type'] %}
{% elif 'T1' in dev %}
{% set dev_type = 'LeafRouter' %}
{% elif 'T2' in dev %}
{% set dev_type = 'SpineRouter' %}
{% elif 'T3' in dev %}
{% if loop.index|int % 2 %}
{% set dev_type = 'RegionalHub' %}
{% else %}
{% set dev_type = 'AZNGHub' %}
{% endif %}
{% elif 'T0' in dev %}
{% set dev_type = 'ToRRouter' %}
{% elif 'M1' in dev %}
{% set dev_type = 'MgmtLeafRouter' %}
{% elif 'MX' in dev %}
{% set dev_type = 'BmcMgmtToRRouter' %}
{% elif 'M0' in dev %}
{% set dev_type = 'MgmtToRRouter' %}
{% else %}
{% set dev_type = 'Unknown' %}
{% endif %}
      <Device i:type="{{ dev_type }}">
         <Hostname>{{ dev }}</Hostname>
         <ManagementAddress xmlns:a="Microsoft.Search.Autopilot.NetMux">
           <a:IPPrefix>{{ neighbor_eosvm_mgmt[dev] }}</a:IPPrefix>
         </ManagementAddress>
         <HwSku>Arista-VM</HwSku>
      </Device>
{% endif %}
{% endfor %}
{% endif %}
{% if num_asics > 1 %}
{% for asic_index in range(num_asics) %}
{% set asic_name = "ASIC" + asic_index|string %}
      <Device i:type="Asic">
        <ElementType>Asic</ElementType>
        <Address xmlns:a="Microsoft.Search.Autopilot.NetMux">
          <a:IPPrefix>0.0.0.0/0</a:IPPrefix>
        </Address>
        <AddressV6 xmlns:a="Microsoft.Search.Autopilot.NetMux">
          <a:IPPrefix>::/0</a:IPPrefix>
        </AddressV6>
        <AssociatedClustersStr/>
        <AssociatedSliceStr/>
        <AssociatedTagsStr/>
        <ClusterName/>
        <DeploymentId i:nil="true"/>
        <DeviceLocation i:nil="true"/>
        <HomeDatacenter i:nil="true"/>
        <ManagementAddress xmlns:a="Microsoft.Search.Autopilot.NetMux">
          <a:IPPrefix>0.0.0.0/0</a:IPPrefix>
        </ManagementAddress>
        <ManagementAddressV6 xmlns:a="Microsoft.Search.Autopilot.NetMux">
          <a:IPPrefix>::/0</a:IPPrefix>
        </ManagementAddressV6>
        <SerialNumber i:nil="true"/>
        <Hostname>{{ asic_name }}</Hostname>
        <HwSku>Broadcom-Trident2</HwSku>
      </Device>
{% endfor %}
{% endif %}
{% for asic in fabric_info %}
      <Device i:type="Asic">
        <Hostname>{{ asic['asicname'] }}</Hostname>
      </Device>
{% endfor %}
    </Devices>
  </PngDec>
