  <CpgDec>
    <IsisRouters xmlns:a="http://schemas.datacontract.org/2004/07/Microsoft.Search.Autopilot.Evolution"/>
    <PeeringSessions>
{% if card_type is not defined or card_type != 'supervisor' %}
{% for index in range(vms_number) %}
{% set vm=vms[index] %}
{% if vm_topo_config['vm'][vm]['peer_ipv4'][dut_index|int] %}
      <BGPSession>
        <MacSec>false</MacSec>
        <StartRouter>{{ inventory_hostname }}</StartRouter>
        <StartPeer>{{ vm_topo_config['vm'][vm]['bgp_ipv4'][dut_index|int] }}</StartPeer>
        <EndRouter>{{ vm }}</EndRouter>
        <EndPeer>{{ vm_topo_config['vm'][vm]['peer_ipv4'][dut_index|int] }}</EndPeer>
        <Multihop>1</Multihop>
        <HoldTime>10</HoldTime>
        <KeepAliveTime>3</KeepAliveTime>
      </BGPSession>
{% if vm_asic_ifnames is defined %}
      <BGPSession>
        <MacSec>false</MacSec>
        <StartRouter>{{ vm_asic_ifnames[vm][0].split('-')[1] }}</StartRouter>
        <StartPeer>{{ vm_topo_config['vm'][vm]['bgp_ipv4'][dut_index|int] }}</StartPeer>
        <EndRouter>{{ vm }}</EndRouter>
        <EndPeer>{{ vm_topo_config['vm'][vm]['peer_ipv4'][dut_index|int] }}</EndPeer>
        <Multihop>1</Multihop>
        <HoldTime>10</HoldTime>
        <KeepAliveTime>3</KeepAliveTime>
      </BGPSession>
{% endif %}
{% endif %}
{% if vm_topo_config['vm'][vm]['peer_ipv6'][dut_index|int] %}
      <BGPSession>
        <StartRouter>{{ inventory_hostname }}</StartRouter>
        <StartPeer>{{ vm_topo_config['vm'][vm]['bgp_ipv6'][dut_index|int] }}</StartPeer>
        <EndRouter>{{ vm }}</EndRouter>
        <EndPeer>{{ vm_topo_config['vm'][vm]['peer_ipv6'][dut_index|int] }}</EndPeer>
        <Multihop>1</Multihop>
        <HoldTime>10</HoldTime>
        <KeepAliveTime>3</KeepAliveTime>
      </BGPSession>
{% if vm_asic_ifnames is defined %}
      <BGPSession>
        <StartRouter>{{ vm_asic_ifnames[vm][0].split('-')[1] }}</StartRouter>
        <StartPeer>{{ vm_topo_config['vm'][vm]['bgp_ipv6'][dut_index|int] }}</StartPeer>
        <EndRouter>{{ vm }}</EndRouter>
        <EndPeer>{{ vm_topo_config['vm'][vm]['peer_ipv6'][dut_index|int] }}</EndPeer>
        <Multihop>1</Multihop>
        <HoldTime>10</HoldTime>
        <KeepAliveTime>3</KeepAliveTime>
      </BGPSession>
{% endif %}
{% endif %}
{% endfor %}
{% for asic in asic_topo_config %}
{% for neigh_asic in  asic_topo_config[asic]['neigh_asic'] %}
{% if asic_topo_config[asic]['neigh_asic'][neigh_asic]['peer_ipv4'][0] %}
      <BGPSession>
        <MacSec>false</MacSec>
        <StartRouter>{{ asic }}</StartRouter>
        <StartPeer>{{ asic_topo_config[asic]['neigh_asic'][neigh_asic]['bgp_ipv4'][0] }}</StartPeer>
        <EndRouter>{{ neigh_asic }}</EndRouter>
        <EndPeer>{{ asic_topo_config[asic]['neigh_asic'][neigh_asic]['peer_ipv4'][0] }}</EndPeer>
        <Multihop>1</Multihop>
        <HoldTime>0</HoldTime>
        <KeepAliveTime>0</KeepAliveTime>
      </BGPSession>
{% endif %}
{% if asic_topo_config[asic]['neigh_asic'][neigh_asic]['peer_ipv6'][0] %}
      <BGPSession>
        <StartRouter>{{ asic }}</StartRouter>
        <StartPeer>{{ asic_topo_config[asic]['neigh_asic'][neigh_asic]['bgp_ipv6'][0] }}</StartPeer>
        <EndRouter>{{ neigh_asic }}</EndRouter>
        <EndPeer>{{ asic_topo_config[asic]['neigh_asic'][neigh_asic]['peer_ipv6'][0] }}</EndPeer>
        <Multihop>1</Multihop>
        <HoldTime>0</HoldTime>
        <KeepAliveTime>0</KeepAliveTime>
      </BGPSession>
{% endif %}
{% endfor %} 
{% endfor %}
{% endif %}
{% if switch_type is defined and switch_type == 'voq' %}
{% set voq_peers = dict() %}
{% for asic_id in range(num_asics) %}
{% if num_asics == 1 %}
{% set start_rtr = inventory_hostname %}
{% else %}
{% set start_rtr = "ASIC" + asic_id|string %}
{% endif %}
{% for a_linecard in all_inbands %}
{% for idx in range(all_inbands[a_linecard]|length) %}
{% if voq_inband_ip[asic_id] != all_inbands[a_linecard][idx] %}
      <BGPSession>
        <StartRouter>{{ start_rtr }}</StartRouter>
        <StartPeer>{{ voq_inband_ip[asic_id].split('/')[0] }}</StartPeer>
{% if all_inbands[a_linecard]|length == 1 %}
{% set end_rtr = a_linecard %}
{% else %}
{% if a_linecard == inventory_hostname %}
{% set end_rtr = "ASIC" + idx|string %}
{% else %}
{% set end_rtr = a_linecard + "-ASIC" + idx|string %}
{% endif %}
{% endif %}
{% set _dummy = voq_peers.update({ all_inbands[a_linecard][idx].split('/')[0] : end_rtr }) %}
        <EndRouter>{{ end_rtr }}</EndRouter>
        <EndPeer>{{ all_inbands[a_linecard][idx].split('/')[0] }}</EndPeer>
        <Multihop>1</Multihop>
        <HoldTime>0</HoldTime>
        <KeepAliveTime>0</KeepAliveTime>
        <VoQChassisInternal>true</VoQChassisInternal>
      </BGPSession>
{% endif %}
{% endfor %}
{% endfor %}
{% endfor %}
{% endif %}
    </PeeringSessions>
    <Routers xmlns:a="http://schemas.datacontract.org/2004/07/Microsoft.Search.Autopilot.Evolution">
{% if card_type is not defined or card_type != 'supervisor' %}
      <a:BGPRouterDeclaration>
        <a:ASN>{{ vm_topo_config['dut_asn'] }}</a:ASN>
        <a:Hostname>{{ inventory_hostname }}</a:Hostname>
        <a:Peers>
{% for index in range(vms_number)  %}
{% if vm_topo_config['vm'][vms[index]]['peer_ipv4'][dut_index|int] %}
          <BGPPeer>
            <Address>{{ vm_topo_config['vm'][vms[index]]['peer_ipv4'][dut_index|int] }}</Address>
            <RouteMapIn i:nil="true"/>
            <RouteMapOut i:nil="true"/>
            <Vrf i:nil="true"/>
          </BGPPeer>
{% endif %}
{% endfor %}
{% if num_asics == 1 and switch_type is defined and switch_type == 'voq' %}
{% for a_voq_peer in voq_peers %}
          <BGPPeer>
            <Address>{{ a_voq_peer }}</Address>
            <RouteMapIn i:nil="true"/>
            <RouteMapOut i:nil="true"/>
            <Vrf i:nil="true"/>
          </BGPPeer>
{% endfor %}
{% endif %}
{% if 'tor' in vm_topo_config['dut_type'] | lower %}
          <BGPPeer i:type="a:BGPPeerPassive">
            <ElementType>BGPPeer</ElementType>
            <Address>{{ lp_ipv4_addr }}</Address>
            <RouteMapIn i:nil="true"/>
            <RouteMapOut i:nil="true"/>
            <Vrf i:nil="true"/>
            <a:Name>BGPSLBPassive</a:Name>
            <a:PeersRange>{{ bgp_slb_passive_range }}</a:PeersRange>
          </BGPPeer>
          <BGPPeer i:type="a:BGPPeerPassive">
            <ElementType>BGPPeer</ElementType>
            <Address>{{ lp_ipv4_addr }}</Address>
            <RouteMapIn i:nil="true"/>
            <RouteMapOut i:nil="true"/>
            <Vrf i:nil="true"/>
            <a:Name>BGPVac</a:Name>
            <a:PeersRange>192.168.0.0/21</a:PeersRange>
          </BGPPeer>
{% endif %}
        </a:Peers>
        <a:RouteMaps/>
      </a:BGPRouterDeclaration>
{% for index in range( vms_number) %}
{% if vm_topo_config['vm'][vms[index]]['intfs'][dut_index|int]|length > 0 %}
      <a:BGPRouterDeclaration>
        <a:ASN>{{ vm_topo_config['vm'][vms[index]]['bgp_asn'] }}</a:ASN>
        <a:Hostname>{{ vms[index] }}</a:Hostname>
        <a:RouteMaps/>
      </a:BGPRouterDeclaration>
{% endif %}
{% endfor %}
{% endif %}
{% for asic in asic_topo_config %}
      <a:BGPRouterDeclaration>
        <a:ASN>{{ vm_topo_config['dut_asn'] }}</a:ASN>
        <a:Hostname>{{ asic }}</a:Hostname>
        <a:Peers>
{% for index in range( vms_number) %}
{% if vms[index] in vm_asic_ifnames and vm_asic_ifnames[vms[index]][0].split('-')[1] == asic %}
          <BGPPeer>
            <Address>{{ vm_topo_config['vm'][vms[index]]['peer_ipv4'][dut_index|int] }}</Address>
            <RouteMapIn i:nil="true"/>
            <RouteMapOut i:nil="true"/>
            <Vrf i:nil="true"/>
          </BGPPeer>
{% endif %}
{% endfor %}
{% for neigh_asic in asic_topo_config %}
{% if neigh_asic in asic_topo_config[asic]['neigh_asic'] and asic_topo_config[asic]['neigh_asic'][neigh_asic]['peer_ipv4'][0] %}
          <BGPPeer>
            <Address>{{ asic_topo_config[asic]['neigh_asic'][neigh_asic]['peer_ipv4'][0] }}</Address>
            <RouteMapIn i:nil="true"/>
            <RouteMapOut i:nil="true"/>
            <Vrf i:nil="true"/>
          </BGPPeer>
{% endif %}
{% endfor %}
        </a:Peers>
        <a:RouteMaps/>
      </a:BGPRouterDeclaration>
{% endfor %}
{% if switch_type is defined and switch_type == 'voq' %}
{% for a_linecard in all_inbands %}
{% if a_linecard != inventory_hostname %}
{% for idx in range(all_inbands[a_linecard]|length) %}
      <a:BGPRouterDeclaration>
        <a:ASN>{{ vm_topo_config['dut_asn'] }}</a:ASN>
        <a:Hostname>{{ voq_peers[all_inbands[a_linecard][idx].split('/')[0]] }}</a:Hostname>
        <a:RouteMaps/>
      </a:BGPRouterDeclaration>
{% endfor %}
{% endif %}
{% endfor %}
{% if num_asics > 1 %}
{% for asic_id in range(num_asics) %}
{% set asic_name = "ASIC" + asic_id|string %}
      <a:BGPRouterDeclaration>
        <a:ASN>{{ vm_topo_config['dut_asn'] }}</a:ASN>
        <a:Hostname>{{ asic_name }}</a:Hostname>
        <a:Peers>
{% for index in range( vms_number) %}
{% if vms[index] in vm_asic_ifnames and vm_asic_ifnames[vms[index]][0].split('-')[1] == asic_name %}
          <BGPPeer>
            <Address>{{ vm_topo_config['vm'][vms[index]]['peer_ipv4'][dut_index|int] }}</Address>
            <RouteMapIn i:nil="true"/>
            <RouteMapOut i:nil="true"/>
            <Vrf i:nil="true"/>
          </BGPPeer>
{% endif %}
{% endfor %}
{% for a_linecard in all_inbands %}
{% for idx in range(all_inbands[a_linecard]|length) %}
{% if voq_inband_ip[asic_id] != all_inbands[a_linecard][idx] %}
          <BGPPeer>
            <Address>{{ all_inbands[a_linecard][idx] }}</Address>
            <RouteMapIn i:nil="true"/>
            <RouteMapOut i:nil="true"/>
            <Vrf i:nil="true"/>
          </BGPPeer>
{% endif %}
{% endfor %}
{% endfor %}
        </a:Peers>
      </a:BGPRouterDeclaration>
{% endfor %}
{% endif %}
{% endif %}
    </Routers>
  </CpgDec>

