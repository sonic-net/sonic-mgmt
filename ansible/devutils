#!/usr/bin/env python

# Supress warning
import warnings
warnings.filterwarnings("ignore")

import argparse
import subprocess
from tabulate import tabulate

from devutil.inv_helpers import HostManager
from devutil.ssh_utils import SSHClient
from devutil.task_runner import TaskRunner
import sys
sys.path.append("..")
from tests.common.connections.console_host import ConsoleHost

g_inv_mgr = None
g_task_runner = None

def run_cmd(cmd):
    '''
    @summary: Utility that runs a command in a subprocess
    @param cmd: Command to be run
    @return: stdout of the command run
    @return: stderr of the command run
    '''
    out = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)
    stdout, stderr = out.communicate()
    return out.returncode, stdout, stderr


def action_list(parameters):
    hosts = parameters['hosts']
    table_header = ['Name', 'Ansbile_host']
    data = []
    for name, vars in hosts.items():
        data.append((name, vars['ansible_host']))
    print(tabulate(data, headers=table_header, tablefmt='grid'))


def action_ping(parameters):
    hosts = parameters['hosts']
    header = ['Host', 'Hostname', 'Ping IPv4 result']
    data = []
    for name, vars in hosts.items():
        cmd = 'timeout 1 ping -q -c 1 -w 1 {}'.format(vars['ansible_host'])
        g_task_runner.submit_task(name + '|' + vars['ansible_host'], run_cmd, cmd=cmd)
    for name, result in g_task_runner.task_results():
        data.append((name.split('|')[0], name.split('|')[1], 'Success' if result['result'][0] == 0 else "Fail"))
    print(tabulate(data, headers=header, tablefmt='grid'))

    header = ['Host', 'Ping IPv6 result']
    data = []
    if parameters['ipv6']:
        for name, vars in hosts.items():
            if 'ansible_hostv6' in vars.keys():
                cmd = 'timeout 1 ping -6 -q -c 1 -w 1 {}'.format(vars['ansible_hostv6'])
                g_task_runner.submit_task(name + '|' + vars['ansible_hostv6'], run_cmd, cmd=cmd)
        for name, result in g_task_runner.task_results():
            data.append((name.split('|')[0], name.split('|')[1], 'Success' if result['result'][0] == 0 else "Fail"))
        print(tabulate(data, headers=header, tablefmt='grid'))


def action_ssh(parameters):
    hosts = parameters['hosts']
    for name, vars in hosts.items():
        client = SSHClient()
        client.connect(hostname=vars['ansible_host'], username=vars['creds']['username'], passwords=vars['creds']['password'])
        client.posix_shell()

def action_console(parameters):
    hosts = parameters['hosts']
    # Todo: Retrieve console vars from conn_graph_fact
    for name, vars in hosts.items():
        console_host = ConsoleHost(console_type=vars['console_type'],
                                    console_host=vars['console_host'],
                                    console_port=vars['console_port'],
                                    sonic_username=vars['creds']['username'],
                                    sonic_password=vars['creds']['password'],
                                    console_username=vars['creds']['console_user'][vars['console_type']],
                                    console_password=vars['creds']['console_password'][vars['console_type']])
        console_host.posix_shell()

def action_dispatcher(parameters):
    # Actions that can run simultaneously in different hosts
    parallel_actions = ['ssh_run_command']
    action = parameters['action'].__name__
    if action in parallel_actions:
        parallel_run(parameters)
    else:
        parameters['action'](parameters)


def parallel_run(parameters):
    action = parameters['action']
    cmd = parameters['cmd']
    hosts = parameters['hosts']
    if action.__name__ == 'ssh_run_command':
        for hostname, vars in hosts.items():
            args = {'hostname': vars['ansible_host'],
                    'username': vars['creds']['username'],
                    'passwords': vars['creds']['password'],
                    'cmd': cmd
                    }
            g_task_runner.submit_task(hostname, ssh_run_command, **args)
        for name, result in g_task_runner.task_results():
            print("task result for {} ===============>\n{}".format(name, str(result['result'][1])))

def ssh_run_command(hostname, username, passwords, cmd):
    client = SSHClient()
    client.connect(hostname=hostname, username=username, passwords=passwords)
    return client.run_command(cmd)

def validate_args(args):
    if args.action == 'run' and args.cmd == '':
        print("command is missing for run action")
        return False
    return True

def main():
    parser = argparse.ArgumentParser(description='Device utilities')
    parser.add_argument('-6', '--ipv6', help='Include IPv6', action='store_true',
                        required=False, default=False)
    parser.add_argument('-a', '--action',
                        help='Action towards host(s): list, ping, run, ssh, console, default list',
                        type=str, required=False, default='list',
                        choices=['list', 'ping', 'ssh', 'console', 'run'])
    parser.add_argument('--cmd', help="Command to run on all hosts",
                        type=str, required=False)
    parser.add_argument('-g', '--group', help='Groups: all, sonic, ptf, pdu, default all',
                        type=str, required=False, default='all')
    parser.add_argument('-i', '--inventory', help='Categories: lab, etc, default lab',
                        type=str, required=False, default='lab')
    parser.add_argument('-l', '--limit', help='Host: limit to a single dut host name, default all',
                        type=str, required=False)
    parser.add_argument('-u', '--user', help='User: user account to login to host with, default admin',
                        type=str, required=False, default='admin')
    parser.add_argument('-c', '--concurrency', help='Concurrency: the max concurrency for tasks that can run simultaneously, default 1',
                        type=int, required=False, default=1)

    args = parser.parse_args()
    if not validate_args(args):
        return
    global g_task_runner, g_inv_mgr
    g_task_runner = TaskRunner(max_worker=args.concurrency)
    g_inv_mgr = HostManager(args.inventory)
    hosts = g_inv_mgr.get_host_list(args.group, args.limit)
    actions = { 'list' : action_list,
                'ping' : action_ping,
                'ssh' : action_ssh,
                'console' : action_console,
                'run' : ssh_run_command
              }
    parameters = { 'hosts' : hosts,
                   'limit' : args.limit,
                   'action' : actions[args.action],
                   'user' : args.user,
                   'ipv6' : args.ipv6,
                   'cmd': args.cmd
                 }
    action_dispatcher(parameters)


if __name__ == '__main__':
    main()
