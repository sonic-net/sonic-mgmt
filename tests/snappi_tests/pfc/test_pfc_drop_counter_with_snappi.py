import pytest
import logging

from tests.common.helpers.assertions import pytest_require    # noqa: F401
from tests.common.fixtures.conn_graph_facts import conn_graph_facts,\
    fanout_graph_facts # noqa F401
from tests.common.snappi_tests.snappi_fixtures import snappi_api_serv_ip, snappi_api_serv_port,\
    snappi_api, snappi_testbed_config  # noqa F401
from tests.common.snappi_tests.qos_fixtures import prio_dscp_map, \
    lossless_prio_list   # noqa F401
from tests.snappi_tests.pfc.files.helper import run_pfc_xon_tx_drop_counter
from tests.common.snappi_tests.common_helpers import packet_capture # noqa F401
from tests.common.cisco_data import is_cisco_device
logger = logging.getLogger(__name__)
pytestmark = [pytest.mark.topology('tgen')]


def test_pfc_xon_tx_drop_counter(
                    snappi_api, # noqa F811
                    snappi_testbed_config, # noqa F811
                    conn_graph_facts, # noqa F811
                    fanout_graph_facts, # noqa F811
                    duthosts,
                    rand_one_dut_hostname,
                    rand_one_dut_portname_oper_up,
                    lossless_prio_list, # noqa F811
                    prio_dscp_map): # noqa F811
    """
    Test if PFC Xon frame generated by device under test (DUT) is incrementing
    the tx_drop counter of the egress port when oper down

    Topology:
    snappi (1) -> DUT -> snappi (2)

    Test steps:
    1) Bring the egress DUT port to oper down state by changing the IXIA port  to down state
    2) With lossless priority configured on the egress port the Xon frames previously being sent out
    shouldnt be sent and also it shouldn't be accounted for as tx drop counter

    Args:
        snappi_api (pytest fixture): SNAPPI session
        snappi_testbed_config (pytest fixture): testbed configuration information
        conn_graph_facts (pytest fixture): connection graph
        fanout_graph_facts (pytest fixture): fanout graph
        duthosts (pytest fixture): list of DUTs
        rand_one_dut_hostname (str): hostname of DUT
        rand_one_dut_portname_oper_up (str): port to test, e.g., 's6100-1|Ethernet0'
        lossless_prio_list (pytest fixture): list of all the lossless priorities
        prio_dscp_map (pytest fixture): priority vs. DSCP map (key = priority).

    Returns:
        N/A
    """

    dut_hostname, dut_port = rand_one_dut_portname_oper_up.split('|')
    pytest_require(rand_one_dut_hostname == dut_hostname,
                   "Port is not mapped to the expected DUT")

    testbed_config, port_config_list = snappi_testbed_config
    duthost = duthosts[rand_one_dut_hostname]

    if not is_cisco_device(duthost):
        pytest.skip("Test is supported on Cisco device only")

    pause_prio_list = lossless_prio_list
    test_prio_list = lossless_prio_list

    run_pfc_xon_tx_drop_counter(
                    api=snappi_api,
                    testbed_config=testbed_config,
                    port_config_list=port_config_list,
                    conn_data=conn_graph_facts,
                    fanout_data=fanout_graph_facts,
                    duthost=duthost,
                    dut_port=dut_port,
                    global_pause=False,
                    pause_prio_list=pause_prio_list,
                    test_prio_list=test_prio_list,
                    prio_dscp_map=prio_dscp_map,
                    test_traffic_pause=True)
