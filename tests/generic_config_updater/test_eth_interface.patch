diff --git a/tests/generic_config_updater/test_eth_interface.py b/tests/generic_config_updater/test_eth_interface.py
index 846219564..8547f200a 100644
--- a/tests/generic_config_updater/test_eth_interface.py
+++ b/tests/generic_config_updater/test_eth_interface.py
@@ -16,6 +16,11 @@ pytestmark = [

 logger = logging.getLogger(__name__)

+DEFAULT_INTERFACE = {
+    0: "Ethernet0",
+    1: "Ethernet144"
+}
+

 @pytest.fixture(autouse=True)
 def ensure_dut_readiness(duthosts, rand_one_dut_hostname):
@@ -39,9 +44,9 @@ def ensure_dut_readiness(duthosts, rand_one_dut_hostname):
     finally:
         delete_checkpoint(duthost)

-
-def is_valid_fec_state_db(duthost, value):
-    read_supported_fecs_cli = 'sonic-db-cli STATE_DB hget "PORT_TABLE|{}" supported_fecs'.format("Ethernet0")
+def is_valid_fec_state_db(duthost, value, port, namespace=None):
+    namespace_prefix = '' if namespace is None else '-n ' + namespace
+    read_supported_fecs_cli = 'sonic-db-cli {} STATE_DB hget "PORT_TABLE|{}" supported_fecs'.format(namespace_prefix, port)
     supported_fecs_str = duthost.shell(read_supported_fecs_cli)['stdout']
     if supported_fecs_str:
         if supported_fecs_str != 'N/A':
@@ -54,9 +59,29 @@ def is_valid_fec_state_db(duthost, value):
         return False
     return True

+def fec_exists_on_config_db(duthost, port, namespace=None):
+    """
+    Check if FEC (Forward Error Correction) exists on the CONFIG_DB for a given port.
+
+    Args:
+        duthost (object): The DUT (Device Under Test) host object.
+        port (str): The port for which FEC existence needs to be checked.
+        namespace (str, optional): The namespace in which the port exists. Defaults to None.
+
+    Returns:
+        bool: True if FEC exists on the CONFIG_DB for the given port, False otherwise.
+    """
+    namespace_prefix = '' if namespace is None else '-n ' + namespace
+    read_fec = 'sonic-db-cli {} CONFIG_DB hget "PORT|{}" fec'.format(namespace_prefix, port)
+    read_fec_str = duthost.shell(read_fec)['stdout']
+    if read_fec_str:
+        return True
+    else:
+        return False

-def is_valid_speed_state_db(duthost, value):
-    read_supported_speeds_cli = 'sonic-db-cli STATE_DB hget "PORT_TABLE|{}" supported_speeds'.format("Ethernet0")
+def is_valid_speed_state_db(duthost, value, port, namespace=None):
+    namespace_prefix = '' if namespace is None else '-n ' + namespace
+    read_supported_speeds_cli = 'sonic-db-cli {} STATE_DB hget "PORT_TABLE|{}" supported_speeds'.format(namespace_prefix, port)
     supported_speeds_str = duthost.shell(read_supported_speeds_cli)['stdout']
     supported_speeds = [int(s) for s in supported_speeds_str.split(',') if s]
     if supported_speeds and int(value) not in supported_speeds:
@@ -64,9 +89,9 @@ def is_valid_speed_state_db(duthost, value):
     return True


-def check_interface_status(duthost, field, interface='Ethernet0'):
+def check_interface_status(duthost, field, interface):
     """
-    Returns current status for Ethernet0 of specified field
+    Returns current status for interface of specified field

     Args:
         duthost: DUT host object under test
@@ -86,16 +111,17 @@ def check_interface_status(duthost, field, interface='Ethernet0'):
     status = re.split(r" {2,}", interface_status)[field_index]
     return status

-
-def get_ethernet_port_not_in_portchannel(duthost):
+def get_ethernet_port_not_in_portchannel(duthost, namespace=None):
     """
         Returns the name of an ethernet port which is not a member of a port channel

         Args:
             duthost: DUT host object under test
+            namespace: DUT asic namespace. asic0, asic1, localhost
     """
-    config_facts = duthost.get_running_config_facts()
+
     port_name = ""
+    config_facts = duthost.config_facts(host=duthost.hostname, source="running",verbose=False,namespace=namespace)['ansible_facts']
     ports = list(config_facts['PORT'].keys())
     port_channel_members = []
     if 'PORTCHANNEL_MEMBER' not in config_facts:
@@ -108,17 +134,19 @@ def get_ethernet_port_not_in_portchannel(duthost):
             port_channel_members.append(member)
     for port in ports:
         if port not in port_channel_members:
-            port_name = port
-            break
+            if config_facts['PORT'][port]['role'] == 'Ext':         # ensure port is front-panel port
+                port_name = port
+                break
     return port_name


-def get_port_speeds_for_test(duthost):
+def get_port_speeds_for_test(duthost, port):
     """
     Get the speeds parameters for case test_update_speed, including 2 valid speeds and 1 invalid speed

     Args:
         duthost: DUT host object
+        port: The port for which speeds need to be tested
     """
     speeds_to_test = []
     invalid_speed_yang = ("20a", False)
@@ -126,7 +154,7 @@ def get_port_speeds_for_test(duthost):
     if duthost.get_facts()['asic_type'] == 'vs':
         valid_speeds = ['20000', '40000']
     else:
-        valid_speeds = duthost.get_supported_speeds('Ethernet0')
+        valid_speeds = duthost.get_supported_speeds(port)
         if valid_speeds:
             invalid_speed_state_db = (str(int(valid_speeds[0]) - 1), False)
     pytest_assert(valid_speeds, "Failed to get any valid port speed to test.")
@@ -137,13 +165,18 @@ def get_port_speeds_for_test(duthost):
         speeds_to_test.append(invalid_speed_state_db)
     return speeds_to_test

-
-def test_remove_lanes(duthosts, rand_one_dut_hostname, ensure_dut_readiness):
+def test_remove_lanes(duthosts, rand_one_dut_hostname, ensure_dut_readiness, rand_asic_namespace):
     duthost = duthosts[rand_one_dut_hostname]
+
+    asic_namespace, asic_id = rand_asic_namespace
+    json_namespace = '' if asic_namespace is None else '/' + asic_namespace
+    asic_index = 0 if asic_id is None else asic_id
+    port = DEFAULT_INTERFACE.get(asic_index, "DefaultPort")
+
     json_patch = [
         {
             "op": "remove",
-            "path": "/PORT/Ethernet0/lanes"
+            "path": "{}/PORT/{}/lanes".format(json_namespace, port)
         }
     ]

@@ -156,20 +189,25 @@ def test_remove_lanes(duthosts, rand_one_dut_hostname, ensure_dut_readiness):
     finally:
         delete_tmpfile(duthost, tmpfile)

-
 @pytest.mark.skip(reason="Bypass as it is blocking submodule update")
-def test_replace_lanes(duthosts, rand_one_dut_hostname, ensure_dut_readiness):
+def test_replace_lanes(duthosts, rand_one_dut_hostname, ensure_dut_readiness, rand_asic_namespace):
     duthost = duthosts[rand_one_dut_hostname]
-    cur_lanes = check_interface_status(duthost, "Lanes")
+    asic_namespace, asic_id = rand_asic_namespace
+    json_namespace = '' if asic_namespace is None else '/' + asic_namespace
+    asic_index = 0 if asic_id is None else asic_id
+    port = DEFAULT_INTERFACE.get(asic_index, "DefaultPort")
+
+    cur_lanes = check_interface_status(duthost, "Lanes", port)
     cur_lanes = cur_lanes.split(",")
     cur_lanes.sort()
     update_lanes = cur_lanes
     update_lanes[-1] = str(int(update_lanes[-1]) + 1)
     update_lanes = ",".join(update_lanes)
+
     json_patch = [
         {
             "op": "replace",
-            "path": "/PORT/Ethernet0/lanes",
+            "path": "{}/PORT/{}/lanes".format(json_namespace, port),
             "value": "{}".format(update_lanes)
         }
     ]
@@ -183,18 +221,20 @@ def test_replace_lanes(duthosts, rand_one_dut_hostname, ensure_dut_readiness):
     finally:
         delete_tmpfile(duthost, tmpfile)

-
-def test_replace_mtu(duthosts, rand_one_dut_hostname, ensure_dut_readiness):
+def test_replace_mtu(duthosts, rand_one_dut_hostname, ensure_dut_readiness, rand_asic_namespace):
     duthost = duthosts[rand_one_dut_hostname]
+    asic_namespace, asic_id = rand_asic_namespace
+    json_namespace = '' if asic_namespace is None else '/' + asic_namespace
     # Can't directly change mtu of the port channel member
     # So find a ethernet port that are not in a port channel
-    port_name = get_ethernet_port_not_in_portchannel(duthost)
+    port_name = get_ethernet_port_not_in_portchannel(duthost, asic_namespace)
+
     pytest_assert(port_name, "No available ethernet ports, all ports are in port channels.")
     target_mtu = "1514"
     json_patch = [
         {
             "op": "replace",
-            "path": "/PORT/{}/mtu".format(port_name),
+            "path": "{}/PORT/{}/mtu".format(json_namespace, port_name),
             "value": "{}".format(target_mtu)
         }
     ]
@@ -213,12 +253,16 @@ def test_replace_mtu(duthosts, rand_one_dut_hostname, ensure_dut_readiness):


 @pytest.mark.parametrize("pfc_asym", ["on", "off"])
-def test_toggle_pfc_asym(duthosts, rand_one_dut_hostname, ensure_dut_readiness, pfc_asym):
+def test_toggle_pfc_asym(duthosts, rand_one_dut_hostname, ensure_dut_readiness, pfc_asym, rand_asic_namespace):
     duthost = duthosts[rand_one_dut_hostname]
+    asic_namespace, asic_id = rand_asic_namespace
+    json_namespace = '' if asic_namespace is None else '/' + asic_namespace
+    asic_index = 0 if asic_id is None else asic_id
+    port = DEFAULT_INTERFACE.get(asic_index, "DefaultPort")
     json_patch = [
         {
             "op": "replace",
-            "path": "/PORT/Ethernet0/pfc_asym",
+            "path": "{}/PORT/{}/pfc_asym".format(json_namespace, port),
             "value": "{}".format(pfc_asym)
         }
     ]
@@ -229,37 +273,42 @@ def test_toggle_pfc_asym(duthosts, rand_one_dut_hostname, ensure_dut_readiness,
     try:
         output = apply_patch(duthost, json_data=json_patch, dest_file=tmpfile)
         expect_op_success(duthost, output)
-        current_status_pfc_asym = check_interface_status(duthost, "Asym")
-        pytest_assert(current_status_pfc_asym == pfc_asym,
-                      "Failed to properly configure interface Asym PFC to requested value off")
+        current_status_pfc_asym = check_interface_status(duthost, "Asym", port)
+        pytest_assert(current_status_pfc_asym == pfc_asym, "Failed to properly configure interface Asym PFC to requested value off")
     finally:
         delete_tmpfile(duthost, tmpfile)


 @pytest.mark.device_type('physical')
 @pytest.mark.parametrize("fec", ["rs", "fc"])
-def test_replace_fec(duthosts, rand_one_dut_hostname, ensure_dut_readiness, fec):
+def test_replace_fec(duthosts, rand_one_dut_hostname, ensure_dut_readiness, fec, rand_asic_namespace):
     duthost = duthosts[rand_one_dut_hostname]
+    asic_namespace, asic_id = rand_asic_namespace
+    json_namespace = '' if asic_namespace is None else '/' + asic_namespace
+    asic_index = 0 if asic_id is None else asic_id
+    port = DEFAULT_INTERFACE.get(asic_index, "DefaultPort")
     json_patch = [
         {
             "op": "add",
-            "path": "/PORT/Ethernet0/fec",
+            "path": "{}/PORT/{}/fec".format(json_namespace, port),
             "value": "{}".format(fec)
         }
     ]
     tmpfile = generate_tmpfile(duthost)
     logger.info("tmpfile {}".format(tmpfile))
+    fec_cfg_exists = fec_exists_on_config_db(duthost, port, namespace=asic_namespace)

     try:
         output = apply_patch(duthost, json_data=json_patch, dest_file=tmpfile)
-        if is_valid_fec_state_db(duthost, fec):
+        if is_valid_fec_state_db(duthost, fec, port, namespace=asic_namespace):
             expect_op_success(duthost, output)
-            current_status_fec = check_interface_status(duthost, "FEC")
+            current_status_fec = check_interface_status(duthost, "FEC", port)
             pytest_assert(current_status_fec == fec,
                           "Failed to properly configure interface FEC to requested value {}".format(fec))

             # The rollback after the test cannot revert the fec, when fec is not configured in config_db.json
-            if duthost.facts['platform'] in ['x86_64-arista_7050_qx32s']:
+            # adding generic check to restore fec if not included in config_db.json - keeping previous platform check for backwards compatibility
+            if duthost.facts['platform'] in ['x86_64-arista_7050_qx32s'] or fec_cfg_exists is False:
                 config_reload(duthost, safe_reload=True)
         else:
             expect_op_failure(output)
@@ -268,12 +317,16 @@ def test_replace_fec(duthosts, rand_one_dut_hostname, ensure_dut_readiness, fec)


 @pytest.mark.skip(reason="Bypass as this is not a production scenario")
-def test_update_invalid_index(duthosts, rand_one_dut_hostname, ensure_dut_readiness):
+def test_update_invalid_index(duthosts, rand_one_dut_hostname, ensure_dut_readiness, rand_asic_namespace):
     duthost = duthosts[rand_one_dut_hostname]
+    asic_namespace, asic_id = rand_asic_namespace
+    json_namespace = '' if asic_namespace is None else '/' + asic_namespace
+    asic_index = 0 if asic_id is None else asic_id
+    port = DEFAULT_INTERFACE.get(asic_index, "DefaultPort")
     json_patch = [
         {
             "op": "replace",
-            "path": "/PORT/Ethernet0/index",
+            "path": "{}/PORT/{}/index".format(json_namespace, port),
             "value": "abc1"
         }
     ]
@@ -289,15 +342,18 @@ def test_update_invalid_index(duthosts, rand_one_dut_hostname, ensure_dut_readin


 @pytest.mark.skip(reason="Bypass as this is not a production scenario")
-def test_update_valid_index(duthosts, rand_one_dut_hostname, ensure_dut_readiness):
+def test_update_valid_index(duthosts, rand_one_dut_hostname, ensure_dut_readiness, rand_asic_namespace):
     duthost = duthosts[rand_one_dut_hostname]
-    output = duthost.shell('sonic-db-cli CONFIG_DB keys "PORT|"\\*')["stdout"]
+    asic_namespace, asic_id = rand_asic_namespace
+    json_namespace = '' if asic_namespace is None else '/' + asic_namespace
+    namespace_prefix = '' if asic_namespace is None else '-n ' + asic_namespace
+    output = duthost.shell('sonic-db-cli {} CONFIG_DB keys "PORT|"\\*'.format(namespace_prefix))["stdout"]
     interfaces = {}  # to be filled with two interfaces mapped to their indeces

     for line in output.split('\n'):
         if line.startswith('PORT|Ethernet'):
             interface = line[line.index('Ethernet'):].strip()
-            index = duthost.shell('sonic-db-cli CONFIG_DB hget "PORT|{}" index'.format(interface))["stdout"]
+            index = duthost.shell('sonic-db-cli {} CONFIG_DB hget "PORT|{}" index'.format(namespace_prefix, interface))["stdout"]
             interfaces[interface] = index
             if len(interfaces) == 2:
                 break
@@ -306,12 +362,12 @@ def test_update_valid_index(duthosts, rand_one_dut_hostname, ensure_dut_readines
     json_patch = [
         {
             "op": "replace",
-            "path": "/PORT/{}/index".format(list(interfaces.keys())[0]),
+            "path": "{}/PORT/{}/index".format(json_namespace, list(interfaces.keys())[0]),
             "value": "{}".format(list(interfaces.values())[1])
         },
         {
             "op": "replace",
-            "path": "/PORT/{}/index".format(list(interfaces.keys())[1]),
+            "path": "{}/PORT/{}/index".format(json_namespace, list(interfaces.keys())[1]),
             "value": "{}".format(list(interfaces.values())[0])
         }
     ]
@@ -326,14 +382,18 @@ def test_update_valid_index(duthosts, rand_one_dut_hostname, ensure_dut_readines
         delete_tmpfile(duthost, tmpfile)


-def test_update_speed(duthosts, rand_one_dut_hostname, ensure_dut_readiness):
+def test_update_speed(duthosts, rand_one_dut_hostname, ensure_dut_readiness, rand_asic_namespace):
     duthost = duthosts[rand_one_dut_hostname]
-    speed_params = get_port_speeds_for_test(duthost)
+    asic_namespace, asic_id = rand_asic_namespace
+    json_namespace = '' if asic_namespace is None else '/' + asic_namespace
+    asic_index = 0 if asic_id is None else asic_id
+    port = DEFAULT_INTERFACE.get(asic_index, "DefaultPort")
+    speed_params = get_port_speeds_for_test(duthost, port)
     for speed, is_valid in speed_params:
         json_patch = [
             {
                 "op": "replace",
-                "path": "/PORT/Ethernet0/speed",
+                "path": "{}/PORT/{}/speed".format(json_namespace, port),
                 "value": "{}".format(speed)
             }
         ]
@@ -343,9 +403,9 @@ def test_update_speed(duthosts, rand_one_dut_hostname, ensure_dut_readiness):

         try:
             output = apply_patch(duthost, json_data=json_patch, dest_file=tmpfile)
-            if is_valid and is_valid_speed_state_db(duthost, speed):
+            if is_valid and is_valid_speed_state_db(duthost, speed, port, namespace=asic_namespace):
                 expect_op_success(duthost, output)
-                current_status_speed = check_interface_status(duthost, "Speed").replace("G", "000")
+                current_status_speed = check_interface_status(duthost, "Speed", port).replace("G", "000")
                 current_status_speed = current_status_speed.replace("M", "")
                 pytest_assert(current_status_speed == speed,
                               "Failed to properly configure interface speed to requested value {}".format(speed))
@@ -355,12 +415,16 @@ def test_update_speed(duthosts, rand_one_dut_hostname, ensure_dut_readiness):
             delete_tmpfile(duthost, tmpfile)


-def test_update_description(duthosts, rand_one_dut_hostname, ensure_dut_readiness):
+def test_update_description(duthosts, rand_one_dut_hostname, ensure_dut_readiness, rand_asic_namespace):
     duthost = duthosts[rand_one_dut_hostname]
+    asic_namespace, asic_id = rand_asic_namespace
+    json_namespace = '' if asic_namespace is None else '/' + asic_namespace
+    asic_index = 0 if asic_id is None else asic_id
+    port = DEFAULT_INTERFACE.get(asic_index, "DefaultPort")
     json_patch = [
         {
             "op": "replace",
-            "path": "/PORT/Ethernet0/description",
+            "path": "{}/PORT/{}/description".format(json_namespace, port),
             "value": "Updated description"
         }
     ]
@@ -376,12 +440,16 @@ def test_update_description(duthosts, rand_one_dut_hostname, ensure_dut_readines


 @pytest.mark.parametrize("admin_status", ["up", "down"])
-def test_eth_interface_admin_change(duthosts, rand_one_dut_hostname, admin_status):
+def test_eth_interface_admin_change(duthosts, rand_one_dut_hostname, admin_status, rand_asic_namespace):
     duthost = duthosts[rand_one_dut_hostname]
+    asic_namespace, asic_id = rand_asic_namespace
+    json_namespace = '' if asic_namespace is None else '/' + asic_namespace
+    asic_index = 0 if asic_id is None else asic_id
+    port = DEFAULT_INTERFACE.get(asic_index, "DefaultPort")
     json_patch = [
         {
             "op": "add",
-            "path": "/PORT/Ethernet0/admin_status",
+            "path": "{}/PORT/{}/admin_status".format(json_namespace, port),
             "value": "{}".format(admin_status)
         }
     ]
@@ -393,7 +461,7 @@ def test_eth_interface_admin_change(duthosts, rand_one_dut_hostname, admin_statu
         output = apply_patch(duthost, json_data=json_patch, dest_file=tmpfile)
         expect_op_success(duthost, output)

-        pytest_assert(wait_until(10, 2, 0, lambda: check_interface_status(duthost, "Admin") == admin_status),
+        pytest_assert(wait_until(10, 2, 0, lambda: check_interface_status(duthost, "Admin", port) == admin_status),
                       "Interface failed to update admin status to {}".format(admin_status))
     finally:
         delete_tmpfile(duthost, tmpfile)
--