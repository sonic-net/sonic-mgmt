util/base_test.py:
    Base test code that can be run via ansible or locally in switch
    Imports config_reload & wait_until from mock_for_switch or tests.common
    depending on the source of test run as from the switch itself or
    remotely via ansible.
    The duthost object passed is from mock code, when  running in the switch.
    This way the test code can use duthost transparently, irrespective of
    test running in switch or remotely via ansible.

    The data subdir for ansible is "logs/configlet". For running in switch
    same is created under current dir (the test switches to specified dir
    before running the test)


    init() -- creates all required sub-dirs and fills up init_data

    backup_minigraph & restore_orig_minigraph -- makes a copy of original
        minigraph if not already exists and restore from the same, respectively.

    apply_clet -- Per template (published in OneNote) for adding T0 via configlet.
        Loads minigraph w/o T0
        Take DB dumps under no_t0_db_dir`
        Deletes everflow tables via configlet; mark port down via config command;
        call configlet to apply JSON list of updates per template (
        strict per content & order), add everflow tables and start up
        port explicitly.
        Wait till all critical services are started.
        NOTE: load_minigraph does wait for cri

    download_sonic_files -- Downloads minigraph.xml & config_db.json into data dir.
        In case of ansible, it is <data dir>/<duthost name>/etc/sonic/
        Mock does the same.

    chk_bgp_session -- Checks BGP state for given neighbor by IP

    _create_patch -- creates patch between config_db.json in src & dst sub dirs
        into given patch file. Required when running addRack test via
        generic config updater

    db_comp --  Take DB dumps into given dir and compare those with original
        NOTE: Take_DB_dumps skip transient keys and keys marked to skip
            explicitly in db_info

    generic_patch_add_t0 --
        Loads  config_db.json from no_t0_db_dir
        Creates patch between no_t0_db_dir & orig_db_dir
        Use geneeric patch updater to apply patch
        Wait until db_comp succeeds
        Check BGP session

    do_test_add_rack --
        Call init() to create all required dirs
        loads original minigraph; This waits until all critical services are started.
        take_DB_dumps
        download required files to be able to create configlet per strict template for AddRack
        Create configlet (files_create.do_run)
        Ensure the T0 that is going to be added via configlet has healthy BGP session with
        original minigraph that had this T0
        call apply_clet
        Wait till db_comp succeeds with timeout
        chk_bgp_session for ip & ipv6 addresses of added T0

        Success here -- proves adding T0 via configlet succeeded

        Now attempt via generic_updater by calling generic_patch_add_t0

        Also attempt generic_patch_rm_t0 via generic_updater

        Success implies AddRack via generic_updater succeeded too
