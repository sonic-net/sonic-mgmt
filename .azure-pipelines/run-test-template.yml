parameters:
- name: dut
  type: string
- name: tbname
  type: string
- name: tbtype
  type: string
- name: ptf_name
  type: string

steps:
- checkout: self
  clean: true
  displayName: 'checkout sonic-mgmt repo'

- task: DownloadPipelineArtifact@2
  inputs:
    source: specific
    project: build
    pipeline: 1
    artifact: sonic-buildimage.kvm
    runVersion: 'latestFromBranch'
    runBranch: 'refs/heads/master'
  displayName: "Download sonic kvm image"

- script: |
    sudo mkdir -p sonic-vm/images
    sudo mkdir -p sonic-vm/disks
    sudo cp -v ../target/sonic-vs.img.gz sonic-vm/images/sonic-vs.img.gz
    sudo gzip -fd sonic-vm/images/sonic-vs.img.gz
    username=$(id -un)
    sudo chown -R $username.$username sonic-vm

    docker rm -f sonic-mgmt-2 || true
    ./setup-container.sh -n sonic-mgmt-2

    sed -i s/use_own_value/${username}/ ansible/veos_vtb
    echo aaa > ansible/password.txt

    parent_dir=$(basename $PWD)
    docker exec sonic-mgmt-2 bash -c "pushd /var/src/$parent_dir/ansible;./testbed-cli.sh -d $(Build.SourcesDirectory)/sonic-vm -m $(inventory) -t $(testbed_file) -k ceos refresh-dut ${{ parameters.tbname }} password.txt" && sleep 180
  displayName: "Setup testbed"

- script: |
    pwd

    rm -rf $(Build.ArtifactStagingDirectory)/*
    parent_dir=$(basename $PWD)
    docker exec sonic-mgmt-2 bash -c "/var/src/$parent_dir/tests/kvmtest.sh -en -T ${{ parameters.tbtype }} -d /var/src/$parent_dir ${{ parameters.tbname }} ${{ parameters.dut }}"
  displayName: "Run tests"

- script: |
    # save dut state if test fails
    virsh_version=$(virsh --version)
    if [ $virsh_version == "6.0.0" ]; then
        mkdir -p $(Build.ArtifactStagingDirectory)/kvmdump
        virsh -c qemu:///system list
        virsh -c qemu:///system save ${{ parameters.dut }} $(Build.ArtifactStagingDirectory)/kvmdump/${{ parameters.dut }}.memdmp
        virsh -c qemu:///system dumpxml ${{ parameters.dut }} > $(Build.ArtifactStagingDirectory)/kvmdump/${{ parameters.dut }}.xml
        img=$(virsh -c qemu:///system domblklist ${{ parameters.dut }} | grep vda | awk '{print $2}')
        cp $img $(Build.ArtifactStagingDirectory)/kvmdump/${{ parameters.dut }}.img
        virsh -c qemu:///system undefine ${{ parameters.dut }}
    fi

    docker commit ${{ parameters.ptf_name }} docker-ptf:$(Build.BuildNumber)
    docker save docker-ptf:$(Build.BuildNumber) | gzip -c > $(Build.ArtifactStagingDirectory)/kvmdump/docker-ptf-dump.gz
    docker rmi docker-ptf:$(Build.BuildNumber)
  displayName: "Collect kvmdump"
  condition: failed()

- script: |
    cp -r ./tests/logs $(Build.ArtifactStagingDirectory)/
    username=$(id -un)
    sudo chown -R $username.$username $(Build.ArtifactStagingDirectory)
  displayName: "Collect test logs"
  condition: succeededOrFailed()

- publish: $(Build.ArtifactStagingDirectory)/kvmdump
  artifact: sonic-buildimage.kvmtest.${{ parameters.tbtype}}.memdump@$(System.JobAttempt)
  displayName: "Archive sonic kvm memdump"
  condition: failed()

- publish: $(Build.ArtifactStagingDirectory)/logs
  artifact: sonic-buildimage.kvmtest.${{ parameters.tbtype }}.log@$(System.JobAttempt)
  displayName: "Archive sonic kvm logs"
  condition: succeededOrFailed()

- task: PublishTestResults@2
  inputs:
    testResultsFiles: '$(Build.ArtifactStagingDirectory)/logs/**/*.xml'
    testRunTitle: kvmtest.${{ parameters.tbtype }}
  condition: succeededOrFailed()
