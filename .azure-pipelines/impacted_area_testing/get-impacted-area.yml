steps:
- script: |
    echo "##vso[task.setvariable variable=BUILD_BRANCH]${{ parameters.BUILD_BRANCH }}"

    sudo apt-get -o DPkg::Lock::Timeout=600 -y install jq
    IMPACT_AREA_INFO='${{ convertToJson(parameters.IMPACT_AREA_INFO) }}'
    echo "Input impact area info: $IMPACT_AREA_INFO"
    TEST_SCRIPTS=""
    PR_CHECKERS=""
    if [[ -n "$IMPACT_AREA_INFO" && "$IMPACT_AREA_INFO" != "{}" ]]; then
      echo "Impact area was pre-defined."
      echo "Impact area info: $IMPACT_AREA_INFO"
      TEST_SCRIPTS=$(echo "$IMPACT_AREA_INFO" | jq -c '.')
      PR_CHECKERS=$(echo "${TEST_SCRIPTS}" | jq -c 'keys')
      echo "Pre-defined test scripts: ${TEST_SCRIPTS}"
      echo "Pre-defined PR checkers: ${PR_CHECKERS}"
    else
      echo "Impact area was not pre-defined."
    fi
    echo "##vso[task.setvariable variable=PR_CHECKERS;isOutput=true]${PR_CHECKERS}"
    echo "##vso[task.setvariable variable=TEST_SCRIPTS;isOutput=true]${TEST_SCRIPTS}"
  name: VerifyParams
  displayName: "Verify input parameters"


- script: |
    set -x

    TEST_SCRIPTS='$(VerifyParams.TEST_SCRIPTS)'
    PR_CHECKERS='$(VerifyParams.PR_CHECKERS)'
    if [[ -n "$TEST_SCRIPTS" && -n "$PR_CHECKERS" && "$TEST_SCRIPTS" != "null" && "$PR_CHECKERS" != "null" ]]; then
      echo "Impact area was pre-defined, skip get diff step."
      exit 0
    fi
    git fetch --all
    DIFF_FOLDERS=$(git diff $(git merge-base origin/${{ parameters.BUILD_BRANCH }} HEAD)..HEAD  --name-only | xargs -n1 dirname | sort -u | tr '\n' ' ')

    if [[ $? -ne 0 ]]; then
      echo "##vso[task.complete result=Failed;]Get diff folders fails."
      exit 1
    else
      echo -n "##vso[task.setvariable variable=DIFF_FOLDERS]$DIFF_FOLDERS"
    fi
  continueOnError: false
  displayName: "Get diff folders"

- script: |
    set -x

    TEST_SCRIPTS='$(VerifyParams.TEST_SCRIPTS)'
    PR_CHECKERS='$(VerifyParams.PR_CHECKERS)'
    if [[ -n "$TEST_SCRIPTS" && -n "$PR_CHECKERS" && "$TEST_SCRIPTS" != "null" && "$PR_CHECKERS" != "null" ]]; then
      echo "Impact area was pre-defined, skip get impacted area step."
      echo "##vso[task.setvariable variable=PR_CHECKERS;isOutput=true]$PR_CHECKERS"
      echo "##vso[task.setvariable variable=TEST_SCRIPTS;isOutput=true]$TEST_SCRIPTS"
      exit 0
    fi
    pip install PyYAML
    pip install natsort

    FINAL_FEATURES=""
    IFS=' ' read -ra FEATURES_LIST <<< "$(DIFF_FOLDERS)"

    # Define the list of folders include common features
    COMMON_DIRS=("tests/common" "tests/scripts")

    for FEATURE in "${FEATURES_LIST[@]}"
    do
      for COMMON_DIR in "${COMMON_DIRS[@]}"; do
        if [[ "$FEATURE" == *$COMMON_DIR* ]]; then
          FINAL_FEATURES=""
          break 2
        fi
      done

      # If changes only limited to specific feature, the scope of PR testing is impacted area.
      if [[ "$FEATURE" =~ ^tests\/.* ]]; then
        # Cut the feature path
        if [[ $FEATURE == */*/* ]]; then
            FEATURE=$(echo "$FEATURE" | cut -d'/' -f1-2)
        fi

        FEATURE=${FEATURE#tests/}

        if [[ -z "$FINAL_FEATURES" ]]; then
          FINAL_FEATURES="$FEATURE"
        elif [[ ! "$FINAL_FEATURES" == *$FEATURE* ]]; then
          FINAL_FEATURES="$FINAL_FEATURES,$FEATURE"
        fi

      # If changes related to other folders excpet tests, we also consider them as common part.
      # The scope of PR testing is all test scripts.
      else
        FINAL_FEATURES=""
        break
      fi
    done

    TEST_SCRIPTS=$(python ./.azure-pipelines/impacted_area_testing/get_test_scripts.py --features ${FINAL_FEATURES} --location tests)

    if [[ $? -ne 0 ]]; then
      echo "##vso[task.complete result=Failed;]Get test scripts fails."
      exit 1
    fi

    PR_CHECKERS=$(echo "${TEST_SCRIPTS}" | jq -c 'keys')

    if [[ $? -ne 0 ]]; then
      echo "##vso[task.complete result=Failed;]Get valid PR checkers fails."
      exit 1
    fi

    echo "##vso[task.setvariable variable=PR_CHECKERS;isOutput=true]$PR_CHECKERS"
    echo "##vso[task.setvariable variable=TEST_SCRIPTS;isOutput=true]$TEST_SCRIPTS"
  name: GetImpactArea
  continueOnError: false
  displayName: "Get impacted area"
