parameters:
  - name: TARGET_BRANCH
    type: string
    default: 'origin/master'
  - name: SOURCE_BRANCH
    type: string

steps:
- script: |
    set -e  # Exit immediately if a command exits with a non-zero status
    set -u  # Treat unset variables as an error
    set -o pipefail  # Return the exit status of the last command in the pipeline that failed
    git fetch origin
    echo "Fetching changes from origin rc = $?"
    echo "SOURCE_BRANCH: ${{ parameters.SOURCE_BRANCH }}"
    echo "TARGET_BRANCH (parameter): ${{ parameters.TARGET_BRANCH }}"
    echo "GIT BRANCH: `git branch`"
    if [[ "${{ parameters.TARGET_BRANCH }}" == origin/* ]]
    then
      TARGET_BRANCH="${{ parameters.TARGET_BRANCH }}"
    else
      TARGET_BRANCH="origin/${{ parameters.TARGET_BRANCH }}"
    fi
    SOURCE_BRANCH=`git rev-parse HEAD`
    echo "SOURCE_BRANCH: $SOURCE_BRANCH"
    echo "TARGET_BRANCH: $TARGET_BRANCH"
    CHANGED_FILES=$(git diff --name-only $TARGET_BRANCH | tr '\n' ' ')
    echo "Changed files:"
    echo "$CHANGED_FILES"
    if [ -z "$CHANGED_FILES" ]
    then
      echo "No changed files"
      PR_CHECKERS="[]"
      TEST_SCRIPTS="{}"
    else
      IMPACTED_TESTS=$(python ./.azure-pipelines/impacted_area_testing/detect_function_changes.py --modified_files $CHANGED_FILES --feature_branch $SOURCE_BRANCH --target_branch $TARGET_BRANCH --directory tests --no-log)
      echo "Impacted tests:"
      echo "$IMPACTED_TESTS"

      if [[ -n "$IMPACTED_TESTS" ]]; then
        sudo apt-get -o DPkg::Lock::Timeout=600 -y install jq
        IMPACTED_TEST_SCRIPTS=$(echo "$IMPACTED_TESTS" | jq -r '(.tests // []) | join(" ")')
        TEST_SCRIPTS=$(python ./.azure-pipelines/impacted_area_testing/categorize_test_scripts_by_topology.py --files $IMPACTED_TEST_SCRIPTS)
        echo "Test scripts:"
        echo "$TEST_SCRIPTS"
        PR_CHECKERS=$(echo "${TEST_SCRIPTS}" | jq -c 'keys')
        rc=$?
        echo "PR checkers:"
        echo "$PR_CHECKERS"
        if [[ $rc -ne 0 ]]; then
          echo "##vso[task.complete result=Failed;]Get valid PR checkers fails."
          exit 1
        fi
      else
        echo "No impacted tests found."
        PR_CHECKERS="[]"
        TEST_SCRIPTS="{}"
      fi
    fi
    echo "##vso[task.setvariable variable=PR_CHECKERS;isOutput=true]$PR_CHECKERS"
    echo "##vso[task.setvariable variable=TEST_SCRIPTS;isOutput=true]$TEST_SCRIPTS"

  name: SetVariableTask
  continueOnError: false
  displayName: "Get impacted area"
