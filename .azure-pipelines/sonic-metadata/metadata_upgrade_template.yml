parameters:
- name: TESTBED_NAME
  type: string
  default: vms7-t0-s6100-4
  displayName: "Testbed Name"
- name: UPGRADE_TYPE
  type: string
  displayName: "Type of upgrade"
- name: VM_TYPE
  type: string
  displayName: "VM type of neighbor devices"
  default: ceos
  values:
    - vsonic
    - ceos
- name: METADATA_UPGRADE_PATH
  default: true
  type: boolean
- name: SKIP_REBOOT_CASES
  default: "test_cancelled_upgrade_path test_warm_upgrade_sad_path test_double_upgrade_path"
  type: string
- name: SELECT_SAD_CASES
  default: "sad,multi_sad,sad_bgp,sad_lag_member,sad_lag,sad_vlan_port,sad_inboot"
  type: string
- name: TEST_TCAM_HOLE
  default: false
  type: boolean
- name: FROM_IMAGE_LIST
  type: string
  displayName: "All base image numbers (space separated)"
- name: FROM_IMAGE_URL
  displayName: "Base image location"
  type: string
- name: TO_IMAGE_LIST
  type: string
  displayName: "All target image numbers (space separated)"
- name: TO_IMAGE_URL
  displayName: "Target image location"
  type: string
- name: VSONIC_NEIGHBOR_IMAGE_URL
  displayName: "SONiC neighbor image URL (used only for vsonic neighbors)"
  type: string
  default: https://sonic-build.azurewebsites.net/api/sonic/artifacts?branchName=master&platform=vs&target=target%2Fsonic-vs.img.gz
- name: ITERATIONS
  type: string
  default: "1"
- name: SKIP_TEST_RESULTS_UPLOADING
  displayName: "Upload timing data report to Kusto"
  type: boolean
  default: true
- name: ENABLE_DATAACL
  type: boolean
  default: true
- name: POOL
  type: string
  default: nightly
  displayName: "Agent pool name"
  values:
    - nightly
    - nightly-svc
    - nightly-bjw
    - nightly-tk5
- name: SKIP_LOCKING_TESTBED
  displayName: "Skip locking testbed (Please reserve the testbed manually)"
  type: boolean
  default: false

stages:
- stage: SONiCMetadataUpgradeTest
  dependsOn: []
  jobs:
  - job:
    pool: ${{ parameters.POOL }}
    displayName: "Test SONiC Metadata Files"
    timeoutInMinutes: 0
    variables:
      - name: CONTINUE
        value: true
      - name: COLLECT_ARTIFACT
        value: true
      - group: TBSHARE_SECRETS
      - group: KUSTO_SECRETS
      - group: SECRETS_JSON
    steps:
    - checkout: self
    - checkout: https://mssonic@dev.azure.com/mssonic/internal/_git/sonic-metadata

    - template: ../nightly/templates/get_secrets.yml
      parameters:
        BASE_DIR: sonic-mgmt-int

    - task: PythonScript@0
      displayName: Parse Testbed Info
      inputs:
        scriptSource: 'inline'
        script: |
          from __future__ import print_function
          import os, imp, sys

          testbed_module = imp.load_source('testbed', 'sonic-mgmt-int/tests/common/testbed.py')
          testbed_name = '${{ parameters.TESTBED_NAME }}'
          testbed_file = 'testbed.yaml'
          tbinfo = testbed_module.TestbedInfo('sonic-mgmt-int/ansible/{}'.format(testbed_file))
          target_testbed = tbinfo.testbed_topo.get(testbed_name, None)
          if not target_testbed:
              print('Testbed {} not found!'.format(testbed_name))
              sys.exit(1)
          dut_list = target_testbed.get('duts', [])
          dut_list_str = ' '.join(x for x in dut_list)

          print('Basic info of testbed {}:'.format(testbed_name))
          print('    INVENTORY_NAME={}'.format(target_testbed['inv_name']))
          print('     TOPOLOGY_NAME={}'.format(target_testbed['topo']['name']))
          print('     TOPOLOGY_TYPE={}'.format(target_testbed['topo']['type']))
          print('          DUT_LIST={}'.format(dut_list_str))

          # Below code can create dynamic azure pipeline variables
          # Reference: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch#set-a-job-scoped-variable-from-a-script
          print('##vso[task.setvariable variable=INVENTORY_NAME;]{}'.format(target_testbed['inv_name']))
          print('##vso[task.setvariable variable=TOPOLOGY_NAME;]{}'.format(target_testbed['topo']['name']))
          print('##vso[task.setvariable variable=TOPOLOGY_TYPE;]{}'.format(target_testbed['topo']['type']))
          print('##vso[task.setvariable variable=DUT_LIST;]{}'.format(dut_list_str))

    - script: |
        set -ex
        TIMEOUT=7200
        INTERVAL=60
        wait_time=0
        until python ./sonic-mgmt-int/.azure-pipelines/nightly/templates/lock_release.py -t ${{ parameters.TESTBED_NAME }} -a lock -r UpgradePathAZP -o 48; do
            if (( $wait_time >= $TIMEOUT )); then
                echo "Failed to lock testbed ${{ parameters.TESTBED_NAME }} after retrying for $TIMEOUT seconds with interval $INTERVAL"
                exit 1
            fi
            echo "Lock testbed ${{ parameters.TESTBED_NAME }} failed, wait $INTERVAL seconds to retry"
            sleep $INTERVAL
            wait_time=$(expr $wait_time + $INTERVAL)
        done
        echo "##vso[task.setvariable variable=TESTBED_LOCKED]Yes"
      env:
          TBSHARE_AAD_CLIENT_ID: $(TBSHARE_AAD_CLIENT_ID)
          TBSHARE_AAD_CLIENT_SECRET: $(TBSHARE_AAD_CLIENT_SECRET)
      displayName: Lock Testbed
      condition: eq('${{ parameters.SKIP_LOCKING_TESTBED }}', 'false')

    - task: Bash@3
      displayName: remove-topo for ceos, and add-topo for vsonic
      timeoutInMinutes: 30
      inputs:
        targetType: 'inline'
        script: |
          set -ex
          cd ./sonic-mgmt-int/
          cd ansible

          http_proxy='' https_proxy='' ./testbed-cli.sh -k ceos remove-topo ${{ parameters.TESTBED_NAME }} password.txt
          http_proxy='' https_proxy='' ./testbed-cli.sh -k vsonic start-topo-vms ${{ parameters.TESTBED_NAME }} password.txt -e sonic_image_filename=sonic-vs-${{ parameters.TESTBED_NAME }}.img -e 'sonic_image_url=${{ parameters.VSONIC_NEIGHBOR_IMAGE_URL }}'
          http_proxy='' https_proxy='' ./testbed-cli.sh -k vsonic add-topo ${{ parameters.TESTBED_NAME }} password.txt
      condition: and(succeeded(), eq('${{ parameters.VM_TYPE }}', 'vsonic'))

    - task: Bash@3
      displayName: Deploy Minigraph
      timeoutInMinutes: 30
      inputs:
        targetType: 'inline'
        script: |
          set -ex
          cd ./sonic-mgmt-int/
          if [[ ${{ parameters.ENABLE_DATAACL }} == True ]]; then
              CONFIG_PARAMS="$CONFIG_PARAMS -e enable_data_plane_acl=true"
          else
              CONFIG_PARAMS="$CONFIG_PARAMS -e enable_data_plane_acl=false"
          fi
          cd ansible

          http_proxy='' https_proxy='' ./testbed-cli.sh restart-ptf ${{ parameters.TESTBED_NAME }} password.txt -e ptf_imagetag=internal
          http_proxy='' https_proxy='' ./testbed-cli.sh deploy-mg ${{ parameters.TESTBED_NAME }} $INVENTORY_NAME password.txt $CONFIG_PARAMS
          sleep 60
      env:
        INVENTORY_NAME: $(INVENTORY_NAME)

    - template: upgrade_sonic_metadata.yml
      parameters:
        TESTBED_NAME: ${{ parameters.TESTBED_NAME }}
        UPGRADE_TYPE: ${{ parameters.UPGRADE_TYPE }}
        VM_TYPE: ${{ parameters.VM_TYPE }}
        FROM_IMAGE_LIST: ${{ parameters.FROM_IMAGE_LIST }}
        FROM_IMAGE_URL: ${{ parameters.FROM_IMAGE_URL }}
        TO_IMAGE_LIST: ${{ parameters.TO_IMAGE_LIST }}
        TO_IMAGE_URL: ${{ parameters.TO_IMAGE_URL }}
        METADATA_UPGRADE_PATH: ${{ parameters.METADATA_UPGRADE_PATH }}
        SKIP_REBOOT_CASES: ${{ parameters.SKIP_REBOOT_CASES }}
        SELECT_SAD_CASES: ${{ parameters.SELECT_SAD_CASES }}
        TEST_TCAM_HOLE: ${{ parameters.TEST_TCAM_HOLE }}
        SKIP_TEST_RESULTS_UPLOADING: ${{ parameters.SKIP_TEST_RESULTS_UPLOADING }}
        # AZP doesn't support defining runtime variables. Moreoever yaml does not support for loops.
        # Since there is only for-each loop, the list needs to be hardcoded. This is ugly, but does the job.
        # This hardcoded list isn't visible to user. User provide how many iterations are needed.
        ${{ if eq(parameters.ITERATIONS, '1') }}:
          ITERATIONS : [1]
        ${{ if eq(parameters.ITERATIONS, '10') }}:
          ITERATIONS : [1,2,3,4,5,6,7,8,9,10]
        ${{ if eq(parameters.ITERATIONS, '16') }}:
          ITERATIONS : [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]
        ${{ if eq(parameters.ITERATIONS, '17') }}:
          ITERATIONS : [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]
        ${{ if eq(parameters.ITERATIONS, '18') }}:
          ITERATIONS : [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]
        ${{ if eq(parameters.ITERATIONS, '20') }}:
          ITERATIONS : [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
        ${{ if eq(parameters.ITERATIONS, '22') }}:
          ITERATIONS : [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]
        ${{ if eq(parameters.ITERATIONS, '100') }}:
          ITERATIONS : [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,
            67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]
        ${{ if eq(parameters.ITERATIONS, '500') }}:
          ITERATIONS : [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,
            69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,
            103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,
            130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,
            156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,
            182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,
            208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,
            234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,
            260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,
            286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,
            312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,
            338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,
            364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,
            390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,
            416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,
            442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,
            468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,
            494,495,496,497,498,499,500]
    - task: PublishTestResults@2
      displayName: Publish test results
      inputs:
        testResultsFiles: '**/tests/logs/**/*.xml'
        testRunTitle: ${{ parameters.TESTBED_NAME}}.upgrade_path
      condition: always()

    - task: Bash@3
      displayName: remove-topo for vsonic, and add-topo for ceos
      timeoutInMinutes: 30
      inputs:
        targetType: 'inline'
        script: |
          set -ex
          cd ./sonic-mgmt-int/
          cd ansible

          http_proxy='' https_proxy='' ./testbed-cli.sh -k vsonic remove-topo ${{ parameters.TESTBED_NAME }} password.txt
          http_proxy='' https_proxy='' ./testbed-cli.sh -k vsonic stop-topo-vms ${{ parameters.TESTBED_NAME }} password.txt
          http_proxy='' https_proxy='' ./testbed-cli.sh -k ceos add-topo ${{ parameters.TESTBED_NAME }} password.txt
      condition: and(eq(variables['TESTBED_LOCKED'], 'Yes'), eq('${{ parameters.VM_TYPE }}', 'vsonic'))

    - script: |
        python ./sonic-mgmt-int/.azure-pipelines/nightly/templates/lock_release.py -t ${{ parameters.TESTBED_NAME }} -a release
      env:
          TBSHARE_AAD_CLIENT_ID: $(TBSHARE_AAD_CLIENT_ID)
          TBSHARE_AAD_CLIENT_SECRET: $(TBSHARE_AAD_CLIENT_SECRET)
      displayName: Release Testbed
      condition: eq('${{ parameters.SKIP_LOCKING_TESTBED }}', 'false')
